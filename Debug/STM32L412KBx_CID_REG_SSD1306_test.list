
STM32L412KBx_CID_REG_SSD1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 ccmram        0000018c  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000904  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003ef8  08003ef8  00020088  2**0
                  CONTENTS
  5 .ARM          00000000  08003ef8  08003ef8  00020088  2**0
                  CONTENTS
  6 .preinit_array 00000000  08003ef8  08003ef8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000088  20000000  08003f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000558  20000088  08003f90  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e0  08003f90  000205e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018669  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b69  00000000  00000000  00038721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0003b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0003bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ba3  00000000  00000000  0003c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c3c7  00000000  00000000  0004fe0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006a8a3  00000000  00000000  0005c1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c6a75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020a8  00000000  00000000  000c6ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003450 	.word	0x08003450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08003450 	.word	0x08003450

080001d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	6039      	str	r1, [r7, #0]
 80001da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	db0a      	blt.n	80001fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	490c      	ldr	r1, [pc, #48]	; (800021c <__NVIC_SetPriority+0x4c>)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	0112      	lsls	r2, r2, #4
 80001f0:	b2d2      	uxtb	r2, r2
 80001f2:	440b      	add	r3, r1
 80001f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f8:	e00a      	b.n	8000210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4908      	ldr	r1, [pc, #32]	; (8000220 <__NVIC_SetPriority+0x50>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f003 030f 	and.w	r3, r3, #15
 8000206:	3b04      	subs	r3, #4
 8000208:	0112      	lsls	r2, r2, #4
 800020a:	b2d2      	uxtb	r2, r2
 800020c:	440b      	add	r3, r1
 800020e:	761a      	strb	r2, [r3, #24]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3b01      	subs	r3, #1
 8000230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000234:	d301      	bcc.n	800023a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000236:	2301      	movs	r3, #1
 8000238:	e00f      	b.n	800025a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <SysTick_Config+0x40>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3b01      	subs	r3, #1
 8000240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000242:	210f      	movs	r1, #15
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f7ff ffc2 	bl	80001d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SysTick_Config+0x40>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <SysTick_Config+0x40>)
 8000254:	2207      	movs	r2, #7
 8000256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	e000e010 	.word	0xe000e010

08000268 <main>:
FONT_INFO CurrentFont;

uint8_t zmienna1, zmienna2, zmienna3;
void key_proc1(void);

int main(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800026c:	f001 fad4 	bl	8001818 <SystemClock_Config>
	RCC_gpio_init();
 8000270:	f001 fc4e 	bl	8001b10 <RCC_gpio_init>
	sw_softTimers_init( 1, MICRO_SEC );
 8000274:	2102      	movs	r1, #2
 8000276:	2001      	movs	r0, #1
 8000278:	f002 faff 	bl	800287a <sw_softTimers_init>

	sw_i2c_simple_init();
 800027c:	f001 f9a6 	bl	80015cc <sw_i2c_simple_init>
	sw_led_debug_init();
 8000280:	f001 fcc8 	bl	8001c14 <sw_led_debug_init>
	sw_keyboard_init();
 8000284:	f000 fc7c 	bl	8000b80 <sw_keyboard_init>

	SysTick_Config( SystemCoreClock / 1000 );	// Systick on 1 ms
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <main+0x90>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <main+0x94>)
 800028e:	fba2 2303 	umull	r2, r3, r2, r3
 8000292:	099b      	lsrs	r3, r3, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffc5 	bl	8000224 <SysTick_Config>

	delay_ms(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f002 fba0 	bl	80029e0 <delay_ms>

	ADXL345__init();
 80002a0:	f000 fcaa 	bl	8000bf8 <ADXL345__init>

	sw_ssd1306_init();
 80002a4:	f001 fdea 	bl	8001e7c <sw_ssd1306_init>
	delay_ms(100);
 80002a8:	2064      	movs	r0, #100	; 0x64
 80002aa:	f002 fb99 	bl	80029e0 <delay_ms>

//	VL53L0X__setup();
	delay_ms(100);
 80002ae:	2064      	movs	r0, #100	; 0x64
 80002b0:	f002 fb96 	bl	80029e0 <delay_ms>

	delay_ms(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f002 fb93 	bl	80029e0 <delay_ms>
//	MPU6050__calibrateGyro(50);

//	I2CSTATUS status = sw_i2c_IsDeviceReady( ADDRESS_DEFAULT << 1, 3, 3 );
//	sw_i2c_slave_test( ADDRESS_DEFAULT << 1 );

	softTimer3 = 200;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <main+0x98>)
 80002bc:	22c8      	movs	r2, #200	; 0xc8
 80002be:	801a      	strh	r2, [r3, #0]
	register_measure_callback( pomiar );
 80002c0:	4810      	ldr	r0, [pc, #64]	; (8000304 <main+0x9c>)
 80002c2:	f001 fb71 	bl	80019a8 <register_measure_callback>

//	paj7620_init( fps_120 );
	delay_ms(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f002 fb8a 	bl	80029e0 <delay_ms>

//    register_gesture_callback( my_gesture, NULL );


	softTimer3 = 500;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <main+0x98>)
 80002ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d2:	801a      	strh	r2, [r3, #0]
	while(1) {

//		SW_VCNL4010_MEASURE_EVENT();
//		PAJ7620_EVENT();

		if (softTimer2 == 0) {
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <main+0xa0>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d102      	bne.n	80002e4 <main+0x7c>
			softTimer2 = 200;
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <main+0xa0>)
 80002e0:	22c8      	movs	r2, #200	; 0xc8
 80002e2:	801a      	strh	r2, [r3, #0]
//			sw_led_xor();

//			mpu6050_test_loop();
//			VL53L0X__loop();
		}
		if ( !softTimer3 ) {
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <main+0x98>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f2      	bne.n	80002d4 <main+0x6c>
			softTimer3 = 100;
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <main+0x98>)
 80002f0:	2264      	movs	r2, #100	; 0x64
 80002f2:	801a      	strh	r2, [r3, #0]
		if (softTimer2 == 0) {
 80002f4:	e7ee      	b.n	80002d4 <main+0x6c>
 80002f6:	bf00      	nop
 80002f8:	20000000 	.word	0x20000000
 80002fc:	10624dd3 	.word	0x10624dd3
 8000300:	200005d2 	.word	0x200005d2
 8000304:	080005c5 	.word	0x080005c5
 8000308:	200005be 	.word	0x200005be

0800030c <key1_decoded>:
		}
	}
}


void key1_decoded(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	static int8_t counter1, counter2, counter3;
	if ( keyboard_ptr()->keyEvent == SHORT_PRESS ) {
 8000310:	f000 fc2c 	bl	8000b6c <keyboard_ptr>
 8000314:	4603      	mov	r3, r0
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d119      	bne.n	8000350 <key1_decoded+0x44>
//		sw_led_on();
//		sw_led_start_blinking( 2, 100 );
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
 800031c:	4b5d      	ldr	r3, [pc, #372]	; (8000494 <key1_decoded+0x188>)
 800031e:	f993 3000 	ldrsb.w	r3, [r3]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	3301      	adds	r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	b25a      	sxtb	r2, r3
 800032a:	4b5a      	ldr	r3, [pc, #360]	; (8000494 <key1_decoded+0x188>)
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	4b59      	ldr	r3, [pc, #356]	; (8000494 <key1_decoded+0x188>)
 8000330:	f993 3000 	ldrsb.w	r3, [r3]
 8000334:	ee07 3a90 	vmov	s15, r3
 8000338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <key1_decoded+0x18c>)
 800033e:	eeb0 0a67 	vmov.f32	s0, s15
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f002 f931 	bl	80025ac <TEXT_display_float>
		sw_ssd1306_display();
 800034a:	f001 fd21 	bl	8001d90 <sw_ssd1306_display>
	} else
	if ( keyboard_ptr()->keyEvent == KEY_REPEAT ) {
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
		sw_ssd1306_display();
	}
}
 800034e:	e09e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == MEDIUM_PRESS ) {
 8000350:	f000 fc0c 	bl	8000b6c <keyboard_ptr>
 8000354:	4603      	mov	r3, r0
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b02      	cmp	r3, #2
 800035a:	d119      	bne.n	8000390 <key1_decoded+0x84>
		TEXT_display_float( 0, 16,  ++counter2,  	&TextY );
 800035c:	4b4f      	ldr	r3, [pc, #316]	; (800049c <key1_decoded+0x190>)
 800035e:	f993 3000 	ldrsb.w	r3, [r3]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	b25a      	sxtb	r2, r3
 800036a:	4b4c      	ldr	r3, [pc, #304]	; (800049c <key1_decoded+0x190>)
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <key1_decoded+0x190>)
 8000370:	f993 3000 	ldrsb.w	r3, [r3]
 8000374:	ee07 3a90 	vmov	s15, r3
 8000378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800037c:	4a48      	ldr	r2, [pc, #288]	; (80004a0 <key1_decoded+0x194>)
 800037e:	eeb0 0a67 	vmov.f32	s0, s15
 8000382:	2110      	movs	r1, #16
 8000384:	2000      	movs	r0, #0
 8000386:	f002 f911 	bl	80025ac <TEXT_display_float>
		sw_ssd1306_display();
 800038a:	f001 fd01 	bl	8001d90 <sw_ssd1306_display>
}
 800038e:	e07e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == DOUBLE_PRESS ) {
 8000390:	f000 fbec 	bl	8000b6c <keyboard_ptr>
 8000394:	4603      	mov	r3, r0
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b05      	cmp	r3, #5
 800039a:	d119      	bne.n	80003d0 <key1_decoded+0xc4>
		TEXT_display_float( 0, 32,  ++counter3,  	&TextZ );
 800039c:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <key1_decoded+0x198>)
 800039e:	f993 3000 	ldrsb.w	r3, [r3]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	3301      	adds	r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	b25a      	sxtb	r2, r3
 80003aa:	4b3e      	ldr	r3, [pc, #248]	; (80004a4 <key1_decoded+0x198>)
 80003ac:	701a      	strb	r2, [r3, #0]
 80003ae:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <key1_decoded+0x198>)
 80003b0:	f993 3000 	ldrsb.w	r3, [r3]
 80003b4:	ee07 3a90 	vmov	s15, r3
 80003b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003bc:	4a3a      	ldr	r2, [pc, #232]	; (80004a8 <key1_decoded+0x19c>)
 80003be:	eeb0 0a67 	vmov.f32	s0, s15
 80003c2:	2120      	movs	r1, #32
 80003c4:	2000      	movs	r0, #0
 80003c6:	f002 f8f1 	bl	80025ac <TEXT_display_float>
		sw_ssd1306_display();
 80003ca:	f001 fce1 	bl	8001d90 <sw_ssd1306_display>
}
 80003ce:	e05e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == VLONG_PRESS ) {
 80003d0:	f000 fbcc 	bl	8000b6c <keyboard_ptr>
 80003d4:	4603      	mov	r3, r0
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b04      	cmp	r3, #4
 80003da:	d139      	bne.n	8000450 <key1_decoded+0x144>
		counter3 = 0; counter2 = 0; counter1 = 0;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <key1_decoded+0x198>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <key1_decoded+0x190>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <key1_decoded+0x188>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
		TEXT_display_float( 0,  0,  counter1,  	&TextX );
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <key1_decoded+0x188>)
 80003f0:	f993 3000 	ldrsb.w	r3, [r3]
 80003f4:	ee07 3a90 	vmov	s15, r3
 80003f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fc:	4a26      	ldr	r2, [pc, #152]	; (8000498 <key1_decoded+0x18c>)
 80003fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000402:	2100      	movs	r1, #0
 8000404:	2000      	movs	r0, #0
 8000406:	f002 f8d1 	bl	80025ac <TEXT_display_float>
		TEXT_display_float( 0, 16,  counter2,  	&TextY );
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <key1_decoded+0x190>)
 800040c:	f993 3000 	ldrsb.w	r3, [r3]
 8000410:	ee07 3a90 	vmov	s15, r3
 8000414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000418:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <key1_decoded+0x194>)
 800041a:	eeb0 0a67 	vmov.f32	s0, s15
 800041e:	2110      	movs	r1, #16
 8000420:	2000      	movs	r0, #0
 8000422:	f002 f8c3 	bl	80025ac <TEXT_display_float>
		TEXT_display_float( 0, 32,  counter3,  	&TextZ );
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <key1_decoded+0x198>)
 8000428:	f993 3000 	ldrsb.w	r3, [r3]
 800042c:	ee07 3a90 	vmov	s15, r3
 8000430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <key1_decoded+0x19c>)
 8000436:	eeb0 0a67 	vmov.f32	s0, s15
 800043a:	2120      	movs	r1, #32
 800043c:	2000      	movs	r0, #0
 800043e:	f002 f8b5 	bl	80025ac <TEXT_display_float>
		sw_led_start_blinking( 3, 100 );
 8000442:	2164      	movs	r1, #100	; 0x64
 8000444:	2003      	movs	r0, #3
 8000446:	f001 fc07 	bl	8001c58 <sw_led_start_blinking>
		sw_ssd1306_display();
 800044a:	f001 fca1 	bl	8001d90 <sw_ssd1306_display>
}
 800044e:	e01e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == KEY_REPEAT ) {
 8000450:	f000 fb8c 	bl	8000b6c <keyboard_ptr>
 8000454:	4603      	mov	r3, r0
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b06      	cmp	r3, #6
 800045a:	d118      	bne.n	800048e <key1_decoded+0x182>
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <key1_decoded+0x188>)
 800045e:	f993 3000 	ldrsb.w	r3, [r3]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	3301      	adds	r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	b25a      	sxtb	r2, r3
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <key1_decoded+0x188>)
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <key1_decoded+0x188>)
 8000470:	f993 3000 	ldrsb.w	r3, [r3]
 8000474:	ee07 3a90 	vmov	s15, r3
 8000478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <key1_decoded+0x18c>)
 800047e:	eeb0 0a67 	vmov.f32	s0, s15
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f002 f891 	bl	80025ac <TEXT_display_float>
		sw_ssd1306_display();
 800048a:	f001 fc81 	bl	8001d90 <sw_ssd1306_display>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200000a4 	.word	0x200000a4
 8000498:	2000059c 	.word	0x2000059c
 800049c:	200000a5 	.word	0x200000a5
 80004a0:	2000057c 	.word	0x2000057c
 80004a4:	200000a6 	.word	0x200000a6
 80004a8:	20000530 	.word	0x20000530

080004ac <key2_decoded>:
void key2_decoded(void) { sw_led_xor(); }
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	f001 fb9a 	bl	8001be8 <sw_led_xor>
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <srednia1>:


#define MEDIAL	20
static float32_t srednia1( float32_t wartosc ) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	ed87 0a01 	vstr	s0, [r7, #4]
	static float32_t bufor1[MEDIAL] 		= {0};
	static uint16_t kolejny_pomiar = 0;
	bufor1[ kolejny_pomiar++ ] = wartosc;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <srednia1+0x84>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	b291      	uxth	r1, r2
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <srednia1+0x84>)
 80004cc:	8011      	strh	r1, [r2, #0]
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <srednia1+0x88>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	601a      	str	r2, [r3, #0]
	if (kolejny_pomiar == MEDIAL) {
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <srednia1+0x84>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	2b14      	cmp	r3, #20
 80004de:	d102      	bne.n	80004e6 <srednia1+0x2e>
		kolejny_pomiar = 0;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <srednia1+0x84>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
	}

	float32_t wynik = 0;
 80004e6:	f04f 0300 	mov.w	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<MEDIAL; i++ ) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	e00e      	b.n	8000510 <srednia1+0x58>
		wynik = wynik + bufor1[i];
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <srednia1+0x88>)
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	edd3 7a00 	vldr	s15, [r3]
 80004fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000506:	edc7 7a03 	vstr	s15, [r7, #12]
	for ( uint8_t i=0; i<MEDIAL; i++ ) {
 800050a:	7afb      	ldrb	r3, [r7, #11]
 800050c:	3301      	adds	r3, #1
 800050e:	72fb      	strb	r3, [r7, #11]
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	2b13      	cmp	r3, #19
 8000514:	d9ed      	bls.n	80004f2 <srednia1+0x3a>
	}
	wynik = (float32_t)wynik / MEDIAL;
 8000516:	ed97 7a03 	vldr	s14, [r7, #12]
 800051a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800051e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000522:	edc7 7a03 	vstr	s15, [r7, #12]
	return wynik;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	ee07 3a90 	vmov	s15, r3
}
 800052c:	eeb0 0a67 	vmov.f32	s0, s15
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200000a8 	.word	0x200000a8
 8000540:	200000ac 	.word	0x200000ac

08000544 <srednia2>:

}

// ------------ Definicje funkcji --------------

static uint16_t srednia2( uint16_t wartosc ) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor2[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor2 [ kolejny_pomiar++ ] = wartosc;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <srednia2+0x74>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	b2d1      	uxtb	r1, r2
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <srednia2+0x74>)
 8000558:	7011      	strb	r1, [r2, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <srednia2+0x78>)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <srednia2+0x74>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d102      	bne.n	8000572 <srednia2+0x2e>
		kolejny_pomiar = 0;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <srednia2+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000576:	2300      	movs	r3, #0
 8000578:	72fb      	strb	r3, [r7, #11]
 800057a:	e00a      	b.n	8000592 <srednia2+0x4e>
		wynik = wynik + bufor2[i];
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <srednia2+0x78>)
 8000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	3301      	adds	r3, #1
 8000590:	72fb      	strb	r3, [r7, #11]
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d9f1      	bls.n	800057c <srednia2+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	b29b      	uxth	r3, r3
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <srednia2+0x7c>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	089b      	lsrs	r3, r3, #2
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	return wynik;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	b29b      	uxth	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	200000fc 	.word	0x200000fc
 80005bc:	20000100 	.word	0x20000100
 80005c0:	cccccccd 	.word	0xcccccccd

080005c4 <pomiar>:


void pomiar( T_RESULTS *pomiar1 ) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint16_t result;

	// Składamy wynik 16 bitowy z 8 bitowych
	result = ( (uint16_t)pomiar1->proximityHigh<<8 ) | pomiar1->proximityLow;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	78db      	ldrb	r3, [r3, #3]
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b21b      	sxth	r3, r3
 80005de:	81fb      	strh	r3, [r7, #14]
	proximityAverage = srednia1(result ),
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	f7ff ff63 	bl	80004b8 <srednia1>
 80005f2:	eef0 7a40 	vmov.f32	s15, s0
 80005f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fa:	ee17 3a90 	vmov	r3, s15
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <pomiar+0x78>)
 8000602:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 0, result, 1 );

	result = ( (uint16_t)pomiar1->ambientHigh<<8 )   | pomiar1->ambientLow;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	b21b      	sxth	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b21b      	sxth	r3, r3
 8000616:	81fb      	strh	r3, [r7, #14]
	ambilightAverage = srednia2(result);
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff92 	bl	8000544 <srednia2>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <pomiar+0x7c>)
 8000626:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 36, result, 1 );

	gpio_pin_XOR( DEBUG_PORT0, DEBUG_PIN0 );
 8000628:	2108      	movs	r1, #8
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f001 fa94 	bl	8001b5a <gpio_pin_XOR>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000598 	.word	0x20000598
 8000640:	20000596 	.word	0x20000596

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <SystemInit+0x5c>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <SystemInit+0x60>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <SystemInit+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <SystemInit+0x60>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <SystemInit+0x60>)
 80006b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <SystemInit+0x60>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <SystemInit+0x60>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <SystemInit+0x60>)
 80006d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SystemInit+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	40021000 	.word	0x40021000

080006f0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80006f6:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d107      	bne.n	8000712 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000702:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e005      	b.n	800071e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <SystemCoreClockUpdate+0x148>)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 030c 	and.w	r3, r3, #12
 8000730:	2b0c      	cmp	r3, #12
 8000732:	d866      	bhi.n	8000802 <SystemCoreClockUpdate+0x112>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <SystemCoreClockUpdate+0x4c>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	08000771 	.word	0x08000771
 8000740:	08000803 	.word	0x08000803
 8000744:	08000803 	.word	0x08000803
 8000748:	08000803 	.word	0x08000803
 800074c:	08000779 	.word	0x08000779
 8000750:	08000803 	.word	0x08000803
 8000754:	08000803 	.word	0x08000803
 8000758:	08000803 	.word	0x08000803
 800075c:	08000781 	.word	0x08000781
 8000760:	08000803 	.word	0x08000803
 8000764:	08000803 	.word	0x08000803
 8000768:	08000803 	.word	0x08000803
 800076c:	08000789 	.word	0x08000789
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	6013      	str	r3, [r2, #0]
      break;
 8000776:	e048      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <SystemCoreClockUpdate+0x14c>)
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <SystemCoreClockUpdate+0x150>)
 800077c:	601a      	str	r2, [r3, #0]
      break;
 800077e:	e044      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <SystemCoreClockUpdate+0x154>)
 8000784:	601a      	str	r2, [r3, #0]
      break;
 8000786:	e040      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d003      	beq.n	80007ae <SystemCoreClockUpdate+0xbe>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d006      	beq.n	80007ba <SystemCoreClockUpdate+0xca>
 80007ac:	e00b      	b.n	80007c6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <SystemCoreClockUpdate+0x150>)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	613b      	str	r3, [r7, #16]
          break;
 80007b8:	e00b      	b.n	80007d2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <SystemCoreClockUpdate+0x154>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	613b      	str	r3, [r7, #16]
          break;
 80007c4:	e005      	b.n	80007d2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	613b      	str	r3, [r7, #16]
          break;
 80007d0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0e5b      	lsrs	r3, r3, #25
 80007ea:	f003 0303 	and.w	r3, r3, #3
 80007ee:	3301      	adds	r3, #1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <SystemCoreClockUpdate+0x14c>)
 80007fe:	6013      	str	r3, [r2, #0]
      break;
 8000800:	e003      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	6013      	str	r3, [r2, #0]
      break;
 8000808:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	091b      	lsrs	r3, r3, #4
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <SystemCoreClockUpdate+0x158>)
 8000816:	5cd3      	ldrb	r3, [r2, r3]
 8000818:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <SystemCoreClockUpdate+0x14c>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	fa22 f303 	lsr.w	r3, r2, r3
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	371c      	adds	r7, #28
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	08003608 	.word	0x08003608
 800083c:	20000000 	.word	0x20000000
 8000840:	00f42400 	.word	0x00f42400
 8000844:	007a1200 	.word	0x007a1200
 8000848:	080035f8 	.word	0x080035f8

0800084c <sw_get_keys_simple>:
#	define BTN2_PIN				PB5
#	define learn_key1_pressed()	gpio_pin_READ( BTN1_PORT, BTN1_PIN )
#	define learn_key2_pressed()	gpio_pin_READ( BTN2_PORT, BTN2_PIN )

	/********************************* Obsługa kilku klawiszy  *******************************/
	static inline uint8_t sw_get_keys_simple( void ) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	2310      	movs	r3, #16
 8000854:	80fb      	strh	r3, [r7, #6]
extern void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin );
extern void RCC_gpio_init( void );
extern void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num );

static INLINE uint8_t gpio_pin_READ( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
	if ( !(port->IDR & pin) ) return 1;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <sw_get_keys_simple+0x50>)
 8000858:	691a      	ldr	r2, [r3, #16]
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <sw_get_keys_simple+0x1a>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <sw_get_keys_simple+0x1c>
	else return 0;
 8000866:	2300      	movs	r3, #0
		if ( learn_key1_pressed() )
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <sw_get_keys_simple+0x24>
			return 1;									// Przycisk 1 wciśnięty
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <sw_get_keys_simple+0x44>
 8000870:	2320      	movs	r3, #32
 8000872:	80bb      	strh	r3, [r7, #4]
	if ( !(port->IDR & pin) ) return 1;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <sw_get_keys_simple+0x50>)
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <sw_get_keys_simple+0x38>
 8000880:	2301      	movs	r3, #1
 8000882:	e000      	b.n	8000886 <sw_get_keys_simple+0x3a>
	else return 0;
 8000884:	2300      	movs	r3, #0
		else
		if ( learn_key2_pressed() )
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <sw_get_keys_simple+0x42>
			return 2;
 800088a:	2302      	movs	r3, #2
 800088c:	e000      	b.n	8000890 <sw_get_keys_simple+0x44>
		return 0;
 800088e:	2300      	movs	r3, #0
	}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	48000400 	.word	0x48000400

080008a0 <key_pressed>:
	return keyEvent;
}
/************************************************************************/

/********************** Main machine state analyzing ********************/
static KEY_EVENT_t key_pressed( void ) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	static  uint8_t  	lastState = keyRELEASED;
			KEY_EVENT_t keyEvent  = false;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]

	uint8_t pressKeyCheck = sw_get_keys_simple();
 80008aa:	f7ff ffcf 	bl	800084c <sw_get_keys_simple>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]

	if (pressKeyCheck) {
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <key_pressed+0x24>
		keyboard.keyCoded = pressKeyCheck;
 80008b8:	4aa4      	ldr	r2, [pc, #656]	; (8000b4c <key_pressed+0x2ac>)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	7053      	strb	r3, [r2, #1]
		pressKeyCheck = keyPRESSED;
 80008be:	2301      	movs	r3, #1
 80008c0:	71bb      	strb	r3, [r7, #6]
 80008c2:	e001      	b.n	80008c8 <key_pressed+0x28>
	} else {
		pressKeyCheck = keyRELEASED;
 80008c4:	2300      	movs	r3, #0
 80008c6:	71bb      	strb	r3, [r7, #6]
	}

	uint8_t slope = analyze_slope( pressKeyCheck, lastState );
 80008c8:	4ba1      	ldr	r3, [pc, #644]	; (8000b50 <key_pressed+0x2b0>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	713b      	strb	r3, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	70fb      	strb	r3, [r7, #3]
	if 		(state == keyPRESSED  && lastState == keyRELEASED)
 80008d4:	793b      	ldrb	r3, [r7, #4]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <key_pressed+0x46>
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <key_pressed+0x46>
		state = stateFALL;
 80008e0:	2301      	movs	r3, #1
 80008e2:	713b      	strb	r3, [r7, #4]
 80008e4:	e019      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyPRESSED  && lastState == keyPRESSED)
 80008e6:	793b      	ldrb	r3, [r7, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <key_pressed+0x58>
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d102      	bne.n	80008f8 <key_pressed+0x58>
		state = stateLOW;
 80008f2:	2303      	movs	r3, #3
 80008f4:	713b      	strb	r3, [r7, #4]
 80008f6:	e010      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyRELEASED && lastState == keyPRESSED)
 80008f8:	793b      	ldrb	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d105      	bne.n	800090a <key_pressed+0x6a>
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <key_pressed+0x6a>
		state = stateRISE;
 8000904:	2302      	movs	r3, #2
 8000906:	713b      	strb	r3, [r7, #4]
 8000908:	e007      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyRELEASED && lastState == keyRELEASED)
 800090a:	793b      	ldrb	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <key_pressed+0x7a>
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <key_pressed+0x7a>
		state = stateHIGH;
 8000916:	2304      	movs	r3, #4
 8000918:	713b      	strb	r3, [r7, #4]
	switch ( state ) {
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d002      	beq.n	8000926 <key_pressed+0x86>
 8000920:	2b02      	cmp	r3, #2
 8000922:	d015      	beq.n	8000950 <key_pressed+0xb0>
		default: break;
 8000924:	e034      	b.n	8000990 <key_pressed+0xf0>
			timeFallRise = millis();
 8000926:	f002 f84f 	bl	80029c8 <millis>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b89      	ldr	r3, [pc, #548]	; (8000b54 <key_pressed+0x2b4>)
 8000930:	801a      	strh	r2, [r3, #0]
			if (speedPressCounter++ == 0) {
 8000932:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <key_pressed+0x2b8>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	b2d1      	uxtb	r1, r2
 800093a:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <key_pressed+0x2b8>)
 800093c:	7011      	strb	r1, [r2, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d123      	bne.n	800098a <key_pressed+0xea>
				timeFall2Rise = millis();
 8000942:	f002 f841 	bl	80029c8 <millis>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b84      	ldr	r3, [pc, #528]	; (8000b5c <key_pressed+0x2bc>)
 800094c:	801a      	strh	r2, [r3, #0]
			break;
 800094e:	e01c      	b.n	800098a <key_pressed+0xea>
			timeFallRise = millis() - timeFallRise;
 8000950:	f002 f83a 	bl	80029c8 <millis>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b7e      	ldr	r3, [pc, #504]	; (8000b54 <key_pressed+0x2b4>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b7c      	ldr	r3, [pc, #496]	; (8000b54 <key_pressed+0x2b4>)
 8000962:	801a      	strh	r2, [r3, #0]
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <key_pressed+0x2b8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	b2d1      	uxtb	r1, r2
 800096c:	4a7a      	ldr	r2, [pc, #488]	; (8000b58 <key_pressed+0x2b8>)
 800096e:	7011      	strb	r1, [r2, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d10c      	bne.n	800098e <key_pressed+0xee>
				timeFall2Rise = millis() - timeFall2Rise;
 8000974:	f002 f828 	bl	80029c8 <millis>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b77      	ldr	r3, [pc, #476]	; (8000b5c <key_pressed+0x2bc>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b75      	ldr	r3, [pc, #468]	; (8000b5c <key_pressed+0x2bc>)
 8000986:	801a      	strh	r2, [r3, #0]
			break;
 8000988:	e001      	b.n	800098e <key_pressed+0xee>
			break;
 800098a:	bf00      	nop
 800098c:	e000      	b.n	8000990 <key_pressed+0xf0>
			break;
 800098e:	bf00      	nop
	return state;
 8000990:	793b      	ldrb	r3, [r7, #4]
	uint8_t slope = analyze_slope( pressKeyCheck, lastState );
 8000992:	717b      	strb	r3, [r7, #5]
	switch ( slope ) {
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	3b01      	subs	r3, #1
 8000998:	2b03      	cmp	r3, #3
 800099a:	f200 80c7 	bhi.w	8000b2c <key_pressed+0x28c>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <key_pressed+0x104>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	08000a7d 	.word	0x08000a7d
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	08000a97 	.word	0x08000a97
	if ( keyAction == action_idle ) {
 80009b4:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <key_pressed+0x2c0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d105      	bne.n	80009c8 <key_pressed+0x128>
		keyAction 	  = action_debounce;
 80009bc:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <key_pressed+0x2c0>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
		debounceTimer = DEBOUNCE_TIME;
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <key_pressed+0x2c4>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	801a      	strh	r2, [r3, #0]
}
 80009c8:	bf00      	nop
		case stateFALL:
			analyze_state_fall();
			break;
 80009ca:	e0b0      	b.n	8000b2e <key_pressed+0x28e>
	KEY_EVENT_t keyEvent = NO_EVENT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	70bb      	strb	r3, [r7, #2]
	switch ( keyAction ) {
 80009d0:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <key_pressed+0x2c0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d02f      	beq.n	8000a38 <key_pressed+0x198>
 80009d8:	2b04      	cmp	r3, #4
 80009da:	dc4b      	bgt.n	8000a74 <key_pressed+0x1d4>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d002      	beq.n	80009e6 <key_pressed+0x146>
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d013      	beq.n	8000a0c <key_pressed+0x16c>
		default:break;
 80009e4:	e046      	b.n	8000a74 <key_pressed+0x1d4>
			if ( debounceTimer == 0 ) {
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <key_pressed+0x2c4>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d106      	bne.n	80009fe <key_pressed+0x15e>
				keyAction 	  = action_check;
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <key_pressed+0x2c0>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]
				debounceTimer = SHORT_MAX_TIME;
 80009f6:	4b5b      	ldr	r3, [pc, #364]	; (8000b64 <key_pressed+0x2c4>)
 80009f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009fc:	801a      	strh	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 1 );
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f001 f8ba 	bl	8001b7e <gpio_pin_IMPULSES>
			break;
 8000a0a:	e034      	b.n	8000a76 <key_pressed+0x1d6>
			if ( debounceTimer == 0 ) {
 8000a0c:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <key_pressed+0x2c4>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d109      	bne.n	8000a2a <key_pressed+0x18a>
				keyAction 	  = action_repeat;
 8000a16:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <key_pressed+0x2c0>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	701a      	strb	r2, [r3, #0]
				debounceTimer = MEDIUM_MAX_TIME;
 8000a1c:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <key_pressed+0x2c4>)
 8000a1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a22:	801a      	strh	r2, [r3, #0]
				repeatCounter = 0;
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <key_pressed+0x2c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 2 );
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f001 f8a4 	bl	8001b7e <gpio_pin_IMPULSES>
			break;
 8000a36:	e01e      	b.n	8000a76 <key_pressed+0x1d6>
			if ( debounceTimer == 0 ) {
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <key_pressed+0x2c4>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <key_pressed+0x1c6>
				debounceTimer = REPEAT_TIME;
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <key_pressed+0x2c4>)
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	801a      	strh	r2, [r3, #0]
				repeatCounter++;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <key_pressed+0x2c8>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <key_pressed+0x2c8>)
 8000a52:	701a      	strb	r2, [r3, #0]
				if ( repeatCounter == VLONG_TIME_CNT ) {
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <key_pressed+0x2c8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b14      	cmp	r3, #20
 8000a5a:	d102      	bne.n	8000a62 <key_pressed+0x1c2>
					keyEvent = VLONG_PRESS;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	70bb      	strb	r3, [r7, #2]
 8000a60:	e001      	b.n	8000a66 <key_pressed+0x1c6>
					keyEvent = KEY_REPEAT;
 8000a62:	2306      	movs	r3, #6
 8000a64:	70bb      	strb	r3, [r7, #2]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 3 );
 8000a66:	2203      	movs	r2, #3
 8000a68:	2108      	movs	r1, #8
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 f886 	bl	8001b7e <gpio_pin_IMPULSES>
			break;
 8000a72:	e000      	b.n	8000a76 <key_pressed+0x1d6>
		default:break;
 8000a74:	bf00      	nop
	return keyEvent;
 8000a76:	78bb      	ldrb	r3, [r7, #2]
		case stateLOW:
			keyEvent = analyze_state_low();
 8000a78:	71fb      	strb	r3, [r7, #7]
			break;
 8000a7a:	e058      	b.n	8000b2e <key_pressed+0x28e>
	if ( keyAction == action_check || keyAction == action_repeat ) {
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <key_pressed+0x2c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d003      	beq.n	8000a8c <key_pressed+0x1ec>
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <key_pressed+0x2c0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d102      	bne.n	8000a92 <key_pressed+0x1f2>
		debounceTimer = DEBOUNCE_TIME;
 8000a8c:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <key_pressed+0x2c4>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	801a      	strh	r2, [r3, #0]
}
 8000a92:	bf00      	nop
		case stateRISE:
			analyze_state_rise();
			break;
 8000a94:	e04b      	b.n	8000b2e <key_pressed+0x28e>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	707b      	strb	r3, [r7, #1]
	switch ( keyAction ) {
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <key_pressed+0x2c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d002      	beq.n	8000aa8 <key_pressed+0x208>
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d027      	beq.n	8000af6 <key_pressed+0x256>
		default: break;
 8000aa6:	e03e      	b.n	8000b26 <key_pressed+0x286>
			if ( debounceTimer == 0 ) {
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <key_pressed+0x2c4>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11a      	bne.n	8000ae8 <key_pressed+0x248>
				if ( timeFallRise > SHORT_MIN_TIME ) {
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <key_pressed+0x2b4>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d905      	bls.n	8000ac6 <key_pressed+0x226>
					speedPressCounter = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <key_pressed+0x2b8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
					keyEvent = SHORT_PRESS;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	707b      	strb	r3, [r7, #1]
 8000ac4:	e00d      	b.n	8000ae2 <key_pressed+0x242>
					if ( speedPressCounter == EDGE_COUNTER ) {
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <key_pressed+0x2b8>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d109      	bne.n	8000ae2 <key_pressed+0x242>
						if ( timeFall2Rise < MULTI_PRESS_TIME ) {
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <key_pressed+0x2bc>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad6:	d201      	bcs.n	8000adc <key_pressed+0x23c>
							keyEvent = DOUBLE_PRESS;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	707b      	strb	r3, [r7, #1]
						speedPressCounter = 0;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <key_pressed+0x2b8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
				keyAction = action_idle;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <key_pressed+0x2c0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 4 );
 8000ae8:	2204      	movs	r2, #4
 8000aea:	2108      	movs	r1, #8
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f001 f845 	bl	8001b7e <gpio_pin_IMPULSES>
			break;
 8000af4:	e017      	b.n	8000b26 <key_pressed+0x286>
			if ( debounceTimer == 0 ) {
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <key_pressed+0x2c4>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10b      	bne.n	8000b18 <key_pressed+0x278>
				if ( repeatCounter == 0 ) {
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <key_pressed+0x2c8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <key_pressed+0x26c>
					keyEvent = MEDIUM_PRESS;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	707b      	strb	r3, [r7, #1]
				speedPressCounter = 0;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <key_pressed+0x2b8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
				keyAction = action_idle;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <key_pressed+0x2c0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 5 );
 8000b18:	2205      	movs	r2, #5
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 f82d 	bl	8001b7e <gpio_pin_IMPULSES>
			break;
 8000b24:	bf00      	nop
	return keyEvent;
 8000b26:	787b      	ldrb	r3, [r7, #1]
		case stateHIGH:
			keyEvent = analyze_state_high();
 8000b28:	71fb      	strb	r3, [r7, #7]
			break;
 8000b2a:	e000      	b.n	8000b2e <key_pressed+0x28e>
		default:
			break;
 8000b2c:	bf00      	nop
	}
	lastState = pressKeyCheck;
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <key_pressed+0x2b0>)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	7013      	strb	r3, [r2, #0]
	if (keyboard.keyCoded)return keyEvent;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <key_pressed+0x2ac>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <key_pressed+0x2a0>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	e000      	b.n	8000b42 <key_pressed+0x2a2>
	else  		 		  return NO_EVENT;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000010c 	.word	0x2000010c
 8000b50:	20000116 	.word	0x20000116
 8000b54:	20000112 	.word	0x20000112
 8000b58:	20000110 	.word	0x20000110
 8000b5c:	20000114 	.word	0x20000114
 8000b60:	2000010e 	.word	0x2000010e
 8000b64:	200005b8 	.word	0x200005b8
 8000b68:	2000010f 	.word	0x2000010f

08000b6c <keyboard_ptr>:
/*************************************************************************/

/************************ Public functions *******************************/
KEYB_t * keyboard_ptr(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return &keyboard;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <keyboard_ptr+0x10>)
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	2000010c 	.word	0x2000010c

08000b80 <sw_keyboard_init>:

// ---------------------- Main init function -----------------------------
void sw_keyboard_init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
#ifdef BTN1_PORT
	gpio_pin_cfg( BTN1_PORT, BTN1_PIN, gpio_mode_in_PU );
 8000b84:	2210      	movs	r2, #16
 8000b86:	2110      	movs	r1, #16
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <sw_keyboard_init+0x1c>)
 8000b8a:	f000 ff2f 	bl	80019ec <gpio_pin_cfg>
#endif
#ifdef BTN2_PORT
	gpio_pin_cfg( BTN2_PORT, BTN2_PIN, gpio_mode_in_PU );
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2120      	movs	r1, #32
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <sw_keyboard_init+0x1c>)
 8000b94:	f000 ff2a 	bl	80019ec <gpio_pin_cfg>
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <SW_KEYBOARD_EVENT>:
// -----------------------------------------------------------------------

void SW_KEYBOARD_EVENT( void ) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	keyboard.keyEvent = key_pressed();
 8000ba4:	f7ff fe7c 	bl	80008a0 <key_pressed>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bae:	701a      	strb	r2, [r3, #0]

	if ( keyboard.keyEvent != NO_EVENT ) {
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d019      	beq.n	8000bec <SW_KEYBOARD_EVENT+0x4c>
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <SW_KEYBOARD_EVENT+0x54>)
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00f      	beq.n	8000bec <SW_KEYBOARD_EVENT+0x4c>
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <SW_KEYBOARD_EVENT+0x54>)
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4798      	blx	r3
	keyboard.keyEvent = NO_EVENT;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	keyboard.keyCoded = 0;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	705a      	strb	r2, [r3, #1]
}
 8000bea:	bf00      	nop
			machine_state_reset();
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	08003638 	.word	0x08003638

08000bf8 <ADXL345__init>:

void ADXL345__start_measure(void) {
	sw_i2c_write_reg8( ADXL345_I2C_ADDR, ADXL345_REG_POWER_CTL, ( 1<<3) ); // Third bit
}

I2CSTATUS ADXL345__init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	I2CSTATUS status = sw_i2c_slave_test( ADXL345_I2C_ADDR, 3, 100 );
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	2103      	movs	r1, #3
 8000c02:	203a      	movs	r0, #58	; 0x3a
 8000c04:	f000 fd4e 	bl	80016a4 <sw_i2c_slave_test>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
	return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <sw_i2c_write_buff>:
		}
	}
	return I2C_Ok;
}

static I2CSTATUS sw_i2c_write_buff( uint16_t nBytes, const uint8_t * pBuff ) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	81fb      	strh	r3, [r7, #14]
 8000c28:	e043      	b.n	8000cb2 <sw_i2c_write_buff+0x9a>
	whileTimer = 2;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <sw_i2c_write_buff+0xb0>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8000c30:	e013      	b.n	8000c5a <sw_i2c_write_buff+0x42>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <sw_i2c_write_buff+0xb0>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10e      	bne.n	8000c5a <sw_i2c_write_buff+0x42>
}
static INLINE bool sw_is_TXIS_flag_ready(void) {
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
}
static INLINE bool sw_is_NACK_flag_ready(void) {
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <sw_i2c_write_buff+0xb4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <sw_i2c_write_buff+0x38>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <sw_i2c_write_buff+0x3a>
 8000c50:	2300      	movs	r3, #0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <sw_i2c_write_buff+0x42>
			return I2C_Nack;
 8000c56:	2302      	movs	r3, #2
 8000c58:	e010      	b.n	8000c7c <sw_i2c_write_buff+0x64>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <sw_i2c_write_buff+0xb4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <sw_i2c_write_buff+0x56>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <sw_i2c_write_buff+0x58>
 8000c6e:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1db      	bne.n	8000c32 <sw_i2c_write_buff+0x1a>
	return I2C_Ok;
 8000c7a:	2300      	movs	r3, #0
		if ( sw_i2c_isTXIS_error() != I2C_Ok ) return I2C_Error;
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <sw_i2c_write_buff+0x6c>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e01b      	b.n	8000cbc <sw_i2c_write_buff+0xa4>
		sw_i2c_write( *pBuff++ );
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	737b      	strb	r3, [r7, #13]
static INLINE void 		sw_i2c_stop(void)  {
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
}
static INLINE I2CSTATUS sw_i2c_write( uint8_t data ) {
	hI2Cx->I2C->TXDR = data;								// First write byte
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <sw_i2c_write_buff+0xb4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	7b7a      	ldrb	r2, [r7, #13]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8000c98:	bf00      	nop
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <sw_i2c_write_buff+0xb4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f7      	beq.n	8000c9a <sw_i2c_write_buff+0x82>
	return I2C_Ok;
 8000caa:	bf00      	nop
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	89fa      	ldrh	r2, [r7, #14]
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3b7      	bcc.n	8000c2a <sw_i2c_write_buff+0x12>
	}
	return I2C_Ok;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200005bc 	.word	0x200005bc
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <sw_i2c_read_buff>:
static I2CSTATUS sw_i2c_read_buff( uint16_t nBytes, uint8_t * pBuff ) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8000cdc:	2300      	movs	r3, #0
 8000cde:	81fb      	strh	r3, [r7, #14]
 8000ce0:	e027      	b.n	8000d32 <sw_i2c_read_buff+0x62>
		while( sw_is_RXNE_flag_ready() == false ) {}
 8000ce2:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <sw_i2c_read_buff+0x78>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <sw_i2c_read_buff+0x28>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <sw_i2c_read_buff+0x2a>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1ef      	bne.n	8000ce4 <sw_i2c_read_buff+0x14>
		*pBuff++ = sw_i2c_read( DUMMY );
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	603a      	str	r2, [r7, #0]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	737a      	strb	r2, [r7, #13]
}
static INLINE uint8_t	sw_i2c_read( uint8_t dummy ) {
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 8000d0e:	bf00      	nop
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <sw_i2c_read_buff+0x78>)
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	6992      	ldr	r2, [r2, #24]
 8000d18:	f002 0204 	and.w	r2, r2, #4
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d0f7      	beq.n	8000d10 <sw_i2c_read_buff+0x40>
	return ( hI2Cx->I2C->RXDR & 0xFF );
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <sw_i2c_read_buff+0x78>)
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	6812      	ldr	r2, [r2, #0]
 8000d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8000d2c:	89fb      	ldrh	r3, [r7, #14]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	81fb      	strh	r3, [r7, #14]
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d3d3      	bcc.n	8000ce2 <sw_i2c_read_buff+0x12>
	}
	return I2C_Ok;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000004 	.word	0x20000004

08000d4c <sw_i2c_write_byte>:
/********************************************************************************/


/*********************************** Write 1 byte *******************************/
static I2CSTATUS sw_i2c_write_byte( uint8_t byte, bool repeatedStart ) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8000d5c:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4b54      	ldr	r3, [pc, #336]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	bf00      	nop
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <sw_i2c_write_byte+0x184>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	0412      	lsls	r2, r2, #16
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <sw_i2c_write_byte+0x184>)
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6053      	str	r3, [r2, #4]
}
 8000da0:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000db4:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <sw_i2c_write_byte+0x188>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8000dbc:	e013      	b.n	8000de6 <sw_i2c_write_byte+0x9a>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <sw_i2c_write_byte+0x188>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10e      	bne.n	8000de6 <sw_i2c_write_byte+0x9a>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <sw_i2c_write_byte+0x90>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <sw_i2c_write_byte+0x92>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <sw_i2c_write_byte+0x9a>
			return I2C_Nack;
 8000de2:	2302      	movs	r3, #2
 8000de4:	e010      	b.n	8000e08 <sw_i2c_write_byte+0xbc>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <sw_i2c_write_byte+0xae>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <sw_i2c_write_byte+0xb0>
 8000dfa:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8000dfc:	f083 0301 	eor.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1db      	bne.n	8000dbe <sw_i2c_write_byte+0x72>
	return I2C_Ok;
 8000e06:	2300      	movs	r3, #0
	sw_i2c_write_dir();
	sw_i2c_autoend_off();

	sw_i2c_nBytes(1);
	sw_i2c_start();
	if ( sw_i2c_isTXIS_error() != I2C_Ok ) return I2C_Error;
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <sw_i2c_write_byte+0xc4>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e057      	b.n	8000ec0 <sw_i2c_write_byte+0x174>
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	7bba      	ldrb	r2, [r7, #14]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8000e1e:	bf00      	nop
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f7      	beq.n	8000e20 <sw_i2c_write_byte+0xd4>
	whileTimer = 2;
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <sw_i2c_write_byte+0x188>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	801a      	strh	r2, [r3, #0]
	while( sw_is_TC_flag_ready() == false ) {
 8000e36:	e013      	b.n	8000e60 <sw_i2c_write_byte+0x114>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <sw_i2c_write_byte+0x188>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10e      	bne.n	8000e60 <sw_i2c_write_byte+0x114>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <sw_i2c_write_byte+0x10a>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <sw_i2c_write_byte+0x10c>
 8000e56:	2300      	movs	r3, #0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <sw_i2c_write_byte+0x114>
			return I2C_Nack;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e010      	b.n	8000e82 <sw_i2c_write_byte+0x136>
	if( hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <sw_i2c_write_byte+0x128>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <sw_i2c_write_byte+0x12a>
 8000e74:	2300      	movs	r3, #0
	while( sw_is_TC_flag_ready() == false ) {
 8000e76:	f083 0301 	eor.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1db      	bne.n	8000e38 <sw_i2c_write_byte+0xec>
	return I2C_Ok;
 8000e80:	2300      	movs	r3, #0

	sw_i2c_write( byte );
	if ( sw_i2c_isTC_error()   != I2C_Ok ) return I2C_Error;
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <sw_i2c_write_byte+0x13e>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e01a      	b.n	8000ec0 <sw_i2c_write_byte+0x174>

	if ( !repeatedStart ) sw_i2c_stop();
 8000e8a:	79bb      	ldrb	r3, [r7, #6]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d013      	beq.n	8000ebe <sw_i2c_write_byte+0x172>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ea8:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8000eaa:	bf00      	nop
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <sw_i2c_write_byte+0x180>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0320 	and.w	r3, r3, #32
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f7      	beq.n	8000eac <sw_i2c_write_byte+0x160>
}
 8000ebc:	bf00      	nop
	return I2C_Ok;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	200005bc 	.word	0x200005bc

08000ed8 <sw_i2c_write_bulk>:
}
********************************************************************************/

/*********************************** Write bulk *********************************/
I2CSTATUS sw_i2c_write_bulk( uint8_t  devAddr, uint8_t regAddr,
						 	 uint16_t nBytes, const uint8_t * pBuff ) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	71bb      	strb	r3, [r7, #6]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	80bb      	strh	r3, [r7, #4]
	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
 8000eec:	4b9e      	ldr	r3, [pc, #632]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	4b9c      	ldr	r3, [pc, #624]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	61da      	str	r2, [r3, #28]
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8000f06:	4b98      	ldr	r3, [pc, #608]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f12:	f023 0303 	bic.w	r3, r3, #3
 8000f16:	7c79      	ldrb	r1, [r7, #17]
 8000f18:	4a93      	ldr	r2, [pc, #588]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6053      	str	r3, [r2, #4]
}
 8000f22:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8000f24:	4b90      	ldr	r3, [pc, #576]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4b8e      	ldr	r3, [pc, #568]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8000f3a:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4b89      	ldr	r3, [pc, #548]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_autoend_off();
	sw_i2c_write_dir();

	nBytes++;											// nBytes + 1 (regAddr byte)
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	3301      	adds	r3, #1
 8000f54:	80bb      	strh	r3, [r7, #4]
	if ( nBytes < I2C_CR2_NBYTE_MAX + 1 ) {
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	2bff      	cmp	r3, #255	; 0xff
 8000f5a:	d811      	bhi.n	8000f80 <sw_i2c_write_bulk+0xa8>
		sw_i2c_nBytes( nBytes );
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <sw_i2c_write_bulk+0x294>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f6a:	7c3a      	ldrb	r2, [r7, #16]
 8000f6c:	0412      	lsls	r2, r2, #16
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4a7e      	ldr	r2, [pc, #504]	; (800116c <sw_i2c_write_bulk+0x294>)
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6053      	str	r3, [r2, #4]
}
 8000f76:	bf00      	nop
		nBytes--;
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	e016      	b.n	8000fae <sw_i2c_write_bulk+0xd6>
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8000f84:	4b79      	ldr	r3, [pc, #484]	; (800116c <sw_i2c_write_bulk+0x294>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	0412      	lsls	r2, r2, #16
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a76      	ldr	r2, [pc, #472]	; (800116c <sw_i2c_write_bulk+0x294>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6053      	str	r3, [r2, #4]
}
 8000f98:	bf00      	nop
	} else {
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8000f9a:	4b73      	ldr	r3, [pc, #460]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4b71      	ldr	r3, [pc, #452]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000fac:	605a      	str	r2, [r3, #4]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8000fae:	4b6e      	ldr	r3, [pc, #440]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fc0:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 8000fc2:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <sw_i2c_write_bulk+0x298>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8000fc8:	e013      	b.n	8000ff2 <sw_i2c_write_bulk+0x11a>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8000fca:	4b69      	ldr	r3, [pc, #420]	; (8001170 <sw_i2c_write_bulk+0x298>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10e      	bne.n	8000ff2 <sw_i2c_write_bulk+0x11a>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8000fd4:	4b64      	ldr	r3, [pc, #400]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <sw_i2c_write_bulk+0x110>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <sw_i2c_write_bulk+0x112>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <sw_i2c_write_bulk+0x11a>
			return I2C_Nack;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e010      	b.n	8001014 <sw_i2c_write_bulk+0x13c>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <sw_i2c_write_bulk+0x12e>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <sw_i2c_write_bulk+0x130>
 8001006:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1db      	bne.n	8000fca <sw_i2c_write_bulk+0xf2>
	return I2C_Ok;
 8001012:	2300      	movs	r3, #0
	}

	sw_i2c_start();
	if ( sw_i2c_isTXIS_error() != I2C_Ok) return I2C_Error;
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <sw_i2c_write_bulk+0x144>
 8001018:	2301      	movs	r3, #1
 800101a:	e0d3      	b.n	80011c4 <sw_i2c_write_bulk+0x2ec>
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8001020:	4b51      	ldr	r3, [pc, #324]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 800102a:	bf00      	nop
 800102c:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <sw_i2c_write_bulk+0x290>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f7      	beq.n	800102c <sw_i2c_write_bulk+0x154>
	whileTimer = 2;
 800103c:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <sw_i2c_write_bulk+0x298>)
 800103e:	2202      	movs	r2, #2
 8001040:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8001042:	e013      	b.n	800106c <sw_i2c_write_bulk+0x194>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <sw_i2c_write_bulk+0x298>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10e      	bne.n	800106c <sw_i2c_write_bulk+0x194>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <sw_i2c_write_bulk+0x18a>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <sw_i2c_write_bulk+0x18c>
 8001062:	2300      	movs	r3, #0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <sw_i2c_write_bulk+0x194>
			return I2C_Nack;
 8001068:	2302      	movs	r3, #2
 800106a:	e010      	b.n	800108e <sw_i2c_write_bulk+0x1b6>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800106c:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <sw_i2c_write_bulk+0x290>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <sw_i2c_write_bulk+0x1a8>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <sw_i2c_write_bulk+0x1aa>
 8001080:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8001082:	f083 0301 	eor.w	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1db      	bne.n	8001044 <sw_i2c_write_bulk+0x16c>
	return I2C_Ok;
 800108c:	2300      	movs	r3, #0

	sw_i2c_write( regAddr ); 							// First byte, address
	if ( sw_i2c_isTXIS_error() != I2C_Ok) return I2C_Error;
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <sw_i2c_write_bulk+0x1be>
 8001092:	2301      	movs	r3, #1
 8001094:	e096      	b.n	80011c4 <sw_i2c_write_bulk+0x2ec>

	uint16_t nBlock = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;			//
 800109a:	23fe      	movs	r3, #254	; 0xfe
 800109c:	827b      	strh	r3, [r7, #18]
	uint8_t shift	= 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	757b      	strb	r3, [r7, #21]
	while ( nBytes ) {
 80010a2:	e077      	b.n	8001194 <sw_i2c_write_bulk+0x2bc>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	2bfe      	cmp	r3, #254	; 0xfe
 80010a8:	d964      	bls.n	8001174 <sw_i2c_write_bulk+0x29c>
			if ( nBlock == 0) {
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10a      	bne.n	80010c6 <sw_i2c_write_bulk+0x1ee>
				n = I2C_CR2_NBYTE_MAX - 1;
 80010b0:	23fe      	movs	r3, #254	; 0xfe
 80010b2:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff );
 80010b4:	8a7b      	ldrh	r3, [r7, #18]
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fdad 	bl	8000c18 <sw_i2c_write_buff>
				nBlock++;
 80010be:	8afb      	ldrh	r3, [r7, #22]
 80010c0:	3301      	adds	r3, #1
 80010c2:	82fb      	strh	r3, [r7, #22]
 80010c4:	e010      	b.n	80010e8 <sw_i2c_write_bulk+0x210>
			} else {
				n = I2C_CR2_NBYTE_MAX;
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX - 1 );
 80010ca:	8afb      	ldrh	r3, [r7, #22]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	82fa      	strh	r2, [r7, #22]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	3b01      	subs	r3, #1
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	441a      	add	r2, r3
 80010de:	8a7b      	ldrh	r3, [r7, #18]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fd98 	bl	8000c18 <sw_i2c_write_buff>
			}
			while( sw_is_TCR_flag_ready() == false ) {}
 80010e8:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <sw_i2c_write_bulk+0x290>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <sw_i2c_write_bulk+0x226>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <sw_i2c_write_bulk+0x228>
 80010fe:	2300      	movs	r3, #0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1ef      	bne.n	80010ea <sw_i2c_write_bulk+0x212>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	3bff      	subs	r3, #255	; 0xff
 800110e:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8001110:	88bb      	ldrh	r3, [r7, #4]
 8001112:	2bfe      	cmp	r3, #254	; 0xfe
 8001114:	d81a      	bhi.n	800114c <sw_i2c_write_bulk+0x274>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <sw_i2c_write_bulk+0x290>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001128:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <sw_i2c_write_bulk+0x294>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001138:	7b7a      	ldrb	r2, [r7, #13]
 800113a:	0412      	lsls	r2, r2, #16
 800113c:	4611      	mov	r1, r2
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <sw_i2c_write_bulk+0x294>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6053      	str	r3, [r2, #4]
}
 8001144:	bf00      	nop
				shift = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	757b      	strb	r3, [r7, #21]
 800114a:	e023      	b.n	8001194 <sw_i2c_write_bulk+0x2bc>
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	733b      	strb	r3, [r7, #12]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <sw_i2c_write_bulk+0x294>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001158:	7b3a      	ldrb	r2, [r7, #12]
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	4611      	mov	r1, r2
 800115e:	4a03      	ldr	r2, [pc, #12]	; (800116c <sw_i2c_write_bulk+0x294>)
 8001160:	430b      	orrs	r3, r1
 8001162:	6053      	str	r3, [r2, #4]
 8001164:	e016      	b.n	8001194 <sw_i2c_write_bulk+0x2bc>
 8001166:	bf00      	nop
 8001168:	20000004 	.word	0x20000004
 800116c:	40005400 	.word	0x40005400
 8001170:	200005bc 	.word	0x200005bc
			} else {
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
			}
		} else {
			sw_i2c_write_buff( nBytes , (uint8_t *)pBuff + nBlock*I2C_CR2_NBYTE_MAX - shift );
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	4613      	mov	r3, r2
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	1a9b      	subs	r3, r3, r2
 800117c:	461a      	mov	r2, r3
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	441a      	add	r2, r3
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd44 	bl	8000c18 <sw_i2c_write_buff>
			nBytes = 0;									// End of while() loop
 8001190:	2300      	movs	r3, #0
 8001192:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 8001194:	88bb      	ldrh	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d184      	bne.n	80010a4 <sw_i2c_write_bulk+0x1cc>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <sw_i2c_write_bulk+0x2f4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <sw_i2c_write_bulk+0x2f4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ac:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80011ae:	bf00      	nop
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <sw_i2c_write_bulk+0x2f4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f7      	beq.n	80011b0 <sw_i2c_write_bulk+0x2d8>
}
 80011c0:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000004 	.word	0x20000004

080011d0 <sw_i2c_read_bulk>:
/********************************************************************************/

/*********************************** Read bulk **********************************/
I2CSTATUS sw_i2c_read_bulk ( uint8_t  devAddr, uint8_t  regAddr,
							 uint16_t nBytes,  uint8_t * pBuff ) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	460b      	mov	r3, r1
 80011de:	71bb      	strb	r3, [r7, #6]
 80011e0:	4613      	mov	r3, r2
 80011e2:	80bb      	strh	r3, [r7, #4]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	74fb      	strb	r3, [r7, #19]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 80011e8:	4b6e      	ldr	r3, [pc, #440]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011f4:	f023 0303 	bic.w	r3, r3, #3
 80011f8:	7cf9      	ldrb	r1, [r7, #19]
 80011fa:	4a6a      	ldr	r2, [pc, #424]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	6812      	ldr	r2, [r2, #0]
 8001200:	430b      	orrs	r3, r1
 8001202:	6053      	str	r3, [r2, #4]
}
 8001204:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_byte( regAddr, I2C_REPEATED_START );
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd9e 	bl	8000d4c <sw_i2c_write_byte>
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |=  I2C_CR2_RD_WRN; }
 8001210:	4b64      	ldr	r3, [pc, #400]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	bf00      	nop

	sw_i2c_read_dir();

	if ( nBytes <= I2C_CR2_NBYTE_MAX ) {
 8001226:	88bb      	ldrh	r3, [r7, #4]
 8001228:	2bff      	cmp	r3, #255	; 0xff
 800122a:	d817      	bhi.n	800125c <sw_i2c_read_bulk+0x8c>
		CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800122c:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800123e:	605a      	str	r2, [r3, #4]
		sw_i2c_nBytes( nBytes );
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	74bb      	strb	r3, [r7, #18]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800124e:	7cba      	ldrb	r2, [r7, #18]
 8001250:	0412      	lsls	r2, r2, #16
 8001252:	4611      	mov	r1, r2
 8001254:	4a54      	ldr	r2, [pc, #336]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6053      	str	r3, [r2, #4]
}
 800125a:	e016      	b.n	800128a <sw_i2c_read_bulk+0xba>
	} else {
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	23ff      	movs	r3, #255	; 0xff
 8001272:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001274:	4b4c      	ldr	r3, [pc, #304]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800127c:	7c7a      	ldrb	r2, [r7, #17]
 800127e:	0412      	lsls	r2, r2, #16
 8001280:	4611      	mov	r1, r2
 8001282:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 8001284:	430b      	orrs	r3, r1
 8001286:	6053      	str	r3, [r2, #4]
}
 8001288:	bf00      	nop
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
	}

	uint16_t nBlock = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;
 800128e:	23fe      	movs	r3, #254	; 0xfe
 8001290:	82bb      	strh	r3, [r7, #20]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012a4:	605a      	str	r2, [r3, #4]
	sw_i2c_start();
	while ( nBytes ) {
 80012a6:	e061      	b.n	800136c <sw_i2c_read_bulk+0x19c>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	2bfe      	cmp	r3, #254	; 0xfe
 80012ac:	d950      	bls.n	8001350 <sw_i2c_read_bulk+0x180>
			if ( nBlock != 0) n = I2C_CR2_NBYTE_MAX;
 80012ae:	8afb      	ldrh	r3, [r7, #22]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <sw_i2c_read_bulk+0xe8>
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	82bb      	strh	r3, [r7, #20]

			sw_i2c_read_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX  );
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	82fa      	strh	r2, [r7, #22]
 80012be:	461a      	mov	r2, r3
 80012c0:	4613      	mov	r3, r2
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	461a      	mov	r2, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	441a      	add	r2, r3
 80012cc:	8abb      	ldrh	r3, [r7, #20]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcfd 	bl	8000cd0 <sw_i2c_read_buff>
			while( sw_is_TCR_flag_ready() == false ) {}
 80012d6:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <sw_i2c_read_bulk+0x11c>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <sw_i2c_read_bulk+0x11e>
 80012ec:	2300      	movs	r3, #0
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ef      	bne.n	80012d8 <sw_i2c_read_bulk+0x108>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	3bff      	subs	r3, #255	; 0xff
 80012fc:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	2bfe      	cmp	r3, #254	; 0xfe
 8001302:	d818      	bhi.n	8001336 <sw_i2c_read_bulk+0x166>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001316:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );						// Last nBytes < 255
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001326:	7c3a      	ldrb	r2, [r7, #16]
 8001328:	0412      	lsls	r2, r2, #16
 800132a:	4611      	mov	r1, r2
 800132c:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 800132e:	430b      	orrs	r3, r1
 8001330:	6053      	str	r3, [r2, #4]
}
 8001332:	bf00      	nop
 8001334:	e01a      	b.n	800136c <sw_i2c_read_bulk+0x19c>
 8001336:	23ff      	movs	r3, #255	; 0xff
 8001338:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	0412      	lsls	r2, r2, #16
 8001346:	4611      	mov	r1, r2
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <sw_i2c_read_bulk+0x1d8>)
 800134a:	430b      	orrs	r3, r1
 800134c:	6053      	str	r3, [r2, #4]
 800134e:	e00d      	b.n	800136c <sw_i2c_read_bulk+0x19c>
			}
			else
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		} else {
			sw_i2c_read_buff( nBytes, (uint8_t *)pBuff +  nBlock*I2C_CR2_NBYTE_MAX );
 8001350:	8afa      	ldrh	r2, [r7, #22]
 8001352:	4613      	mov	r3, r2
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	461a      	mov	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	441a      	add	r2, r3
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcb4 	bl	8000cd0 <sw_i2c_read_buff>
			nBytes = 0;											// End of while() loop
 8001368:	2300      	movs	r3, #0
 800136a:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d19a      	bne.n	80012a8 <sw_i2c_read_bulk+0xd8>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001384:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001386:	bf00      	nop
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <sw_i2c_read_bulk+0x1d4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f7      	beq.n	8001388 <sw_i2c_read_bulk+0x1b8>
}
 8001398:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000004 	.word	0x20000004
 80013a8:	40005400 	.word	0x40005400

080013ac <sw_i2c_write_reg8>:
/********************************************************************************/

/**************************** Registers functions *******************************/
I2CSTATUS sw_i2c_write_reg8( uint8_t devAddr, uint8_t reg, uint8_t data ) {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	460b      	mov	r3, r1
 80013b8:	71bb      	strb	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	717b      	strb	r3, [r7, #5]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 80013c2:	4b7f      	ldr	r3, [pc, #508]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	7bb9      	ldrb	r1, [r7, #14]
 80013d4:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	430b      	orrs	r3, r1
 80013dc:	6053      	str	r3, [r2, #4]
}
 80013de:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4b70      	ldr	r3, [pc, #448]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	bf00      	nop
 800140c:	2302      	movs	r3, #2
 800140e:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001410:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <sw_i2c_write_reg8+0x218>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	0412      	lsls	r2, r2, #16
 800141c:	4611      	mov	r1, r2
 800141e:	4a69      	ldr	r2, [pc, #420]	; (80015c4 <sw_i2c_write_reg8+0x218>)
 8001420:	430b      	orrs	r3, r1
 8001422:	6053      	str	r3, [r2, #4]
}
 8001424:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001426:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001438:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 800143c:	2202      	movs	r2, #2
 800143e:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8001440:	e013      	b.n	800146a <sw_i2c_write_reg8+0xbe>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10e      	bne.n	800146a <sw_i2c_write_reg8+0xbe>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800144c:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <sw_i2c_write_reg8+0xb4>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <sw_i2c_write_reg8+0xb6>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <sw_i2c_write_reg8+0xbe>
			return I2C_Nack;
 8001466:	2302      	movs	r3, #2
 8001468:	e010      	b.n	800148c <sw_i2c_write_reg8+0xe0>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <sw_i2c_write_reg8+0xd2>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <sw_i2c_write_reg8+0xd4>
 800147e:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1db      	bne.n	8001442 <sw_i2c_write_reg8+0x96>
	return I2C_Ok;
 800148a:	2300      	movs	r3, #0
	sw_i2c_write_dir();
	sw_i2c_autoend_off();

	sw_i2c_nBytes(2);
	sw_i2c_start();
	if ( sw_i2c_isTXIS_error()	!= I2C_Ok ) return I2C_Error;
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <sw_i2c_write_reg8+0xe8>
 8001490:	2301      	movs	r3, #1
 8001492:	e08e      	b.n	80015b2 <sw_i2c_write_reg8+0x206>
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	737b      	strb	r3, [r7, #13]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	7b7a      	ldrb	r2, [r7, #13]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80014a2:	bf00      	nop
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f7      	beq.n	80014a4 <sw_i2c_write_reg8+0xf8>
	whileTimer = 2;
 80014b4:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 80014ba:	e013      	b.n	80014e4 <sw_i2c_write_reg8+0x138>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10e      	bne.n	80014e4 <sw_i2c_write_reg8+0x138>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <sw_i2c_write_reg8+0x12e>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <sw_i2c_write_reg8+0x130>
 80014da:	2300      	movs	r3, #0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <sw_i2c_write_reg8+0x138>
			return I2C_Nack;
 80014e0:	2302      	movs	r3, #2
 80014e2:	e010      	b.n	8001506 <sw_i2c_write_reg8+0x15a>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <sw_i2c_write_reg8+0x14c>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <sw_i2c_write_reg8+0x14e>
 80014f8:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1db      	bne.n	80014bc <sw_i2c_write_reg8+0x110>
	return I2C_Ok;
 8001504:	2300      	movs	r3, #0

	sw_i2c_write( reg );
	if ( sw_i2c_isTXIS_error()	!= I2C_Ok ) return I2C_Error;
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <sw_i2c_write_reg8+0x162>
 800150a:	2301      	movs	r3, #1
 800150c:	e051      	b.n	80015b2 <sw_i2c_write_reg8+0x206>
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	733b      	strb	r3, [r7, #12]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	7b3a      	ldrb	r2, [r7, #12]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 800151c:	bf00      	nop
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f7      	beq.n	800151e <sw_i2c_write_reg8+0x172>
	whileTimer = 2;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 8001530:	2202      	movs	r2, #2
 8001532:	801a      	strh	r2, [r3, #0]
	while( sw_is_TC_flag_ready() == false ) {
 8001534:	e013      	b.n	800155e <sw_i2c_write_reg8+0x1b2>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <sw_i2c_write_reg8+0x21c>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10e      	bne.n	800155e <sw_i2c_write_reg8+0x1b2>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <sw_i2c_write_reg8+0x1a8>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <sw_i2c_write_reg8+0x1aa>
 8001554:	2300      	movs	r3, #0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <sw_i2c_write_reg8+0x1b2>
			return I2C_Nack;
 800155a:	2302      	movs	r3, #2
 800155c:	e010      	b.n	8001580 <sw_i2c_write_reg8+0x1d4>
	if( hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <sw_i2c_write_reg8+0x1c6>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <sw_i2c_write_reg8+0x1c8>
 8001572:	2300      	movs	r3, #0
	while( sw_is_TC_flag_ready() == false ) {
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1db      	bne.n	8001536 <sw_i2c_write_reg8+0x18a>
	return I2C_Ok;
 800157e:	2300      	movs	r3, #0

	sw_i2c_write( data );
	if ( sw_i2c_isTC_error()	!= I2C_Ok ) return I2C_Error;
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <sw_i2c_write_reg8+0x1dc>
 8001584:	2301      	movs	r3, #1
 8001586:	e014      	b.n	80015b2 <sw_i2c_write_reg8+0x206>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800159a:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 800159c:	bf00      	nop
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <sw_i2c_write_reg8+0x214>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f7      	beq.n	800159e <sw_i2c_write_reg8+0x1f2>
}
 80015ae:	bf00      	nop
	sw_i2c_stop();

	return I2C_Ok;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000004 	.word	0x20000004
 80015c4:	40005400 	.word	0x40005400
 80015c8:	200005bc 	.word	0x200005bc

080015cc <sw_i2c_simple_init>:
	return I2C_Ok;;
}
/********************************************************************************/

/******************************* Init function *********************************/
void sw_i2c_simple_init(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
#ifdef STM32L4
	RCC->APB1RSTR1 |=  RCC_APB1RSTR1_I2C1RST;
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d4:	4a30      	ldr	r2, [pc, #192]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015da:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_I2C1RST;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015e6:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1ENR1  |= RCC_APB1ENR1_I2C1EN;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <sw_i2c_simple_init+0xcc>)
 80015ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f2:	6593      	str	r3, [r2, #88]	; 0x58
#elif defined STM32F3
	RCC->APB1RSTR |=  RCC_APB1RSTR_I2C1RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
	RCC->APB1ENR  |= RCC_APB1ENR_I2C1EN;
#endif
	SET_BIT	 ( hI2Cx->I2C->CR1, I2C_CR1_SWRST );	// Software reset
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <sw_i2c_simple_init+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <sw_i2c_simple_init+0xd0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001606:	601a      	str	r2, [r3, #0]
//	delay_ms(100);
	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_SWRST );
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <sw_i2c_simple_init+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800161a:	601a      	str	r2, [r3, #0]

//	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
//	while( (hI2Cx->I2C->CR1 & I2C_CR1_PE) );

	gpio_pin_cfg( hI2Cx->scl_port,  hI2Cx->scl_pin,  hI2Cx->alternateFun );
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <sw_i2c_simple_init+0xd0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6898      	ldr	r0, [r3, #8]
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	8a19      	ldrh	r1, [r3, #16]
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <sw_i2c_simple_init+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	461a      	mov	r2, r3
 8001630:	f000 f9dc 	bl	80019ec <gpio_pin_cfg>
	gpio_pin_cfg( hI2Cx->sda_port,  hI2Cx->sda_pin,  hI2Cx->alternateFun );
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68d8      	ldr	r0, [r3, #12]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <sw_i2c_simple_init+0xd0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	8a59      	ldrh	r1, [r3, #18]
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	461a      	mov	r2, r3
 8001648:	f000 f9d0 	bl	80019ec <gpio_pin_cfg>
	gpio_pin_HI ( hI2Cx->scl_port,  hI2Cx->scl_pin );
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <sw_i2c_simple_init+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	8a1b      	ldrh	r3, [r3, #16]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f000 fa6e 	bl	8001b3c <gpio_pin_HI>
	gpio_pin_HI ( hI2Cx->sda_port,  hI2Cx->sda_pin );
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	8a5b      	ldrh	r3, [r3, #18]
 800166c:	4619      	mov	r1, r3
 800166e:	4610      	mov	r0, r2
 8001670:	f000 fa64 	bl	8001b3c <gpio_pin_HI>

	hI2Cx->I2C->TIMINGR  = (uint32_t)I2C_TIMING_80MHz_100KHz;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <sw_i2c_simple_init+0xd4>)
 800167c:	611a      	str	r2, [r3, #16]
	SET_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <sw_i2c_simple_init+0xd0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	20000004 	.word	0x20000004
 80016a0:	10909cec 	.word	0x10909cec

080016a4 <sw_i2c_slave_test>:

/******************************** Some tests functions ******************************/
I2CSTATUS sw_i2c_slave_test( uint8_t devAddr, uint32_t trials, uint16_t delayMS ) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	4613      	mov	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c4:	f023 0303 	bic.w	r3, r3, #3
 80016c8:	7bf9      	ldrb	r1, [r7, #15]
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	6053      	str	r3, [r2, #4]
}
 80016d4:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	while (trials--) {
 80016d6:	e021      	b.n	800171c <sw_i2c_slave_test+0x78>
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <sw_i2c_slave_test+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016fe:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001700:	bf00      	nop
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <sw_i2c_slave_test+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f7      	beq.n	8001702 <sw_i2c_slave_test+0x5e>
}
 8001712:	bf00      	nop
		sw_i2c_start();
		sw_i2c_stop();
		delay_ms( delayMS );
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f001 f962 	bl	80029e0 <delay_ms>
	while (trials--) {
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	603a      	str	r2, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1d8      	bne.n	80016d8 <sw_i2c_slave_test+0x34>
	}
	if ( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) {
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <sw_i2c_slave_test+0xa0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <sw_i2c_slave_test+0x96>
		return I2C_Nack;
 8001736:	2302      	movs	r3, #2
 8001738:	e000      	b.n	800173c <sw_i2c_slave_test+0x98>
	}
	return I2C_Ok;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_I2C_Mem_Read>:
#define I2C_TIMEOUT 0

float Acc_Scale;
float Gyr_Scale;

static I2CSTATUS HAL_I2C_Mem_Read ( uint8_t devAddress, uint8_t regAddress, uint8_t regSize, uint8_t * buff, uint8_t len, uint8_t timeout ) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	460b      	mov	r3, r1
 8001756:	71bb      	strb	r3, [r7, #6]
 8001758:	4613      	mov	r3, r2
 800175a:	717b      	strb	r3, [r7, #5]
	I2CSTATUS status;
	status = sw_i2c_read_bulk ( devAddress, regAddress, len, buff );
 800175c:	7e3b      	ldrb	r3, [r7, #24]
 800175e:	b29a      	uxth	r2, r3
 8001760:	79b9      	ldrb	r1, [r7, #6]
 8001762:	79f8      	ldrb	r0, [r7, #7]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f7ff fd33 	bl	80011d0 <sw_i2c_read_bulk>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]
	delay_ms(2);
 800176e:	2002      	movs	r0, #2
 8001770:	f001 f936 	bl	80029e0 <delay_ms>
	return status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <MPU6050_GetIntStatusRegister>:
	tmp &= ~(1 << MPU6050_INTERRUPT_DATA_RDY_BIT);
	tmp |= ((Enable & 0x1) << MPU6050_INTERRUPT_DATA_RDY_BIT);
	HAL_I2C_Mem_Write( MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT );
}

uint8_t MPU6050_GetIntStatusRegister(void) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af02      	add	r7, sp, #8
	uint8_t tmp;
	HAL_I2C_Mem_Read( MPU6050_ADDRESS, MPU6050_RA_INT_STATUS, 1, &tmp, 1, I2C_TIMEOUT );
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	2200      	movs	r2, #0
 8001788:	9201      	str	r2, [sp, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	9200      	str	r2, [sp, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	213a      	movs	r1, #58	; 0x3a
 8001792:	20d0      	movs	r0, #208	; 0xd0
 8001794:	f7ff ffd8 	bl	8001748 <HAL_I2C_Mem_Read>
	return tmp;
 8001798:	79fb      	ldrb	r3, [r7, #7]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <MPU6050_GetMotionStatusRegister>:
	tmp &= ~(0x07);
	tmp |= Dhpf & 0x7;
	HAL_I2C_Mem_Write( MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT );
}

uint8_t MPU6050_GetMotionStatusRegister(void) {
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af02      	add	r7, sp, #8
	uint8_t tmp;
	HAL_I2C_Mem_Read( MPU6050_ADDRESS, MPU6050_RA_MOT_DETECT_STATUS, 1, &tmp, 1, I2C_TIMEOUT );
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	2200      	movs	r2, #0
 80017ac:	9201      	str	r2, [sp, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	2161      	movs	r1, #97	; 0x61
 80017b6:	20d0      	movs	r0, #208	; 0xd0
 80017b8:	f7ff ffc6 	bl	8001748 <HAL_I2C_Mem_Read>
	return tmp;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <EXTI3_IRQHandler>:
	EXTI->IMR1 			|= EXTI_IMR1_IM3;			// Interrupt Mask on line 3
	NVIC_EnableIRQ( EXTI3_IRQn );
#endif
}

void EXTI3_IRQHandler(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF3) {		// Pending bit for line 3
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <EXTI3_IRQHandler+0x48>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d017      	beq.n	800180a <EXTI3_IRQHandler+0x42>
		EXTI->PR1 = EXTI_PR1_PIF3;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <EXTI3_IRQHandler+0x48>)
 80017dc:	2208      	movs	r2, #8
 80017de:	615a      	str	r2, [r3, #20]
	if( hI2Cx->I2C->ISR & I2C_ISR_BUSY ) return true; else  return false;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <EXTI3_IRQHandler+0x4c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <EXTI3_IRQHandler+0x2c>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <EXTI3_IRQHandler+0x2e>
 80017f4:	2300      	movs	r3, #0

		if ( sw_is_BUSY_flag_ready() == true ) return;
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <EXTI3_IRQHandler+0x40>

		uint8_t interrupts = MPU6050_GetIntStatusRegister();
 80017fa:	f7ff ffc0 	bl	800177e <MPU6050_GetIntStatusRegister>
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
		MPU6050_GetMotionStatusRegister();
 8001802:	f7ff ffce 	bl	80017a2 <MPU6050_GetMotionStatusRegister>
 8001806:	e000      	b.n	800180a <EXTI3_IRQHandler+0x42>
		if ( sw_is_BUSY_flag_ready() == true ) return;
 8001808:	bf00      	nop
//			sprintf((char*) buffer, "Freefall detected\n\r");
//			UART1_SendString((char*) buffer);
		}

	}
}
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010400 	.word	0x40010400
 8001814:	20000008 	.word	0x20000008

08001818 <SystemClock_Config>:
			 );
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	2304      	movs	r3, #4
 8001820:	607b      	str	r3, [r7, #4]
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <SystemClock_Config+0x17c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0207 	bic.w	r2, r3, #7
 800182a:	495a      	ldr	r1, [pc, #360]	; (8001994 <SystemClock_Config+0x17c>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 8001832:	bf00      	nop
 8001834:	4b57      	ldr	r3, [pc, #348]	; (8001994 <SystemClock_Config+0x17c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f9      	beq.n	8001834 <SystemClock_Config+0x1c>
}
 8001840:	bf00      	nop
	MODIFY_REG( PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS_0 );
 8001842:	4b55      	ldr	r3, [pc, #340]	; (8001998 <SystemClock_Config+0x180>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184a:	4a53      	ldr	r2, [pc, #332]	; (8001998 <SystemClock_Config+0x180>)
 800184c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001850:	6013      	str	r3, [r2, #0]
	while ( (PWR->SR2 & PWR_SR2_VOSF) ) {}
 8001852:	bf00      	nop
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <SystemClock_Config+0x180>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <SystemClock_Config+0x3c>
}
 8001860:	bf00      	nop
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	613b      	str	r3, [r7, #16]
	switch ( clock ) {
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186e:	d004      	beq.n	800187a <SystemClock_Config+0x62>
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d006      	beq.n	8001886 <SystemClock_Config+0x6e>
			break;
 8001878:	e00c      	b.n	8001894 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSIRDY;
 800187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187e:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSION;
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <SystemClock_Config+0x184>)
 8001882:	60bb      	str	r3, [r7, #8]
			break;
 8001884:	e006      	b.n	8001894 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSERDY;
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSEBYP | RCC_CR_HSEON;
 800188c:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8001890:	60bb      	str	r3, [r7, #8]
			break;
 8001892:	bf00      	nop
	SET_BIT( RCC->CR, reg ) ;
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <SystemClock_Config+0x188>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4941      	ldr	r1, [pc, #260]	; (80019a0 <SystemClock_Config+0x188>)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 80018a0:	bf00      	nop
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <SystemClock_Config+0x188>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f9      	beq.n	80018a2 <SystemClock_Config+0x8a>
}
 80018ae:	bf00      	nop
	uint16_t pllm = 1;			// 1, 2 - 8
 80018b0:	2301      	movs	r3, #1
 80018b2:	837b      	strh	r3, [r7, #26]
	uint16_t plln = 10;			// 8, 9 - 86
 80018b4:	230a      	movs	r3, #10
 80018b6:	833b      	strh	r3, [r7, #24]
	uint16_t pllr = 2;			// 2, 4, 6, 8,
 80018b8:	2302      	movs	r3, #2
 80018ba:	82fb      	strh	r3, [r7, #22]
	pllr = (uint8_t)pllr/2 - 1;
 80018bc:	8afb      	ldrh	r3, [r7, #22]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	82fb      	strh	r3, [r7, #22]
	MODIFY_REG( RCC->PLLCFGR,
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <SystemClock_Config+0x188>)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <SystemClock_Config+0x18c>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	8b7a      	ldrh	r2, [r7, #26]
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0111      	lsls	r1, r2, #4
 80018d8:	8b3a      	ldrh	r2, [r7, #24]
 80018da:	0212      	lsls	r2, r2, #8
 80018dc:	4311      	orrs	r1, r2
 80018de:	8afa      	ldrh	r2, [r7, #22]
 80018e0:	0652      	lsls	r2, r2, #25
 80018e2:	430a      	orrs	r2, r1
 80018e4:	4611      	mov	r1, r2
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <SystemClock_Config+0x188>)
 80018e8:	430b      	orrs	r3, r1
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
	SET_BIT( RCC->PLLCFGR, source );
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <SystemClock_Config+0x188>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	492a      	ldr	r1, [pc, #168]	; (80019a0 <SystemClock_Config+0x188>)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
}
 80018fe:	bf00      	nop
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <SystemClock_Config+0x188>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <SystemClock_Config+0x188>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC->PLLCFGR, RCC_PLLCFGR_PLLREN );
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <SystemClock_Config+0x188>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <SystemClock_Config+0x188>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001916:	60d3      	str	r3, [r2, #12]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 8001918:	bf00      	nop
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <SystemClock_Config+0x188>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f9      	beq.n	800191a <SystemClock_Config+0x102>
}
 8001926:	bf00      	nop
	MODIFY_REG( RCC->CFGR,
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <SystemClock_Config+0x188>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <SystemClock_Config+0x188>)
 800192e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001932:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001936:	6093      	str	r3, [r2, #8]
}
 8001938:	bf00      	nop
 800193a:	2303      	movs	r3, #3
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
	switch ( pllSource ) {
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	2b03      	cmp	r3, #3
 8001942:	d009      	beq.n	8001958 <SystemClock_Config+0x140>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	2b03      	cmp	r3, #3
 8001948:	d80f      	bhi.n	800196a <SystemClock_Config+0x152>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2b01      	cmp	r3, #1
 800194e:	d006      	beq.n	800195e <SystemClock_Config+0x146>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	2b02      	cmp	r3, #2
 8001954:	d006      	beq.n	8001964 <SystemClock_Config+0x14c>
			break;
 8001956:	e008      	b.n	800196a <SystemClock_Config+0x152>
			sourceCheck = RCC_CFGR_SWS_PLL;
 8001958:	230c      	movs	r3, #12
 800195a:	623b      	str	r3, [r7, #32]
			break;
 800195c:	e006      	b.n	800196c <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSI;
 800195e:	2304      	movs	r3, #4
 8001960:	623b      	str	r3, [r7, #32]
			break;
 8001962:	e003      	b.n	800196c <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSE;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
			break;
 8001968:	e000      	b.n	800196c <SystemClock_Config+0x154>
			break;
 800196a:	bf00      	nop
	SET_BIT( RCC->CFGR, pllSource);
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <SystemClock_Config+0x188>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	490b      	ldr	r1, [pc, #44]	; (80019a0 <SystemClock_Config+0x188>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 8001978:	bf00      	nop
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <SystemClock_Config+0x188>)
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f9      	beq.n	800197a <SystemClock_Config+0x162>
}
 8001986:	bf00      	nop

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 8001988:	f7fe feb2 	bl	80006f0 <SystemCoreClockUpdate>
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40022000 	.word	0x40022000
 8001998:	40007000 	.word	0x40007000
 800199c:	00080100 	.word	0x00080100
 80019a0:	40021000 	.word	0x40021000
 80019a4:	f9ff808f 	.word	0xf9ff808f

080019a8 <register_measure_callback>:
volatile static uint8_t measureDataReadyFlag	= 0;

static T_RESULTS results;				// Kontener na pomiary

static void ( *measure_callback )( T_RESULTS *results );
void register_measure_callback( void (*callback)( T_RESULTS *results) ) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	measure_callback = callback;
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <register_measure_callback+0x1c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000118 	.word	0x20000118

080019c8 <EXTI2_IRQHandler>:

	NVIC_EnableIRQ( EXTI3_IRQn );
	return 1;
}

void EXTI2_IRQHandler(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF2) {				// Pending bit for line 3
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <EXTI2_IRQHandler+0x20>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <EXTI2_IRQHandler+0x16>
		EXTI->PR1 = EXTI_PR1_PIF2;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <EXTI2_IRQHandler+0x20>)
 80019da:	2204      	movs	r2, #4
 80019dc:	615a      	str	r2, [r3, #20]

	}
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40010400 	.word	0x40010400

080019ec <gpio_pin_cfg>:

#include "sw_mcu_conf.h"
#include "sw_gpio.h"

/******************* Funkcja ustawiająca trybyb pracy pinów *********************/
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 80019ec:	b480      	push	{r7}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u)
 80019fc:	883b      	ldrh	r3, [r7, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <gpio_pin_cfg+0x28>
		port->OTYPER |= pin;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e006      	b.n	8001a22 <gpio_pin_cfg+0x36>
	else
		port->OTYPER &= (uint32_t) ~pin;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	43d2      	mvns	r2, r2
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	605a      	str	r2, [r3, #4]
	pin = __builtin_ctz(pin) * 2;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 8001a4c:	883b      	ldrh	r3, [r7, #0]
 8001a4e:	0a5b      	lsrs	r3, r3, #9
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
	port->MODER = reg_val;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 8001a74:	883b      	ldrh	r3, [r7, #0]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
	port->PUPDR = reg_val;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 8001a9c:	883b      	ldrh	r3, [r7, #0]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
	port->OSPEEDR = reg_val;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]

	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3320      	adds	r3, #32
 8001aba:	617b      	str	r3, [r7, #20]
	pin *= 2;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	807b      	strh	r3, [r7, #2]

	if (pin > 28) {
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	2b1c      	cmp	r3, #28
 8001ac6:	d905      	bls.n	8001ad4 <gpio_pin_cfg+0xe8>
		pin -= 32;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	3b20      	subs	r3, #32
 8001acc:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3324      	adds	r3, #36	; 0x24
 8001ad2:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 8001aea:	883b      	ldrh	r3, [r7, #0]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <RCC_gpio_init>:
#endif
}
#endif

#if defined STM32L412KBx_nucleo
void RCC_gpio_init( void ) {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

#ifdef RTC_PORTA_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <RCC_gpio_init+0x28>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <RCC_gpio_init+0x28>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif
#ifdef RTC_PORTB_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <RCC_gpio_init+0x28>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <RCC_gpio_init+0x28>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
#endif
#ifdef RTC_PORTH_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
#endif
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000

08001b3c <gpio_pin_HI>:

#ifdef BSRR_REG
	inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
		port->BRR = pin;
	}
	inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
		port->BSRR = pin;
 8001b48:	887a      	ldrh	r2, [r7, #2]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
	}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <gpio_pin_XOR>:
	inline void gpio_pin_HI(  GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
		port->BSRRL = pin;
	}
#endif

inline void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
	port->ODR ^= pin;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	405a      	eors	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	615a      	str	r2, [r3, #20]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <gpio_pin_IMPULSES>:

void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num ) {
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	707b      	strb	r3, [r7, #1]
	num = 2*num + 2;
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	707b      	strb	r3, [r7, #1]
	while ( --num ) {
 8001b98:	e00c      	b.n	8001bb4 <gpio_pin_IMPULSES+0x36>
		if ( num%2 ) {
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <gpio_pin_IMPULSES+0x30>
			port->BRR = pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bac:	e002      	b.n	8001bb4 <gpio_pin_IMPULSES+0x36>
		} else {
			port->BSRR = pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
	while ( --num ) {
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	707b      	strb	r3, [r7, #1]
 8001bba:	787b      	ldrb	r3, [r7, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ec      	bne.n	8001b9a <gpio_pin_IMPULSES+0x1c>
		}
	}
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
void sw_led_off( void ) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	LED_PORT->BSRR = LED_PIN;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <sw_led_off+0x14>)
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	48000400 	.word	0x48000400

08001be8 <sw_led_xor>:
	}
	void sw_led_on( void ) {
		LED_PORT->BSRRH = LED_PIN;
	}
#endif
void sw_led_xor( void ) {
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	LED_PORT->ODR ^= LED_PIN;
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <sw_led_xor+0x1c>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <sw_led_xor+0x1c>)
 8001bf2:	f083 0308 	eor.w	r3, r3, #8
 8001bf6:	6153      	str	r3, [r2, #20]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	48000400 	.word	0x48000400

08001c08 <sw_led_blink>:




void sw_led_blink( void ) { sw_led_xor(); }
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	f7ff ffec 	bl	8001be8 <sw_led_xor>
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <sw_led_debug_init>:

void sw_led_debug_init( void ) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED_PORT, LED_PIN, 	gpio_mode_output_PP_LS );
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <sw_led_debug_init+0x40>)
 8001c20:	f7ff fee4 	bl	80019ec <gpio_pin_cfg>
	sw_led_off();
 8001c24:	f7ff ffd4 	bl	8001bd0 <sw_led_off>
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 8001c28:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f7ff fedb 	bl	80019ec <gpio_pin_cfg>
	gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 8001c36:	2108      	movs	r1, #8
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f7ff ff7e 	bl	8001b3c <gpio_pin_HI>

#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 8001c40:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8001c44:	2102      	movs	r1, #2
 8001c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4a:	f7ff fecf 	bl	80019ec <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
#endif
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	48000400 	.word	0x48000400

08001c58 <sw_led_start_blinking>:

static uint8_t blinkCounter = 0;
static uint8_t blinkDelay = 0;
void sw_led_start_blinking( uint8_t repeat, uint16_t delay ) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	80bb      	strh	r3, [r7, #4]
	sw_led_off();
 8001c68:	f7ff ffb2 	bl	8001bd0 <sw_led_off>
	blinkCounter = 2*repeat;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <sw_led_start_blinking+0x30>)
 8001c74:	701a      	strb	r2, [r3, #0]
	blinkDelay = delay;
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <sw_led_start_blinking+0x34>)
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000011c 	.word	0x2000011c
 8001c8c:	2000011d 	.word	0x2000011d

08001c90 <sw_led_blinking>:
int8_t sw_led_get_status(void) {
	if (blinkCounter == 0) 	return (int8_t)_led_not_blinking;
	else					return (int8_t)_led_blinking;
}

void sw_led_blinking(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <sw_led_blinking+0x38>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d012      	beq.n	8001cc2 <sw_led_blinking+0x32>
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <sw_led_blinking+0x3c>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <sw_led_blinking+0x32>
	else {
		softTimer3 = blinkDelay;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <sw_led_blinking+0x40>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <sw_led_blinking+0x3c>)
 8001cae:	801a      	strh	r2, [r3, #0]
		sw_led_blink();
 8001cb0:	f7ff ffaa 	bl	8001c08 <sw_led_blink>
		blinkCounter--;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <sw_led_blinking+0x38>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <sw_led_blinking+0x38>)
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	e000      	b.n	8001cc4 <sw_led_blinking+0x34>
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 8001cc2:	bf00      	nop
	}
}
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000011c 	.word	0x2000011c
 8001ccc:	200005d2 	.word	0x200005d2
 8001cd0:	2000011d 	.word	0x2000011d

08001cd4 <__NVIC_EnableIRQ>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	db0b      	blt.n	8001cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 021f 	and.w	r2, r3, #31
 8001cec:	4907      	ldr	r1, [pc, #28]	; (8001d0c <__NVIC_EnableIRQ+0x38>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <WriteCmd>:
}
#endif
//***********************************************
// Zapisanie kodu komendy do sterownika SSD1306
//***********************************************
static void WriteCmd( uint8_t cmd ) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	sw_transmision_write( cmd );
	#if USE_CS==1
	CS_HI;
	#endif
#elif (TRANSMISSION_MODE==SOFT_I2C) || (TRANSMISSION_MODE==HARD_I2C)
	sw_i2c_write_reg8( I2C_ADDRESS, I2C_CTRL_DC_0, cmd );
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2078      	movs	r0, #120	; 0x78
 8001d22:	f7ff fb43 	bl	80013ac <sw_i2c_write_reg8>
#endif
	delay_us(20);
 8001d26:	2014      	movs	r0, #20
 8001d28:	f000 fe72 	bl	8002a10 <delay_us>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <WriteData>:
//***********************************************
// Zapisanie danej do pamięci obrazu sterownika SSD1306
//***********************************************
static void WriteData( uint8_t regAddr, uint8_t * buffer, uint16_t cnt ) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	4613      	mov	r3, r2
 8001d42:	80bb      	strh	r3, [r7, #4]
		WriteSpi( buffer[i] ); 				// zapis danej
	}
	CS_HI;
#endif
#ifdef SSD1306_I2C
	sw_i2c_write_bulk( SSD1306_ADDR, SSD1306_SETSTARTLINE, cnt, buffer );
 8001d44:	88ba      	ldrh	r2, [r7, #4]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	2078      	movs	r0, #120	; 0x78
 8001d4c:	f7ff f8c4 	bl	8000ed8 <sw_i2c_write_bulk>
#endif
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <sw_display_cls>:

//**********************************************
// Zeruj bufor wyświetlacza
// i zapisz jego zwartość do RAM obrazu
//**********************************************
void sw_display_cls( uint8_t *buffer, uint8_t pattern ) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	e007      	b.n	8001d7a <sw_display_cls+0x22>
		buffer[i] = pattern;
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	3301      	adds	r3, #1
 8001d78:	81fb      	strh	r3, [r7, #14]
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d3f3      	bcc.n	8001d6a <sw_display_cls+0x12>
	}
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <sw_ssd1306_display>:
//***********************************************

//************ Wyślij bufor RAM do sterownika ************
void sw_ssd1306_display( void ) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	2378      	movs	r3, #120	; 0x78
 8001d98:	71fb      	strb	r3, [r7, #7]
}
static INLINE bool sw_is_BUSY_flag_ready(void) {
	if( hI2Cx->I2C->ISR & I2C_ISR_BUSY ) return true; else  return false;
}
static INLINE void sw_i2c_set_7bitAddr( uint8_t devAddr ) {
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <sw_ssd1306_display+0x7c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	79f9      	ldrb	r1, [r7, #7]
 8001dac:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <sw_ssd1306_display+0x7c>)
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6053      	str	r3, [r2, #4]
}
 8001db6:	bf00      	nop
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( 0x21  );				// Command_Column_Address_Set
 8001db8:	2021      	movs	r0, #33	; 0x21
 8001dba:	f7ff ffa9 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x00  );				// Start
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff ffa6 	bl	8001d10 <WriteCmd>
	WriteCmd( SCREEN_WIDTH  - 1  );	// End
 8001dc4:	207f      	movs	r0, #127	; 0x7f
 8001dc6:	f7ff ffa3 	bl	8001d10 <WriteCmd>

	WriteCmd( 0x22  );				// Command_Page_Address_Set
 8001dca:	2022      	movs	r0, #34	; 0x22
 8001dcc:	f7ff ffa0 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x00  );				// Start
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ff9d 	bl	8001d10 <WriteCmd>
	WriteCmd( SCREEN_HEIGHT - 1 );	// End
 8001dd6:	203f      	movs	r0, #63	; 0x3f
 8001dd8:	f7ff ff9a 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_SETLOWCOLUMN  );
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff ff97 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SETHIGHCOLUMN );
 8001de2:	2010      	movs	r0, #16
 8001de4:	f7ff ff94 	bl	8001d10 <WriteCmd>
#if SCREEN_HEIGHT == 64
	WriteCmd( 0xB0 );
 8001de8:	20b0      	movs	r0, #176	; 0xb0
 8001dea:	f7ff ff91 	bl	8001d10 <WriteCmd>
#endif
#if SCREEN_HEIGHT == 32
	WriteCmd( 0xB4 );
#endif
//	delay_ms(100);
   	WriteData( SSD1306_SETSTARTLINE, (uint8_t *)ActualDMABuffer, FRAMEBUFFER_ALL );
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <sw_ssd1306_display+0x80>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df6:	4619      	mov	r1, r3
 8001df8:	2040      	movs	r0, #64	; 0x40
 8001dfa:	f7ff ff9b 	bl	8001d34 <WriteData>
	delay_us(20);
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f000 fe06 	bl	8002a10 <delay_us>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	20000524 	.word	0x20000524

08001e14 <timer16_init>:
/***************************************************************/

/*********************************** Timer16 init **************************************/
static void timer16_init( uint16_t timeFPS ) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <timer16_init+0x58>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <timer16_init+0x58>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6613      	str	r3, [r2, #96]	; 0x60
	TIM16->PSC = (uint32_t)SystemCoreClock / 0xFFFF / timeFPS - 1;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <timer16_init+0x5c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <timer16_init+0x60>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	0bda      	lsrs	r2, r3, #15
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <timer16_init+0x64>)
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6293      	str	r3, [r2, #40]	; 0x28
	TIM16->ARR = 0xFFFF - 1;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <timer16_init+0x64>)
 8001e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM16->DIER	= TIM_DIER_UIE;		// Update Event Interrupt
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <timer16_init+0x64>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]

	TIM16->CR1 |= TIM_CR1_CEN;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <timer16_init+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <timer16_init+0x64>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( TIM1_UP_TIM16_IRQn );
 8001e5c:	2019      	movs	r0, #25
 8001e5e:	f7ff ff39 	bl	8001cd4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	20000000 	.word	0x20000000
 8001e74:	80008001 	.word	0x80008001
 8001e78:	40014400 	.word	0x40014400

08001e7c <sw_ssd1306_init>:
	}
}
/****************************************************************************************/

//************* INICJALIZACJA sterownika SSD1306
void sw_ssd1306_init(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
//	ActualDMABuffer = SpectrumBuffer;
//	ActualDMABuffer = TextBufferDisplay;
	ActualDMABuffer = TextBuffer;
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <sw_ssd1306_init+0xec>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a39      	ldr	r2, [pc, #228]	; (8001f6c <sw_ssd1306_init+0xf0>)
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	2378      	movs	r3, #120	; 0x78
 8001e8c:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <sw_ssd1306_init+0xf4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	79f9      	ldrb	r1, [r7, #7]
 8001ea0:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <sw_ssd1306_init+0xf4>)
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	6053      	str	r3, [r2, #4]
}
 8001eaa:	bf00      	nop
	RES_LO;
	RES_HI;
#endif
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( SSD1306_DISPLAYOFF );
 8001eac:	20ae      	movs	r0, #174	; 0xae
 8001eae:	f7ff ff2f 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SETDISPLAYCLOCKDIV );
 8001eb2:	20d5      	movs	r0, #213	; 0xd5
 8001eb4:	f7ff ff2c 	bl	8001d10 <WriteCmd>
	WriteCmd( OLED_CONTRAST );
 8001eb8:	20f0      	movs	r0, #240	; 0xf0
 8001eba:	f7ff ff29 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_SETDISPLAYOFFSET );
 8001ebe:	20d3      	movs	r0, #211	; 0xd3
 8001ec0:	f7ff ff26 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x0 );
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff ff23 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SETSTARTLINE | 0x0 );
 8001eca:	2040      	movs	r0, #64	; 0x40
 8001ecc:	f7ff ff20 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_CHARGEPUMP );
 8001ed0:	208d      	movs	r0, #141	; 0x8d
 8001ed2:	f7ff ff1d 	bl	8001d10 <WriteCmd>

//    if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x10 );
//    else  WriteCmd( 0x14 );	// SSD1306_SWITCHCAPVCC

	WriteCmd( 0x14 );			// SSD1306_SWITCHCAPVCC
 8001ed6:	2014      	movs	r0, #20
 8001ed8:	f7ff ff1a 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_MEMORYMODE );
 8001edc:	2020      	movs	r0, #32
 8001ede:	f7ff ff17 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x00 );
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff ff14 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SEGREMAP | 0x1 );
 8001ee8:	20a1      	movs	r0, #161	; 0xa1
 8001eea:	f7ff ff11 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_COMSCANDEC );
 8001eee:	20c8      	movs	r0, #200	; 0xc8
 8001ef0:	f7ff ff0e 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_SETCONTRAST );
 8001ef4:	2081      	movs	r0, #129	; 0x81
 8001ef6:	f7ff ff0b 	bl	8001d10 <WriteCmd>
	WriteCmd( REFRESH_MAX );
 8001efa:	20f0      	movs	r0, #240	; 0xf0
 8001efc:	f7ff ff08 	bl	8001d10 <WriteCmd>

//	if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x9F );
//	else WriteCmd( 0xCF );

	WriteCmd( 0xCF );					// SSD1306_SWITCHCAPVCC
 8001f00:	20cf      	movs	r0, #207	; 0xcf
 8001f02:	f7ff ff05 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SETPRECHARGE );
 8001f06:	20d9      	movs	r0, #217	; 0xd9
 8001f08:	f7ff ff02 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_SETCOMPINS );
	WriteCmd( 0x02 );
#endif
// ssd1306 - 128 x 64
#ifdef GLCD_RES_128_64
	WriteCmd( SSD1306_SETMULTIPLEX );
 8001f0c:	20a8      	movs	r0, #168	; 0xa8
 8001f0e:	f7ff feff 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x3F );
 8001f12:	203f      	movs	r0, #63	; 0x3f
 8001f14:	f7ff fefc 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_SETCOMPINS );
 8001f18:	20da      	movs	r0, #218	; 0xda
 8001f1a:	f7ff fef9 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x12 );
 8001f1e:	2012      	movs	r0, #18
 8001f20:	f7ff fef6 	bl	8001d10 <WriteCmd>
#endif
	WriteCmd( SSD1306_SETVCOMDETECT );
 8001f24:	20db      	movs	r0, #219	; 0xdb
 8001f26:	f7ff fef3 	bl	8001d10 <WriteCmd>
	WriteCmd( 0x40 );
 8001f2a:	2040      	movs	r0, #64	; 0x40
 8001f2c:	f7ff fef0 	bl	8001d10 <WriteCmd>

	WriteCmd( SSD1306_DISPLAYALLON_RESUME );
 8001f30:	20a4      	movs	r0, #164	; 0xa4
 8001f32:	f7ff feed 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_NORMALDISPLAY );
 8001f36:	20a6      	movs	r0, #166	; 0xa6
 8001f38:	f7ff feea 	bl	8001d10 <WriteCmd>
	WriteCmd( SSD1306_DISPLAYON );
 8001f3c:	20af      	movs	r0, #175	; 0xaf
 8001f3e:	f7ff fee7 	bl	8001d10 <WriteCmd>

	sw_display_cls( (uint8_t *)ActualDMABuffer, 0x00 );
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <sw_ssd1306_init+0xf0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff05 	bl	8001d58 <sw_display_cls>
	sw_ssd1306_display();
 8001f4e:	f7ff ff1f 	bl	8001d90 <sw_ssd1306_display>

	timer16_init( 10 );
 8001f52:	200a      	movs	r0, #10
 8001f54:	f7ff ff5e 	bl	8001e14 <timer16_init>
	sw_dma_memset_init(8);
 8001f58:	2008      	movs	r0, #8
 8001f5a:	f000 fb59 	bl	8002610 <sw_dma_memset_init>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000524 	.word	0x20000524
 8001f70:	20000010 	.word	0x20000010

08001f74 <graphic_draw_H_line_RAM>:
#include "displays.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
								  const uint32_t color, const T_GAMMA *gamma ) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	4611      	mov	r1, r2
 8001f80:	461a      	mov	r2, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	817b      	strh	r3, [r7, #10]
 8001f86:	460b      	mov	r3, r1
 8001f88:	813b      	strh	r3, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]

#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
 8001f92:	e00f      	b.n	8001fb4 <graphic_draw_H_line_RAM+0x40>
#ifdef PANEL_RGB
		graphic_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		graphic_set_pixel_RAM( buffer, x + i, y, (uint8_t *)&color );
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b219      	sxth	r1, r3
 8001fa0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f001 fa5d 	bl	8003468 <_etext>
	for ( uint8_t i=0; i < width; i++ ) {
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	75fb      	strb	r3, [r7, #23]
 8001fb4:	7dfa      	ldrb	r2, [r7, #23]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3eb      	bcc.n	8001f94 <graphic_draw_H_line_RAM+0x20>
#endif
	}
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const uint32_t color, const T_GAMMA *gamma ) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b088      	sub	sp, #32
 8001fca:	af02      	add	r7, sp, #8
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	4608      	mov	r0, r1
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	813b      	strh	r3, [r7, #8]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i=0; i < height; i++ ) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	75fb      	strb	r3, [r7, #23]
 8001fe4:	e013      	b.n	800200e <graphic_fill_rectangle_RAM+0x48>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	893b      	ldrh	r3, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	79f8      	ldrb	r0, [r7, #7]
 8001ff4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4603      	mov	r3, r0
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f7ff ffb6 	bl	8001f74 <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	3301      	adds	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
 800200e:	7dfa      	ldrb	r2, [r7, #23]
 8002010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3e6      	bcc.n	8001fe6 <graphic_fill_rectangle_RAM+0x20>
	}
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <polish_letters>:
	0xA2,  /*ó, */
};
#endif

/***** Zwraca numer znaku w tablicy ************************/
uint8_t polish_letters(uint8_t codePage, wchar_t codeChar) {
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]

	uint8_t i;
	uint8_t tmp=ASCII;
 8002030:	2313      	movs	r3, #19
 8002032:	73bb      	strb	r3, [r7, #14]

	for (i=0; i<18; i++) {
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e00e      	b.n	8002058 <polish_letters+0x34>

#ifdef UNICODE
		if (codePage == UNICODE) {
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d108      	bne.n	8002052 <polish_letters+0x2e>
			if ( codeChar == uniCode[i]) {
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <polish_letters+0x48>)
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d101      	bne.n	8002052 <polish_letters+0x2e>
				return i;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	e006      	b.n	8002060 <polish_letters+0x3c>
	for (i=0; i<18; i++) {
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b11      	cmp	r3, #17
 800205c:	d9ed      	bls.n	800203a <polish_letters+0x16>
			if ( codeChar == pgm_read_byte(cp852Code+i) )
				return i;
		}
#endif
	}
	return tmp;
 800205e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	08003e38 	.word	0x08003e38

08002070 <graphic_draw_char_RAM>:
	return charWidth;
}
/*********************************************************************************************************/
#elif defined COLOR_MONO
uint8_t graphic_draw_char_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, wchar_t charCode, uint32_t  color,
									  uint32_t bg, uint8_t drawLine, FONT_INFO *fontPtrPGM, const T_GAMMA *gamma ) {
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af04      	add	r7, sp, #16
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	817b      	strh	r3, [r7, #10]
 800207e:	4613      	mov	r3, r2
 8002080:	813b      	strh	r3, [r7, #8]
	uint8_t		charWidth;
	uint16_t	charOffset;
	uint8_t		charHeight			= fontPtrPGM->heightPixels;
 8002082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	763b      	strb	r3, [r7, #24]
	uint8_t		charAddressStart	= fontPtrPGM->startChar;
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	75fb      	strb	r3, [r7, #23]
	uint8_t		transCode 			= polish_letters(UNICODE, charCode);
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff ffc7 	bl	8002024 <polish_letters>
 8002096:	4603      	mov	r3, r0
 8002098:	75bb      	strb	r3, [r7, #22]
	uint8_t 	size 				= 1;
 800209a:	2301      	movs	r3, #1
 800209c:	757b      	strb	r3, [r7, #21]
	// Rysujemy SPACJĘ i wychodzimy -------------------------------------------------------------------
	if (charCode == L' ') {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d113      	bne.n	80020cc <graphic_draw_char_RAM+0x5c>
		graphic_fill_rectangle_RAM( buffer, x, y, fontPtrPGM->spacePixels, charHeight, bg, gamma );
 80020a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a6:	7a5c      	ldrb	r4, [r3, #9]
 80020a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020aa:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80020ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80020b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b4:	9202      	str	r2, [sp, #8]
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	7e3b      	ldrb	r3, [r7, #24]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4623      	mov	r3, r4
 80020be:	4602      	mov	r2, r0
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff ff80 	bl	8001fc6 <graphic_fill_rectangle_RAM>
		return fontPtrPGM->spacePixels;
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c8:	7a5b      	ldrb	r3, [r3, #9]
 80020ca:	e107      	b.n	80022dc <graphic_draw_char_RAM+0x26c>
	}
	//--------------------------------------------------------------------------------------------------
	if (transCode == ASCII) {
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	2b13      	cmp	r3, #19
 80020d0:	d112      	bne.n	80020f8 <graphic_draw_char_RAM+0x88>
		// Czytamy ile bitów zajmuje odległość czcionki
		charWidth  = fontPtrPGM->charInfo[ charCode - charAddressStart ].widthBits;
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	77fb      	strb	r3, [r7, #31]
		// Czytamy ile bitów zajmuje odległość między znakami
		charOffset = fontPtrPGM->charInfo[ charCode - charAddressStart ].offset;
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	1acb      	subs	r3, r1, r3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	885b      	ldrh	r3, [r3, #2]
 80020f4:	83bb      	strh	r3, [r7, #28]
 80020f6:	e019      	b.n	800212c <graphic_draw_char_RAM+0xbc>
	} else {
		charWidth  = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fe:	8a9b      	ldrh	r3, [r3, #20]
 8002100:	4619      	mov	r1, r3
 8002102:	7dbb      	ldrb	r3, [r7, #22]
 8002104:	f1c3 0312 	rsb	r3, r3, #18
 8002108:	1acb      	subs	r3, r1, r3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	77fb      	strb	r3, [r7, #31]
		charOffset = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].offset;
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002118:	8a9b      	ldrh	r3, [r3, #20]
 800211a:	4619      	mov	r1, r3
 800211c:	7dbb      	ldrb	r3, [r7, #22]
 800211e:	f1c3 0312 	rsb	r3, r3, #18
 8002122:	1acb      	subs	r3, r1, r3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	885b      	ldrh	r3, [r3, #2]
 800212a:	83bb      	strh	r3, [r7, #28]
	}

	if((x >= _width)					||	// Clip right
 800212c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002130:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <graphic_draw_char_RAM+0x274>)
 8002132:	8812      	ldrh	r2, [r2, #0]
 8002134:	4293      	cmp	r3, r2
 8002136:	da17      	bge.n	8002168 <graphic_draw_char_RAM+0xf8>
		(y >= _height)					||	// Clip bottom
 8002138:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <graphic_draw_char_RAM+0x278>)
 800213e:	8812      	ldrh	r2, [r2, #0]
	if((x >= _width)					||	// Clip right
 8002140:	4293      	cmp	r3, r2
 8002142:	da11      	bge.n	8002168 <graphic_draw_char_RAM+0xf8>
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8002144:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	7d79      	ldrb	r1, [r7, #21]
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
		(y >= _height)					||	// Clip bottom
 8002152:	2b00      	cmp	r3, #0
 8002154:	dd08      	ble.n	8002168 <graphic_draw_char_RAM+0xf8>
		((y + charHeight * size - 1) < 0))	// Clip top
 8002156:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800215a:	7e3b      	ldrb	r3, [r7, #24]
 800215c:	7d79      	ldrb	r1, [r7, #21]
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8002164:	2b00      	cmp	r3, #0
 8002166:	dc01      	bgt.n	800216c <graphic_draw_char_RAM+0xfc>
	return 0;
 8002168:	2300      	movs	r3, #0
 800216a:	e0b7      	b.n	80022dc <graphic_draw_char_RAM+0x26c>

	if (charCode == L' ') {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b20      	cmp	r3, #32
 8002170:	d11a      	bne.n	80021a8 <graphic_draw_char_RAM+0x138>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidth*size, charHeight*size, bg, NULL );
 8002172:	7ffa      	ldrb	r2, [r7, #31]
 8002174:	7d7b      	ldrb	r3, [r7, #21]
 8002176:	fb12 f303 	smulbb	r3, r2, r3
 800217a:	b2dc      	uxtb	r4, r3
 800217c:	7e3a      	ldrb	r2, [r7, #24]
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	fb12 f303 	smulbb	r3, r2, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002188:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800218c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002190:	2500      	movs	r5, #0
 8002192:	9502      	str	r5, [sp, #8]
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4623      	mov	r3, r4
 800219a:	4602      	mov	r2, r0
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff ff12 	bl	8001fc6 <graphic_fill_rectangle_RAM>

		return fontPtrPGM->spacePixels;
 80021a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a4:	7a5b      	ldrb	r3, [r3, #9]
 80021a6:	e099      	b.n	80022dc <graphic_draw_char_RAM+0x26c>
	}
	int8_t i, k, j=0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	767b      	strb	r3, [r7, #25]
	uint8_t calkow = (charWidth - 1)/8; // Sprawdzamy w ilu bitach mamy szerokość czcionki
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da00      	bge.n	80021b6 <graphic_draw_char_RAM+0x146>
 80021b4:	3307      	adds	r3, #7
 80021b6:	10db      	asrs	r3, r3, #3
 80021b8:	753b      	strb	r3, [r7, #20]
	uint8_t line;

	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 80021ba:	2300      	movs	r3, #0
 80021bc:	76fb      	strb	r3, [r7, #27]
 80021be:	e086      	b.n	80022ce <graphic_draw_char_RAM+0x25e>
	{
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 80021c0:	2300      	movs	r3, #0
 80021c2:	767b      	strb	r3, [r7, #25]
 80021c4:	e078      	b.n	80022b8 <graphic_draw_char_RAM+0x248>

			line = pgm_read_byte( fontPtrPGM->data + charOffset + (calkow + 1)*i + j );
 80021c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	8bbb      	ldrh	r3, [r7, #28]
 80021cc:	7d39      	ldrb	r1, [r7, #20]
 80021ce:	3101      	adds	r1, #1
 80021d0:	f997 001b 	ldrsb.w	r0, [r7, #27]
 80021d4:	fb00 f101 	mul.w	r1, r0, r1
 80021d8:	4419      	add	r1, r3
 80021da:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80021de:	440b      	add	r3, r1
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	74fb      	strb	r3, [r7, #19]

			for ( k=0; k<8; k++ ) {
 80021e6:	2300      	movs	r3, #0
 80021e8:	76bb      	strb	r3, [r7, #26]
 80021ea:	e05b      	b.n	80022a4 <graphic_draw_char_RAM+0x234>
				if ( (line & (1 << (7-k))) && ( (k + 8*j) < charWidth) ) {    // Ekstrahujemy kolejne bity
 80021ec:	7cfa      	ldrb	r2, [r7, #19]
 80021ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	fa42 f303 	asr.w	r3, r2, r3
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d023      	beq.n	800224a <graphic_draw_char_RAM+0x1da>
 8002202:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8002206:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	441a      	add	r2, r3
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	429a      	cmp	r2, r3
 8002212:	da1a      	bge.n	800224a <graphic_draw_char_RAM+0x1da>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&color );
 8002214:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002218:	b29b      	uxth	r3, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	b29a      	uxth	r2, r3
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	4413      	add	r3, r2
 8002222:	b29a      	uxth	r2, r3
 8002224:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4413      	add	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	b219      	sxth	r1, r3
 8002230:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002234:	b29a      	uxth	r2, r3
 8002236:	893b      	ldrh	r3, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	b21a      	sxth	r2, r3
 800223e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f001 f910 	bl	8003468 <_etext>
 8002248:	e026      	b.n	8002298 <graphic_draw_char_RAM+0x228>
				}
				else if( (bg!=color) && ( (k + 8*j) < charWidth) ) {
 800224a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	429a      	cmp	r2, r3
 8002250:	d022      	beq.n	8002298 <graphic_draw_char_RAM+0x228>
 8002252:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8002256:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	441a      	add	r2, r3
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	429a      	cmp	r2, r3
 8002262:	da19      	bge.n	8002298 <graphic_draw_char_RAM+0x228>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&bg );
 8002264:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002268:	b29b      	uxth	r3, r3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	b29a      	uxth	r2, r3
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	4413      	add	r3, r2
 8002272:	b29a      	uxth	r2, r3
 8002274:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4413      	add	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	b219      	sxth	r1, r3
 8002280:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002284:	b29a      	uxth	r2, r3
 8002286:	893b      	ldrh	r3, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	b21a      	sxth	r2, r3
 800228e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f001 f8e8 	bl	8003468 <_etext>
			for ( k=0; k<8; k++ ) {
 8002298:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	76bb      	strb	r3, [r7, #26]
 80022a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80022a8:	2b07      	cmp	r3, #7
 80022aa:	dd9f      	ble.n	80021ec <graphic_draw_char_RAM+0x17c>
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 80022ac:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	767b      	strb	r3, [r7, #25]
 80022b8:	7d3a      	ldrb	r2, [r7, #20]
 80022ba:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80022be:	429a      	cmp	r2, r3
 80022c0:	da81      	bge.n	80021c6 <graphic_draw_char_RAM+0x156>
	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 80022c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	76fb      	strb	r3, [r7, #27]
 80022ce:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80022d2:	7e3b      	ldrb	r3, [r7, #24]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f6ff af73 	blt.w	80021c0 <graphic_draw_char_RAM+0x150>
				}
			}
		} // Koniec rysowania
	}// Koniec pętli do wierszy

	return charWidth;
 80022da:	7ffb      	ldrb	r3, [r7, #31]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bdb0      	pop	{r4, r5, r7, pc}
 80022e4:	20000018 	.word	0x20000018
 80022e8:	2000001a 	.word	0x2000001a

080022ec <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b08f      	sub	sp, #60	; 0x3c
 80022f0:	af06      	add	r7, sp, #24
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71fb      	strb	r3, [r7, #7]
	int16_t cursorX = string->x;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	83fb      	strh	r3, [r7, #30]
	int16_t cursorY = string->y;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	82fb      	strh	r3, [r7, #22]
	uint8_t charWidth;

	textSize = FONTx1;	// To być może będzie niepotrzebne
 8002308:	2301      	movs	r3, #1
 800230a:	71fb      	strb	r3, [r7, #7]

	if ( string->onChange ) {
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	7c1b      	ldrb	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d018      	beq.n	8002346 <graphic_puts_RAM+0x5a>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	889b      	ldrh	r3, [r3, #4]
 8002324:	b2dc      	uxtb	r4, r3
									string->fontPtrPGM->heightPixels, bg, gamma );
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	68db      	ldr	r3, [r3, #12]
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800232e:	9202      	str	r2, [sp, #8]
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4623      	mov	r3, r4
 8002338:	4602      	mov	r2, r0
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f7ff fe43 	bl	8001fc6 <graphic_fill_rectangle_RAM>
		string->onChange = 0;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	741a      	strb	r2, [r3, #16]
	}
	string->lastPosX = string->x;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f9b3 2000 	ldrsh.w	r2, [r3]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	825a      	strh	r2, [r3, #18]
	string->lastPosY = string->y;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	829a      	strh	r2, [r3, #20]

	wchar_t * str = string->str;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]

	while ( *str ) {
 8002360:	e028      	b.n	80023b4 <graphic_puts_RAM+0xc8>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, *str++, color, bg, textSize, string->fontPtrPGM, gamma );
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1d1a      	adds	r2, r3, #4
 8002366:	61ba      	str	r2, [r7, #24]
 8002368:	681c      	ldr	r4, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002372:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8002376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002378:	9204      	str	r2, [sp, #16]
 800237a:	9303      	str	r3, [sp, #12]
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	9302      	str	r3, [sp, #8]
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4623      	mov	r3, r4
 800238a:	4602      	mov	r2, r0
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fe6f 	bl	8002070 <graphic_draw_char_RAM>
 8002392:	4603      	mov	r3, r0
 8002394:	757b      	strb	r3, [r7, #21]
		cursorX += textSize * (charWidth + string->fontPtrPGM->interspacePixels );
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	b29a      	uxth	r2, r3
 800239a:	7d7b      	ldrb	r3, [r7, #21]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	68c9      	ldr	r1, [r1, #12]
 80023a0:	7a09      	ldrb	r1, [r1, #8]
 80023a2:	440b      	add	r3, r1
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	fb12 f303 	smulbb	r3, r2, r3
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	8bfb      	ldrh	r3, [r7, #30]
 80023ae:	4413      	add	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	83fb      	strh	r3, [r7, #30]
	while ( *str ) {
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1d2      	bne.n	8002362 <graphic_puts_RAM+0x76>
	}
	return  string->stringLength = cursorX - string->x; //Zwraca długość napisu w pikselach
 80023bc:	8bfa      	ldrh	r2, [r7, #30]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	809a      	strh	r2, [r3, #4]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	889b      	ldrh	r3, [r3, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}

080023da <graphic_char_to_wide>:
								string->fontPtrPGM->heightPixels, bg, gamma );
}
/*********************************************************************************************************/

/******************* Duplikuje tablice typu char do wideChar *******************************/
uint8_t graphic_char_to_wide( wchar_t* dest, char* source ) {
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
	int i = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
	char * ptr = source;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	60bb      	str	r3, [r7, #8]

    while(ptr[i]) {
 80023ec:	e00c      	b.n	8002408 <graphic_char_to_wide+0x2e>
        dest[i] = (char)source[i];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	7819      	ldrb	r1, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	460a      	mov	r2, r1
 8002400:	601a      	str	r2, [r3, #0]
        i++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
    while(ptr[i]) {
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ec      	bne.n	80023ee <graphic_char_to_wide+0x14>
    }
    dest[i] = '\0';
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4413      	add	r3, r2
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
	return i; // Zwraca długość string'a bez znaku kontrolnego '\0'
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	b2db      	uxtb	r3, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <graphic_puts_float_RAM>:
	string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
}

#define FLOAT_PRECISION	6		// Numbers to display + dot and sign character
static void graphic_puts_float_RAM( volatile T_DISPLAY *buffer, T_STRING *string, float data, uint8_t textSize,
							 	 	 uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b098      	sub	sp, #96	; 0x60
 8002434:	af02      	add	r7, sp, #8
 8002436:	6178      	str	r0, [r7, #20]
 8002438:	6139      	str	r1, [r7, #16]
 800243a:	ed87 0a03 	vstr	s0, [r7, #12]
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	72fb      	strb	r3, [r7, #11]
	char 	text_char [ FLOAT_PRECISION + 3 ];	// Sign, dot and '\0'
	wchar_t	text_wchar[ FLOAT_PRECISION + 3 ];
	char *ptr_char 	= text_char;
 8002444:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002448:	653b      	str	r3, [r7, #80]	; 0x50
	string->str 	= text_wchar;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f107 021c 	add.w	r2, r7, #28
 8002450:	609a      	str	r2, [r3, #8]
	uint32_t dec;

	if ( data < 0 ) {
 8002452:	edd7 7a03 	vldr	s15, [r7, #12]
 8002456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d509      	bpl.n	8002474 <graphic_puts_float_RAM+0x44>
		*text_char = '-';
 8002460:	232d      	movs	r3, #45	; 0x2d
 8002462:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		data = data * -1;					// Only number module
 8002466:	edd7 7a03 	vldr	s15, [r7, #12]
 800246a:	eef1 7a67 	vneg.f32	s15, s15
 800246e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002472:	e002      	b.n	800247a <graphic_puts_float_RAM+0x4a>
	} else {
		*text_char = '+';					// Space for sign character
 8002474:	232b      	movs	r3, #43	; 0x2b
 8002476:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	}
	dec 		= (uint32_t)data;			// Integer part of a number;
 800247a:	edd7 7a03 	vldr	s15, [r7, #12]
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	ee17 3a90 	vmov	r3, s15
 8002486:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t i 	= 1;						// First character is sign
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	itoa( dec, text_char + i , 10 );
 800248e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002494:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002498:	4413      	add	r3, r2
 800249a:	220a      	movs	r2, #10
 800249c:	4619      	mov	r1, r3
 800249e:	f000 fb49 	bl	8002b34 <itoa>

	while ( *(ptr_char + i++) ) {}			// Find number of integer digits
 80024a2:	bf00      	nop
 80024a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80024ae:	461a      	mov	r2, r3
 80024b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f4      	bne.n	80024a4 <graphic_puts_float_RAM+0x74>

	text_char[ i - 1 ] = '.';				// Place '.' character';
 80024ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80024be:	3b01      	subs	r3, #1
 80024c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024c4:	4413      	add	r3, r2
 80024c6:	222e      	movs	r2, #46	; 0x2e
 80024c8:	f803 2c18 	strb.w	r2, [r3, #-24]
	data = data - (float32_t)dec;			// Fractional part of a number
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80024da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024de:	edc7 7a03 	vstr	s15, [r7, #12]

	do {									// Find first zeros after the dot
		data = (float32_t)data*10;
 80024e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ee:	edc7 7a03 	vstr	s15, [r7, #12]
		dec  = (uint32_t)data;
 80024f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fa:	ee17 3a90 	vmov	r3, s15
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ( dec == 0 ) {
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <graphic_puts_float_RAM+0xec>
			text_char[ i++ ] = '0';
 8002506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8002510:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002514:	4413      	add	r3, r2
 8002516:	2230      	movs	r2, #48	; 0x30
 8002518:	f803 2c18 	strb.w	r2, [r3, #-24]
		}
	} while ( (dec == 0) && (i <= FLOAT_PRECISION ) );
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <graphic_puts_float_RAM+0xfa>
 8002522:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002526:	2b06      	cmp	r3, #6
 8002528:	d9db      	bls.n	80024e2 <graphic_puts_float_RAM+0xb2>

	dec = (uint32_t)powf( 10, FLOAT_PRECISION - (i - 1) )*data;   // 10000000 * data
 800252a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	eef0 0a67 	vmov.f32	s1, s15
 800253e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002542:	f000 fb3b 	bl	8002bbc <powf>
 8002546:	eef0 7a40 	vmov.f32	s15, s0
 800254a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002552:	edd7 7a03 	vldr	s15, [r7, #12]
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
	itoa( (uint32_t)dec, text_char + i, 10 );
 8002564:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002566:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800256a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800256e:	4413      	add	r3, r2
 8002570:	220a      	movs	r2, #10
 8002572:	4619      	mov	r1, r3
 8002574:	f000 fade 	bl	8002b34 <itoa>

	(void)graphic_char_to_wide( text_wchar, text_char );
 8002578:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff29 	bl	80023da <graphic_char_to_wide>
    string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 8002588:	7afa      	ldrb	r2, [r7, #11]
 800258a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff fea8 	bl	80022ec <graphic_puts_RAM>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	809a      	strh	r2, [r3, #4]
}
 80025a4:	bf00      	nop
 80025a6:	3758      	adds	r7, #88	; 0x58
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <TEXT_display_float>:
	Text->y = y;
	Text->onChange = 1;
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
	graphic_puts_int_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
}
void TEXT_display_float( int16_t x, int16_t y, float number, T_STRING * Text ) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	81fb      	strh	r3, [r7, #14]
 80025bc:	460b      	mov	r3, r1
 80025be:	81bb      	strh	r3, [r7, #12]
	wchar_t String[10];
	Text->str = String;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f107 0210 	add.w	r2, r7, #16
 80025c6:	609a      	str	r2, [r3, #8]
	Text->x = x;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	89fa      	ldrh	r2, [r7, #14]
 80025cc:	801a      	strh	r2, [r3, #0]
	Text->y = y;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	89ba      	ldrh	r2, [r7, #12]
 80025d2:	805a      	strh	r2, [r3, #2]
	Text->onChange = 1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	741a      	strb	r2, [r3, #16]
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a09      	ldr	r2, [pc, #36]	; (8002604 <TEXT_display_float+0x58>)
 80025de:	60da      	str	r2, [r3, #12]
	graphic_puts_float_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <TEXT_display_float+0x5c>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <TEXT_display_float+0x60>)
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80025f0:	2201      	movs	r2, #1
 80025f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	f7ff ff1a 	bl	8002430 <graphic_puts_float_RAM>
}
 80025fc:	bf00      	nop
 80025fe:	3738      	adds	r7, #56	; 0x38
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08003e0c 	.word	0x08003e0c
 8002608:	2000000c 	.word	0x2000000c
 800260c:	08003e80 	.word	0x08003e80

08002610 <sw_dma_memset_init>:
 *      Author: simon
 */

#include "sw_mcu_conf.h"

void sw_dma_memset_init( uint32_t bits ) {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
#ifdef STM32F3
	RCC->AHBENR |= RCC_AHBENR_DMA2EN;			// DMA1 clock enabled
#elif defined STM32L4
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;			// DMA1 clock enabled
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <sw_dma_memset_init+0x64>)
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <sw_dma_memset_init+0x64>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;			// Clear CCR_EN bit - ready to CMAR,CPAR,CNDTR modification
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <sw_dma_memset_init+0x68>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <sw_dma_memset_init+0x68>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR = DMA_CCR_MEM2MEM		// Copy memory to memory
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <sw_dma_memset_init+0x68>)
 8002632:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002636:	601a      	str	r2, [r3, #0]
						 |DMA_CCR_MINC 	 		// Memory increment mode enabled
//						 |DMA_CCR_PINC 	 		// Peripheral increment mode enabled
//						 |DMA_CCR_DIR			// Data transfer direction. CMAR -> CPAR (Memory to Peripheral)
						 ;
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <sw_dma_memset_init+0x68>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <sw_dma_memset_init+0x68>)
 800263e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002642:	6013      	str	r3, [r2, #0]
	bits = ( bits << DMA_CCR_PSIZE_Pos );
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <sw_dma_memset_init+0x68>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	490a      	ldr	r1, [pc, #40]	; (8002678 <sw_dma_memset_init+0x68>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
	bits = ( bits << DMA_CCR_MSIZE_Pos );
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	029b      	lsls	r3, r3, #10
 800265a:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <sw_dma_memset_init+0x68>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4905      	ldr	r1, [pc, #20]	; (8002678 <sw_dma_memset_init+0x68>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	40020444 	.word	0x40020444

0800267c <DMA1_Channel3_IRQHandler>:
}
/*************************************************************************************/

/* 11. *******************************************************************************/
#ifdef SPI_DMA
void SPI_DMA_ChannelTX_IRQHandler(void) {
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
	while( (DMA1->ISR & SPI_DMATX_TC_FLAG) == 0 ) {}	//
 8002680:	bf00      	nop
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <DMA1_Channel3_IRQHandler+0x4c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f9      	beq.n	8002682 <DMA1_Channel3_IRQHandler+0x6>
	DMA1->IFCR = SPI_DMATX_TC_FLAG;			// DMA Channel Transfer Complete clear flag
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <DMA1_Channel3_IRQHandler+0x4c>)
 8002690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002694:	605a      	str	r2, [r3, #4]
}
 8002696:	bf00      	nop
	while ( (spi->SPI->SR & SPI_SR_BSY) == SPI_SR_BSY ) {}
 8002698:	bf00      	nop
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <DMA1_Channel3_IRQHandler+0x50>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d0f7      	beq.n	800269a <DMA1_Channel3_IRQHandler+0x1e>
}
 80026aa:	bf00      	nop
	spi_clear_tc_flag();
	spi_wait_until_busy();
	SPI_DMATX_Channel->CCR	&= ~DMA_CCR_EN;			//
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <DMA1_Channel3_IRQHandler+0x54>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <DMA1_Channel3_IRQHandler+0x54>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]
	spiDmaStatus 			 = SPI_DMA_BUSY;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <DMA1_Channel3_IRQHandler+0x58>)
 80026ba:	2202      	movs	r2, #2
 80026bc:	701a      	strb	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40020000 	.word	0x40020000
 80026cc:	2000001c 	.word	0x2000001c
 80026d0:	40020030 	.word	0x40020030
 80026d4:	20000528 	.word	0x20000528

080026d8 <__NVIC_SetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f4:	4013      	ands	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270a:	4a04      	ldr	r2, [pc, #16]	; (800271c <__NVIC_SetPriorityGrouping+0x44>)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	60d3      	str	r3, [r2, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_SetPriority>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	; (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	; (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <DWT_Delay_Init>:

#include "../SW_BOARD/sw_led_blink_debug.h"
#include "../keyboard.h"

// https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/
uint32_t DWT_Delay_Init(void) {
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <DWT_Delay_Init+0x58>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <DWT_Delay_Init+0x58>)
 80027e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ea:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <DWT_Delay_Init+0x58>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <DWT_Delay_Init+0x58>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <DWT_Delay_Init+0x5c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <DWT_Delay_Init+0x5c>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <DWT_Delay_Init+0x5c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <DWT_Delay_Init+0x5c>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <DWT_Delay_Init+0x5c>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8002816:	bf00      	nop
	__ASM volatile ("NOP");
 8002818:	bf00      	nop
	__ASM volatile ("NOP");
 800281a:	bf00      	nop

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT) {
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <DWT_Delay_Init+0x5c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <DWT_Delay_Init+0x4c>
		return 0; /*clock cycle counter started*/
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <DWT_Delay_Init+0x4e>
	} else {
		return 1; /*clock cycle counter not started*/
 8002828:	2301      	movs	r3, #1
	}
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000edf0 	.word	0xe000edf0
 8002838:	e0001000 	.word	0xe0001000

0800283c <nvic_priority>:
#define PRIGROUP_4G_4S	((const uint32_t) 0x05)
#define PRIGROUP_8G_2S	((const uint32_t) 0x04)
#define PRIGROUP_16G_0S	((const uint32_t) 0x03)

/************************ Interrupt priority*******************************/
void nvic_priority(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
	uint32_t prio;
	NVIC_SetPriorityGrouping( PRIGROUP_4G_4S );
 8002842:	2005      	movs	r0, #5
 8002844:	f7ff ff48 	bl	80026d8 <__NVIC_SetPriorityGrouping>

	prio = NVIC_EncodePriority( PRIGROUP_4G_4S, 0, 0 ); // Draw the spectrum in RAM
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2005      	movs	r0, #5
 800284e:	f7ff ff91 	bl	8002774 <NVIC_EncodePriority>
 8002852:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority( SysTick_IRQn, prio );
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	f04f 30ff 	mov.w	r0, #4294967295
 800285a:	f7ff ff61 	bl	8002720 <__NVIC_SetPriority>

	prio = NVIC_EncodePriority( PRIGROUP_4G_4S, 1, 0 ); // Update clock
 800285e:	2200      	movs	r2, #0
 8002860:	2101      	movs	r1, #1
 8002862:	2005      	movs	r0, #5
 8002864:	f7ff ff86 	bl	8002774 <NVIC_EncodePriority>
 8002868:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority( EXTI3_IRQn, prio );
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	2009      	movs	r0, #9
 800286e:	f7ff ff57 	bl	8002720 <__NVIC_SetPriority>

}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <sw_softTimers_init>:
/************************************************************************/

/**** Inicjujemy SysTick pod timery programowe *****/
uint32_t sw_softTimers_init( uint32_t timeBase_ms, uint32_t type ) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]

//	if 		(type==MILI_SEC)	type = 1000;	// 1 ms
//	else if (type==MICRO_SEC) 	type = 1;		// 1 us
//	else return 0;								// błąd
//	SysTick_Config( SystemCoreClock/type/timeBase_ms );
	if ( type==MICRO_SEC ) {
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d101      	bne.n	800288e <sw_softTimers_init+0x14>
		DWT_Delay_Init();
 800288a:	f7ff ffa7 	bl	80027dc <DWT_Delay_Init>
	}
	nvic_priority();
 800288e:	f7ff ffd5 	bl	800283c <nvic_priority>
	return 1;									// ok
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SysTick_Handler>:
volatile uint16_t showMenuTimer;
volatile uint16_t softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	milis++;
 80028a0:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <SysTick_Handler+0x104>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	4a3e      	ldr	r2, [pc, #248]	; (80029a0 <SysTick_Handler+0x104>)
 80028a8:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 80028aa:	4b3e      	ldr	r3, [pc, #248]	; (80029a4 <SysTick_Handler+0x108>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d006      	beq.n	80028c2 <SysTick_Handler+0x26>
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <SysTick_Handler+0x108>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <SysTick_Handler+0x108>)
 80028c0:	801a      	strh	r2, [r3, #0]
	if (debounceTimer)	debounceTimer--;
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <SysTick_Handler+0x10c>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <SysTick_Handler+0x3e>
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <SysTick_Handler+0x10c>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <SysTick_Handler+0x10c>)
 80028d8:	801a      	strh	r2, [r3, #0]
	if (repeatTimer)	repeatTimer--;
 80028da:	4b34      	ldr	r3, [pc, #208]	; (80029ac <SysTick_Handler+0x110>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <SysTick_Handler+0x56>
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <SysTick_Handler+0x110>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <SysTick_Handler+0x110>)
 80028f0:	801a      	strh	r2, [r3, #0]
	if (delayTimer)		delayTimer--;
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <SysTick_Handler+0x114>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <SysTick_Handler+0x6e>
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <SysTick_Handler+0x114>)
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <SysTick_Handler+0x114>)
 8002908:	801a      	strh	r2, [r3, #0]
	if (showMenuTimer) 	showMenuTimer--;
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <SysTick_Handler+0x118>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d006      	beq.n	8002922 <SysTick_Handler+0x86>
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <SysTick_Handler+0x118>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <SysTick_Handler+0x118>)
 8002920:	801a      	strh	r2, [r3, #0]
	if (softTimer2) 	softTimer2--;
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <SysTick_Handler+0x11c>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <SysTick_Handler+0x9e>
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <SysTick_Handler+0x11c>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <SysTick_Handler+0x11c>)
 8002938:	801a      	strh	r2, [r3, #0]
	if (softTimer3) 	softTimer3--;
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <SysTick_Handler+0x120>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <SysTick_Handler+0xb6>
 8002944:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <SysTick_Handler+0x120>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <SysTick_Handler+0x120>)
 8002950:	801a      	strh	r2, [r3, #0]
	if (softTimer5) 	softTimer5--;
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <SysTick_Handler+0x124>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <SysTick_Handler+0xce>
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <SysTick_Handler+0x124>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <SysTick_Handler+0x124>)
 8002968:	801a      	strh	r2, [r3, #0]
	if (whileTimer) 	whileTimer--;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <SysTick_Handler+0x128>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <SysTick_Handler+0xe6>
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <SysTick_Handler+0x128>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <SysTick_Handler+0x128>)
 8002980:	801a      	strh	r2, [r3, #0]

	sw_led_blinking();
 8002982:	f7ff f985 	bl	8001c90 <sw_led_blinking>
//	SW_IR_DECODED_EVENT();
	if (showMenuTimer == 0) {
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <SysTick_Handler+0x118>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <SysTick_Handler+0xfe>
		showMenuTimer = 10;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <SysTick_Handler+0x118>)
 8002992:	220a      	movs	r2, #10
 8002994:	801a      	strh	r2, [r3, #0]
		SW_KEYBOARD_EVENT();
 8002996:	f7fe f903 	bl	8000ba0 <SW_KEYBOARD_EVENT>
	}
//	key_handler();
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000052c 	.word	0x2000052c
 80029a4:	200005c4 	.word	0x200005c4
 80029a8:	200005b8 	.word	0x200005b8
 80029ac:	200005ba 	.word	0x200005ba
 80029b0:	2000052a 	.word	0x2000052a
 80029b4:	200005d0 	.word	0x200005d0
 80029b8:	200005be 	.word	0x200005be
 80029bc:	200005d2 	.word	0x200005d2
 80029c0:	200005d4 	.word	0x200005d4
 80029c4:	200005bc 	.word	0x200005bc

080029c8 <millis>:
/******************************************************************************/
uint32_t millis(void) {
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	return milis;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <millis+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000052c 	.word	0x2000052c

080029e0 <delay_ms>:
/*********************************************************/
/*********************************************************/
void delay_ms( uint16_t ms ) {
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
	delayTimer = ms;
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <delay_ms+0x2c>)
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	8013      	strh	r3, [r2, #0]
	while ( delayTimer ) {}
 80029f0:	bf00      	nop
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <delay_ms+0x2c>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1fa      	bne.n	80029f2 <delay_ms+0x12>
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	2000052a 	.word	0x2000052a

08002a10 <delay_us>:
/*********************************************************/

void delay_us( uint16_t us ) {
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
	  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <delay_us+0x4c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]
	  uint32_t au32_ticks = ( uint32_t ) SystemCoreClock / 1000000;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <delay_us+0x50>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <delay_us+0x54>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]
	  us *= au32_ticks;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	fb12 f303 	smulbb	r3, r2, r3
 8002a38:	80fb      	strh	r3, [r7, #6]
	  while ( (DWT->CYCCNT - au32_initial_ticks) < us - au32_ticks );
 8002a3a:	bf00      	nop
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <delay_us+0x4c>)
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	88f9      	ldrh	r1, [r7, #6]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1acb      	subs	r3, r1, r3
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3f6      	bcc.n	8002a3c <delay_us+0x2c>
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e0001000 	.word	0xe0001000
 8002a60:	20000000 	.word	0x20000000
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8002a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a6c:	f7fd fe0e 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a72:	e003      	b.n	8002a7c <LoopCopyDataInit>

08002a74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a7a:	3104      	adds	r1, #4

08002a7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a7c:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a84:	d3f6      	bcc.n	8002a74 <CopyDataInit>
	ldr	r2, =_sbss
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a88:	e002      	b.n	8002a90 <LoopFillZerobss>

08002a8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a8c:	f842 3b04 	str.w	r3, [r2], #4

08002a90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <LoopForever+0x16>)
	cmp	r2, r3
 8002a92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a94:	d3f9      	bcc.n	8002a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a96:	f000 f811 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a9a:	f7fd fbe5 	bl	8000268 <main>

08002a9e <LoopForever>:

LoopForever:
    b LoopForever
 8002a9e:	e7fe      	b.n	8002a9e <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8002aa0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002aa4:	08003f08 	.word	0x08003f08
	ldr	r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002aac:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8002ab0:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8002ab4:	200005e0 	.word	0x200005e0

08002ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab8:	e7fe      	b.n	8002ab8 <ADC1_2_IRQHandler>
	...

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4d0d      	ldr	r5, [pc, #52]	; (8002af4 <__libc_init_array+0x38>)
 8002ac0:	4c0d      	ldr	r4, [pc, #52]	; (8002af8 <__libc_init_array+0x3c>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	4d0b      	ldr	r5, [pc, #44]	; (8002afc <__libc_init_array+0x40>)
 8002ace:	4c0c      	ldr	r4, [pc, #48]	; (8002b00 <__libc_init_array+0x44>)
 8002ad0:	f000 fcbe 	bl	8003450 <_init>
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	2600      	movs	r6, #0
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08003ef8 	.word	0x08003ef8
 8002af8:	08003ef8 	.word	0x08003ef8
 8002afc:	08003ef8 	.word	0x08003ef8
 8002b00:	08003efc 	.word	0x08003efc

08002b04 <__itoa>:
 8002b04:	1e93      	subs	r3, r2, #2
 8002b06:	2b22      	cmp	r3, #34	; 0x22
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	d904      	bls.n	8002b18 <__itoa+0x14>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	700b      	strb	r3, [r1, #0]
 8002b12:	461c      	mov	r4, r3
 8002b14:	4620      	mov	r0, r4
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	2a0a      	cmp	r2, #10
 8002b1a:	d109      	bne.n	8002b30 <__itoa+0x2c>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	da07      	bge.n	8002b30 <__itoa+0x2c>
 8002b20:	232d      	movs	r3, #45	; 0x2d
 8002b22:	700b      	strb	r3, [r1, #0]
 8002b24:	4240      	negs	r0, r0
 8002b26:	2101      	movs	r1, #1
 8002b28:	4421      	add	r1, r4
 8002b2a:	f000 f805 	bl	8002b38 <__utoa>
 8002b2e:	e7f1      	b.n	8002b14 <__itoa+0x10>
 8002b30:	2100      	movs	r1, #0
 8002b32:	e7f9      	b.n	8002b28 <__itoa+0x24>

08002b34 <itoa>:
 8002b34:	f7ff bfe6 	b.w	8002b04 <__itoa>

08002b38 <__utoa>:
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	4c1f      	ldr	r4, [pc, #124]	; (8002bb8 <__utoa+0x80>)
 8002b3c:	b08b      	sub	sp, #44	; 0x2c
 8002b3e:	4605      	mov	r5, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	466e      	mov	r6, sp
 8002b44:	f104 0c20 	add.w	ip, r4, #32
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	6861      	ldr	r1, [r4, #4]
 8002b4c:	4637      	mov	r7, r6
 8002b4e:	c703      	stmia	r7!, {r0, r1}
 8002b50:	3408      	adds	r4, #8
 8002b52:	4564      	cmp	r4, ip
 8002b54:	463e      	mov	r6, r7
 8002b56:	d1f7      	bne.n	8002b48 <__utoa+0x10>
 8002b58:	7921      	ldrb	r1, [r4, #4]
 8002b5a:	7139      	strb	r1, [r7, #4]
 8002b5c:	1e91      	subs	r1, r2, #2
 8002b5e:	6820      	ldr	r0, [r4, #0]
 8002b60:	6038      	str	r0, [r7, #0]
 8002b62:	2922      	cmp	r1, #34	; 0x22
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	d904      	bls.n	8002b74 <__utoa+0x3c>
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	b00b      	add	sp, #44	; 0x2c
 8002b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b74:	1e58      	subs	r0, r3, #1
 8002b76:	4684      	mov	ip, r0
 8002b78:	fbb5 f7f2 	udiv	r7, r5, r2
 8002b7c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002b80:	fb02 5617 	mls	r6, r2, r7, r5
 8002b84:	4476      	add	r6, lr
 8002b86:	460c      	mov	r4, r1
 8002b88:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002b8c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002b90:	462e      	mov	r6, r5
 8002b92:	42b2      	cmp	r2, r6
 8002b94:	f101 0101 	add.w	r1, r1, #1
 8002b98:	463d      	mov	r5, r7
 8002b9a:	d9ed      	bls.n	8002b78 <__utoa+0x40>
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	545a      	strb	r2, [r3, r1]
 8002ba0:	1919      	adds	r1, r3, r4
 8002ba2:	1aa5      	subs	r5, r4, r2
 8002ba4:	42aa      	cmp	r2, r5
 8002ba6:	dae2      	bge.n	8002b6e <__utoa+0x36>
 8002ba8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002bac:	780e      	ldrb	r6, [r1, #0]
 8002bae:	7006      	strb	r6, [r0, #0]
 8002bb0:	3201      	adds	r2, #1
 8002bb2:	f801 5901 	strb.w	r5, [r1], #-1
 8002bb6:	e7f4      	b.n	8002ba2 <__utoa+0x6a>
 8002bb8:	08003eac 	.word	0x08003eac

08002bbc <powf>:
 8002bbc:	b508      	push	{r3, lr}
 8002bbe:	ed2d 8b04 	vpush	{d8-d9}
 8002bc2:	eeb0 9a40 	vmov.f32	s18, s0
 8002bc6:	eef0 8a60 	vmov.f32	s17, s1
 8002bca:	f000 f88f 	bl	8002cec <__ieee754_powf>
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <powf+0x120>)
 8002bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8002bda:	d012      	beq.n	8002c02 <powf+0x46>
 8002bdc:	eef4 8a68 	vcmp.f32	s17, s17
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d60d      	bvs.n	8002c02 <powf+0x46>
 8002be6:	eeb4 9a49 	vcmp.f32	s18, s18
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	d70d      	bvc.n	8002c0c <powf+0x50>
 8002bf0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002bfc:	bf08      	it	eq
 8002bfe:	eeb0 8a67 	vmoveq.f32	s16, s15
 8002c02:	eeb0 0a48 	vmov.f32	s0, s16
 8002c06:	ecbd 8b04 	vpop	{d8-d9}
 8002c0a:	bd08      	pop	{r3, pc}
 8002c0c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8002ce0 <powf+0x124>
 8002c10:	eeb4 9a69 	vcmp.f32	s18, s19
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	d116      	bne.n	8002c48 <powf+0x8c>
 8002c1a:	eef4 8a69 	vcmp.f32	s17, s19
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d057      	beq.n	8002cd4 <powf+0x118>
 8002c24:	eeb0 0a68 	vmov.f32	s0, s17
 8002c28:	f000 fb2a 	bl	8003280 <finitef>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d0e8      	beq.n	8002c02 <powf+0x46>
 8002c30:	eef4 8ae9 	vcmpe.f32	s17, s19
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	d5e3      	bpl.n	8002c02 <powf+0x46>
 8002c3a:	f000 fc03 	bl	8003444 <__errno>
 8002c3e:	2321      	movs	r3, #33	; 0x21
 8002c40:	6003      	str	r3, [r0, #0]
 8002c42:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8002ce4 <powf+0x128>
 8002c46:	e7dc      	b.n	8002c02 <powf+0x46>
 8002c48:	f000 fb1a 	bl	8003280 <finitef>
 8002c4c:	bb50      	cbnz	r0, 8002ca4 <powf+0xe8>
 8002c4e:	eeb0 0a49 	vmov.f32	s0, s18
 8002c52:	f000 fb15 	bl	8003280 <finitef>
 8002c56:	b328      	cbz	r0, 8002ca4 <powf+0xe8>
 8002c58:	eeb0 0a68 	vmov.f32	s0, s17
 8002c5c:	f000 fb10 	bl	8003280 <finitef>
 8002c60:	b300      	cbz	r0, 8002ca4 <powf+0xe8>
 8002c62:	eeb4 8a48 	vcmp.f32	s16, s16
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	d706      	bvc.n	8002c7a <powf+0xbe>
 8002c6c:	f000 fbea 	bl	8003444 <__errno>
 8002c70:	2321      	movs	r3, #33	; 0x21
 8002c72:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8002c76:	6003      	str	r3, [r0, #0]
 8002c78:	e7c3      	b.n	8002c02 <powf+0x46>
 8002c7a:	f000 fbe3 	bl	8003444 <__errno>
 8002c7e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002c82:	2322      	movs	r3, #34	; 0x22
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	6003      	str	r3, [r0, #0]
 8002c8a:	d508      	bpl.n	8002c9e <powf+0xe2>
 8002c8c:	eeb0 0a68 	vmov.f32	s0, s17
 8002c90:	f000 fb0a 	bl	80032a8 <rintf>
 8002c94:	eeb4 0a68 	vcmp.f32	s0, s17
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d1d1      	bne.n	8002c42 <powf+0x86>
 8002c9e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8002ce8 <powf+0x12c>
 8002ca2:	e7ae      	b.n	8002c02 <powf+0x46>
 8002ca4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cac:	d1a9      	bne.n	8002c02 <powf+0x46>
 8002cae:	eeb0 0a49 	vmov.f32	s0, s18
 8002cb2:	f000 fae5 	bl	8003280 <finitef>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d0a3      	beq.n	8002c02 <powf+0x46>
 8002cba:	eeb0 0a68 	vmov.f32	s0, s17
 8002cbe:	f000 fadf 	bl	8003280 <finitef>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d09d      	beq.n	8002c02 <powf+0x46>
 8002cc6:	f000 fbbd 	bl	8003444 <__errno>
 8002cca:	2322      	movs	r3, #34	; 0x22
 8002ccc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8002ce0 <powf+0x124>
 8002cd0:	6003      	str	r3, [r0, #0]
 8002cd2:	e796      	b.n	8002c02 <powf+0x46>
 8002cd4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002cd8:	e793      	b.n	8002c02 <powf+0x46>
 8002cda:	bf00      	nop
 8002cdc:	20000084 	.word	0x20000084
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	ff800000 	.word	0xff800000
 8002ce8:	7f800000 	.word	0x7f800000

08002cec <__ieee754_powf>:
 8002cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf0:	ee10 5a90 	vmov	r5, s1
 8002cf4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8002cf8:	ed2d 8b02 	vpush	{d8}
 8002cfc:	eeb0 8a40 	vmov.f32	s16, s0
 8002d00:	eef0 8a60 	vmov.f32	s17, s1
 8002d04:	f000 8291 	beq.w	800322a <__ieee754_powf+0x53e>
 8002d08:	ee10 8a10 	vmov	r8, s0
 8002d0c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8002d10:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002d14:	dc06      	bgt.n	8002d24 <__ieee754_powf+0x38>
 8002d16:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002d1a:	dd0a      	ble.n	8002d32 <__ieee754_powf+0x46>
 8002d1c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002d20:	f000 8283 	beq.w	800322a <__ieee754_powf+0x53e>
 8002d24:	ecbd 8b02 	vpop	{d8}
 8002d28:	48d8      	ldr	r0, [pc, #864]	; (800308c <__ieee754_powf+0x3a0>)
 8002d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2e:	f000 bab5 	b.w	800329c <nanf>
 8002d32:	f1b8 0f00 	cmp.w	r8, #0
 8002d36:	da1f      	bge.n	8002d78 <__ieee754_powf+0x8c>
 8002d38:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8002d3c:	da2e      	bge.n	8002d9c <__ieee754_powf+0xb0>
 8002d3e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002d42:	f2c0 827b 	blt.w	800323c <__ieee754_powf+0x550>
 8002d46:	15fb      	asrs	r3, r7, #23
 8002d48:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002d4c:	fa47 f603 	asr.w	r6, r7, r3
 8002d50:	fa06 f303 	lsl.w	r3, r6, r3
 8002d54:	42bb      	cmp	r3, r7
 8002d56:	f040 8271 	bne.w	800323c <__ieee754_powf+0x550>
 8002d5a:	f006 0601 	and.w	r6, r6, #1
 8002d5e:	f1c6 0602 	rsb	r6, r6, #2
 8002d62:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002d66:	d120      	bne.n	8002daa <__ieee754_powf+0xbe>
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	f280 8264 	bge.w	8003236 <__ieee754_powf+0x54a>
 8002d6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d72:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002d76:	e00d      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002d78:	2600      	movs	r6, #0
 8002d7a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002d7e:	d1f0      	bne.n	8002d62 <__ieee754_powf+0x76>
 8002d80:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002d84:	f000 8251 	beq.w	800322a <__ieee754_powf+0x53e>
 8002d88:	dd0a      	ble.n	8002da0 <__ieee754_powf+0xb4>
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	f280 8250 	bge.w	8003230 <__ieee754_powf+0x544>
 8002d90:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8003090 <__ieee754_powf+0x3a4>
 8002d94:	ecbd 8b02 	vpop	{d8}
 8002d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9c:	2602      	movs	r6, #2
 8002d9e:	e7ec      	b.n	8002d7a <__ieee754_powf+0x8e>
 8002da0:	2d00      	cmp	r5, #0
 8002da2:	daf5      	bge.n	8002d90 <__ieee754_powf+0xa4>
 8002da4:	eeb1 0a68 	vneg.f32	s0, s17
 8002da8:	e7f4      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002daa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8002dae:	d102      	bne.n	8002db6 <__ieee754_powf+0xca>
 8002db0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002db4:	e7ee      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002db6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8002dba:	eeb0 0a48 	vmov.f32	s0, s16
 8002dbe:	d108      	bne.n	8002dd2 <__ieee754_powf+0xe6>
 8002dc0:	f1b8 0f00 	cmp.w	r8, #0
 8002dc4:	db05      	blt.n	8002dd2 <__ieee754_powf+0xe6>
 8002dc6:	ecbd 8b02 	vpop	{d8}
 8002dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dce:	f000 ba4d 	b.w	800326c <__ieee754_sqrtf>
 8002dd2:	f000 fa4e 	bl	8003272 <fabsf>
 8002dd6:	b124      	cbz	r4, 8002de2 <__ieee754_powf+0xf6>
 8002dd8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8002ddc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002de0:	d117      	bne.n	8002e12 <__ieee754_powf+0x126>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	bfbc      	itt	lt
 8002de6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8002dea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002dee:	f1b8 0f00 	cmp.w	r8, #0
 8002df2:	dacf      	bge.n	8002d94 <__ieee754_powf+0xa8>
 8002df4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8002df8:	ea54 0306 	orrs.w	r3, r4, r6
 8002dfc:	d104      	bne.n	8002e08 <__ieee754_powf+0x11c>
 8002dfe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002e02:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002e06:	e7c5      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002e08:	2e01      	cmp	r6, #1
 8002e0a:	d1c3      	bne.n	8002d94 <__ieee754_powf+0xa8>
 8002e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8002e10:	e7c0      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002e12:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8002e16:	3801      	subs	r0, #1
 8002e18:	ea56 0300 	orrs.w	r3, r6, r0
 8002e1c:	d104      	bne.n	8002e28 <__ieee754_powf+0x13c>
 8002e1e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002e22:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002e26:	e7b5      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002e28:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8002e2c:	dd6b      	ble.n	8002f06 <__ieee754_powf+0x21a>
 8002e2e:	4b99      	ldr	r3, [pc, #612]	; (8003094 <__ieee754_powf+0x3a8>)
 8002e30:	429c      	cmp	r4, r3
 8002e32:	dc06      	bgt.n	8002e42 <__ieee754_powf+0x156>
 8002e34:	2d00      	cmp	r5, #0
 8002e36:	daab      	bge.n	8002d90 <__ieee754_powf+0xa4>
 8002e38:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8003098 <__ieee754_powf+0x3ac>
 8002e3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002e40:	e7a8      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002e42:	4b96      	ldr	r3, [pc, #600]	; (800309c <__ieee754_powf+0x3b0>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	dd02      	ble.n	8002e4e <__ieee754_powf+0x162>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	dcf5      	bgt.n	8002e38 <__ieee754_powf+0x14c>
 8002e4c:	e7a0      	b.n	8002d90 <__ieee754_powf+0xa4>
 8002e4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002e56:	eddf 6a92 	vldr	s13, [pc, #584]	; 80030a0 <__ieee754_powf+0x3b4>
 8002e5a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002e5e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002e62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002e66:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002e6a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e72:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80030a4 <__ieee754_powf+0x3b8>
 8002e76:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8002e7a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80030a8 <__ieee754_powf+0x3bc>
 8002e7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002e82:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80030ac <__ieee754_powf+0x3c0>
 8002e86:	eef0 6a67 	vmov.f32	s13, s15
 8002e8a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8002e8e:	ee16 3a90 	vmov	r3, s13
 8002e92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002e96:	f023 030f 	bic.w	r3, r3, #15
 8002e9a:	ee00 3a90 	vmov	s1, r3
 8002e9e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8002ea2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002ea6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8002eaa:	f025 050f 	bic.w	r5, r5, #15
 8002eae:	ee07 5a10 	vmov	s14, r5
 8002eb2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002eb6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8002ec2:	3e01      	subs	r6, #1
 8002ec4:	ea56 0200 	orrs.w	r2, r6, r0
 8002ec8:	ee07 5a10 	vmov	s14, r5
 8002ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002ed4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8002ed8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002edc:	ee17 4a10 	vmov	r4, s14
 8002ee0:	bf08      	it	eq
 8002ee2:	eeb0 8a40 	vmoveq.f32	s16, s0
 8002ee6:	2c00      	cmp	r4, #0
 8002ee8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002eec:	f340 8184 	ble.w	80031f8 <__ieee754_powf+0x50c>
 8002ef0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8002ef4:	f340 80fc 	ble.w	80030f0 <__ieee754_powf+0x404>
 8002ef8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003098 <__ieee754_powf+0x3ac>
 8002efc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8002f00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002f04:	e746      	b.n	8002d94 <__ieee754_powf+0xa8>
 8002f06:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8002f0a:	bf01      	itttt	eq
 8002f0c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80030b0 <__ieee754_powf+0x3c4>
 8002f10:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8002f14:	f06f 0217 	mvneq.w	r2, #23
 8002f18:	ee17 4a90 	vmoveq	r4, s15
 8002f1c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8002f20:	bf18      	it	ne
 8002f22:	2200      	movne	r2, #0
 8002f24:	3b7f      	subs	r3, #127	; 0x7f
 8002f26:	4413      	add	r3, r2
 8002f28:	4a62      	ldr	r2, [pc, #392]	; (80030b4 <__ieee754_powf+0x3c8>)
 8002f2a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8002f2e:	4294      	cmp	r4, r2
 8002f30:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8002f34:	dd06      	ble.n	8002f44 <__ieee754_powf+0x258>
 8002f36:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <__ieee754_powf+0x3cc>)
 8002f38:	4294      	cmp	r4, r2
 8002f3a:	f340 80a4 	ble.w	8003086 <__ieee754_powf+0x39a>
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8002f44:	2400      	movs	r4, #0
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <__ieee754_powf+0x3d0>)
 8002f48:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8002f4c:	ee07 1a90 	vmov	s15, r1
 8002f50:	ed92 7a00 	vldr	s14, [r2]
 8002f54:	4a5a      	ldr	r2, [pc, #360]	; (80030c0 <__ieee754_powf+0x3d4>)
 8002f56:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002f5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002f5e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8002f62:	1049      	asrs	r1, r1, #1
 8002f64:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8002f68:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8002f6c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8002f70:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8002f74:	ee06 1a10 	vmov	s12, r1
 8002f78:	ee65 4a26 	vmul.f32	s9, s10, s13
 8002f7c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8002f80:	ee14 7a90 	vmov	r7, s9
 8002f84:	4017      	ands	r7, r2
 8002f86:	ee05 7a90 	vmov	s11, r7
 8002f8a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8002f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f92:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80030c4 <__ieee754_powf+0x3d8>
 8002f96:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8002f9a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8002f9e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8002fa2:	eddf 6a49 	vldr	s13, [pc, #292]	; 80030c8 <__ieee754_powf+0x3dc>
 8002fa6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002faa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030cc <__ieee754_powf+0x3e0>
 8002fae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002fb2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80030a0 <__ieee754_powf+0x3b4>
 8002fb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002fba:	eddf 6a45 	vldr	s13, [pc, #276]	; 80030d0 <__ieee754_powf+0x3e4>
 8002fbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8002fc2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80030d4 <__ieee754_powf+0x3e8>
 8002fc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002fca:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8002fce:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8002fd2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002fd6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8002fda:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8002fde:	eef0 7a45 	vmov.f32	s15, s10
 8002fe2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8002fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fea:	ee17 1a90 	vmov	r1, s15
 8002fee:	4011      	ands	r1, r2
 8002ff0:	ee07 1a90 	vmov	s15, r1
 8002ff4:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8002ff8:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8002ffc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003000:	ee27 7a24 	vmul.f32	s14, s14, s9
 8003004:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003008:	eeb0 6a47 	vmov.f32	s12, s14
 800300c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8003010:	ee16 1a10 	vmov	r1, s12
 8003014:	4011      	ands	r1, r2
 8003016:	ee06 1a90 	vmov	s13, r1
 800301a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800301e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80030d8 <__ieee754_powf+0x3ec>
 8003022:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030dc <__ieee754_powf+0x3f0>
 8003026:	ee37 7a66 	vsub.f32	s14, s14, s13
 800302a:	ee06 1a10 	vmov	s12, r1
 800302e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003032:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80030e0 <__ieee754_powf+0x3f4>
 8003036:	492b      	ldr	r1, [pc, #172]	; (80030e4 <__ieee754_powf+0x3f8>)
 8003038:	eea6 7a27 	vfma.f32	s14, s12, s15
 800303c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003040:	edd1 7a00 	vldr	s15, [r1]
 8003044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <__ieee754_powf+0x3fc>)
 800304e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003052:	eef0 7a47 	vmov.f32	s15, s14
 8003056:	eee6 7a25 	vfma.f32	s15, s12, s11
 800305a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800305e:	edd4 0a00 	vldr	s1, [r4]
 8003062:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8003066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800306a:	ee17 3a90 	vmov	r3, s15
 800306e:	4013      	ands	r3, r2
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003078:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800307c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8003080:	ee77 7a66 	vsub.f32	s15, s14, s13
 8003084:	e70f      	b.n	8002ea6 <__ieee754_powf+0x1ba>
 8003086:	2401      	movs	r4, #1
 8003088:	e75d      	b.n	8002f46 <__ieee754_powf+0x25a>
 800308a:	bf00      	nop
 800308c:	08003ed0 	.word	0x08003ed0
 8003090:	00000000 	.word	0x00000000
 8003094:	3f7ffff7 	.word	0x3f7ffff7
 8003098:	7149f2ca 	.word	0x7149f2ca
 800309c:	3f800007 	.word	0x3f800007
 80030a0:	3eaaaaab 	.word	0x3eaaaaab
 80030a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80030a8:	36eca570 	.word	0x36eca570
 80030ac:	3fb8aa00 	.word	0x3fb8aa00
 80030b0:	4b800000 	.word	0x4b800000
 80030b4:	001cc471 	.word	0x001cc471
 80030b8:	005db3d6 	.word	0x005db3d6
 80030bc:	08003ed4 	.word	0x08003ed4
 80030c0:	fffff000 	.word	0xfffff000
 80030c4:	3e6c3255 	.word	0x3e6c3255
 80030c8:	3e53f142 	.word	0x3e53f142
 80030cc:	3e8ba305 	.word	0x3e8ba305
 80030d0:	3edb6db7 	.word	0x3edb6db7
 80030d4:	3f19999a 	.word	0x3f19999a
 80030d8:	3f76384f 	.word	0x3f76384f
 80030dc:	3f763800 	.word	0x3f763800
 80030e0:	369dc3a0 	.word	0x369dc3a0
 80030e4:	08003ee4 	.word	0x08003ee4
 80030e8:	08003edc 	.word	0x08003edc
 80030ec:	3338aa3c 	.word	0x3338aa3c
 80030f0:	f040 8092 	bne.w	8003218 <__ieee754_powf+0x52c>
 80030f4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80030ec <__ieee754_powf+0x400>
 80030f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030fc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8003100:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	f73f aef6 	bgt.w	8002ef8 <__ieee754_powf+0x20c>
 800310c:	15db      	asrs	r3, r3, #23
 800310e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8003112:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003116:	4103      	asrs	r3, r0
 8003118:	4423      	add	r3, r4
 800311a:	4949      	ldr	r1, [pc, #292]	; (8003240 <__ieee754_powf+0x554>)
 800311c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003120:	3a7f      	subs	r2, #127	; 0x7f
 8003122:	4111      	asrs	r1, r2
 8003124:	ea23 0101 	bic.w	r1, r3, r1
 8003128:	ee07 1a10 	vmov	s14, r1
 800312c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8003130:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003134:	f1c2 0217 	rsb	r2, r2, #23
 8003138:	4110      	asrs	r0, r2
 800313a:	2c00      	cmp	r4, #0
 800313c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003140:	bfb8      	it	lt
 8003142:	4240      	neglt	r0, r0
 8003144:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8003148:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8003244 <__ieee754_powf+0x558>
 800314c:	ee17 3a10 	vmov	r3, s14
 8003150:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003154:	f023 030f 	bic.w	r3, r3, #15
 8003158:	ee07 3a10 	vmov	s14, r3
 800315c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003160:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8003164:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003248 <__ieee754_powf+0x55c>
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8003170:	eddf 6a36 	vldr	s13, [pc, #216]	; 800324c <__ieee754_powf+0x560>
 8003174:	eeb0 0a67 	vmov.f32	s0, s15
 8003178:	eea7 0a26 	vfma.f32	s0, s14, s13
 800317c:	eeb0 6a40 	vmov.f32	s12, s0
 8003180:	eea7 6a66 	vfms.f32	s12, s14, s13
 8003184:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003188:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800318c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8003250 <__ieee754_powf+0x564>
 8003190:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003254 <__ieee754_powf+0x568>
 8003194:	eea7 6a26 	vfma.f32	s12, s14, s13
 8003198:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003258 <__ieee754_powf+0x56c>
 800319c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80031a0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800325c <__ieee754_powf+0x570>
 80031a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80031a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003260 <__ieee754_powf+0x574>
 80031ac:	eee6 6a07 	vfma.f32	s13, s12, s14
 80031b0:	eeb0 6a40 	vmov.f32	s12, s0
 80031b4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80031b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80031bc:	eeb0 7a46 	vmov.f32	s14, s12
 80031c0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80031c4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80031c8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80031cc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80031d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80031d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80031dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80031e0:	ee10 3a10 	vmov	r3, s0
 80031e4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80031e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ec:	da1a      	bge.n	8003224 <__ieee754_powf+0x538>
 80031ee:	f000 f8b7 	bl	8003360 <scalbnf>
 80031f2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80031f6:	e5cd      	b.n	8002d94 <__ieee754_powf+0xa8>
 80031f8:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <__ieee754_powf+0x578>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	dd02      	ble.n	8003204 <__ieee754_powf+0x518>
 80031fe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003268 <__ieee754_powf+0x57c>
 8003202:	e67b      	b.n	8002efc <__ieee754_powf+0x210>
 8003204:	d108      	bne.n	8003218 <__ieee754_powf+0x52c>
 8003206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800320a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	f6ff af7b 	blt.w	800310c <__ieee754_powf+0x420>
 8003216:	e7f2      	b.n	80031fe <__ieee754_powf+0x512>
 8003218:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800321c:	f73f af76 	bgt.w	800310c <__ieee754_powf+0x420>
 8003220:	2000      	movs	r0, #0
 8003222:	e78f      	b.n	8003144 <__ieee754_powf+0x458>
 8003224:	ee00 3a10 	vmov	s0, r3
 8003228:	e7e3      	b.n	80031f2 <__ieee754_powf+0x506>
 800322a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800322e:	e5b1      	b.n	8002d94 <__ieee754_powf+0xa8>
 8003230:	eeb0 0a68 	vmov.f32	s0, s17
 8003234:	e5ae      	b.n	8002d94 <__ieee754_powf+0xa8>
 8003236:	eeb0 0a48 	vmov.f32	s0, s16
 800323a:	e5ab      	b.n	8002d94 <__ieee754_powf+0xa8>
 800323c:	2600      	movs	r6, #0
 800323e:	e590      	b.n	8002d62 <__ieee754_powf+0x76>
 8003240:	007fffff 	.word	0x007fffff
 8003244:	3f317218 	.word	0x3f317218
 8003248:	35bfbe8c 	.word	0x35bfbe8c
 800324c:	3f317200 	.word	0x3f317200
 8003250:	3331bb4c 	.word	0x3331bb4c
 8003254:	b5ddea0e 	.word	0xb5ddea0e
 8003258:	388ab355 	.word	0x388ab355
 800325c:	bb360b61 	.word	0xbb360b61
 8003260:	3e2aaaab 	.word	0x3e2aaaab
 8003264:	43160000 	.word	0x43160000
 8003268:	0da24260 	.word	0x0da24260

0800326c <__ieee754_sqrtf>:
 800326c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003270:	4770      	bx	lr

08003272 <fabsf>:
 8003272:	ee10 3a10 	vmov	r3, s0
 8003276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800327a:	ee00 3a10 	vmov	s0, r3
 800327e:	4770      	bx	lr

08003280 <finitef>:
 8003280:	b082      	sub	sp, #8
 8003282:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003286:	9801      	ldr	r0, [sp, #4]
 8003288:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800328c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8003290:	bfac      	ite	ge
 8003292:	2000      	movge	r0, #0
 8003294:	2001      	movlt	r0, #1
 8003296:	b002      	add	sp, #8
 8003298:	4770      	bx	lr
	...

0800329c <nanf>:
 800329c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80032a4 <nanf+0x8>
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	7fc00000 	.word	0x7fc00000

080032a8 <rintf>:
 80032a8:	ee10 2a10 	vmov	r2, s0
 80032ac:	b513      	push	{r0, r1, r4, lr}
 80032ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80032b2:	397f      	subs	r1, #127	; 0x7f
 80032b4:	2916      	cmp	r1, #22
 80032b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80032ba:	dc47      	bgt.n	800334c <rintf+0xa4>
 80032bc:	b32b      	cbz	r3, 800330a <rintf+0x62>
 80032be:	2900      	cmp	r1, #0
 80032c0:	ee10 3a10 	vmov	r3, s0
 80032c4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80032c8:	da21      	bge.n	800330e <rintf+0x66>
 80032ca:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80032ce:	425b      	negs	r3, r3
 80032d0:	4921      	ldr	r1, [pc, #132]	; (8003358 <rintf+0xb0>)
 80032d2:	0a5b      	lsrs	r3, r3, #9
 80032d4:	0d12      	lsrs	r2, r2, #20
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	0512      	lsls	r2, r2, #20
 80032dc:	4313      	orrs	r3, r2
 80032de:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	edd1 6a00 	vldr	s13, [r1]
 80032ea:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80032ee:	ed8d 7a01 	vstr	s14, [sp, #4]
 80032f2:	eddd 7a01 	vldr	s15, [sp, #4]
 80032f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003302:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8003306:	ee00 3a10 	vmov	s0, r3
 800330a:	b002      	add	sp, #8
 800330c:	bd10      	pop	{r4, pc}
 800330e:	4a13      	ldr	r2, [pc, #76]	; (800335c <rintf+0xb4>)
 8003310:	410a      	asrs	r2, r1
 8003312:	4213      	tst	r3, r2
 8003314:	d0f9      	beq.n	800330a <rintf+0x62>
 8003316:	0854      	lsrs	r4, r2, #1
 8003318:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800331c:	d006      	beq.n	800332c <rintf+0x84>
 800331e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003322:	ea23 0304 	bic.w	r3, r3, r4
 8003326:	fa42 f101 	asr.w	r1, r2, r1
 800332a:	430b      	orrs	r3, r1
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <rintf+0xb0>)
 800332e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003332:	ed90 7a00 	vldr	s14, [r0]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333e:	edcd 7a01 	vstr	s15, [sp, #4]
 8003342:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003346:	ee30 0a47 	vsub.f32	s0, s0, s14
 800334a:	e7de      	b.n	800330a <rintf+0x62>
 800334c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003350:	d3db      	bcc.n	800330a <rintf+0x62>
 8003352:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003356:	e7d8      	b.n	800330a <rintf+0x62>
 8003358:	08003eec 	.word	0x08003eec
 800335c:	007fffff 	.word	0x007fffff

08003360 <scalbnf>:
 8003360:	ee10 3a10 	vmov	r3, s0
 8003364:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003368:	d025      	beq.n	80033b6 <scalbnf+0x56>
 800336a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800336e:	d302      	bcc.n	8003376 <scalbnf+0x16>
 8003370:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003374:	4770      	bx	lr
 8003376:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800337a:	d122      	bne.n	80033c2 <scalbnf+0x62>
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <scalbnf+0xc8>)
 800337e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800342c <scalbnf+0xcc>
 8003382:	4298      	cmp	r0, r3
 8003384:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003388:	db16      	blt.n	80033b8 <scalbnf+0x58>
 800338a:	ee10 3a10 	vmov	r3, s0
 800338e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003392:	3a19      	subs	r2, #25
 8003394:	4402      	add	r2, r0
 8003396:	2afe      	cmp	r2, #254	; 0xfe
 8003398:	dd15      	ble.n	80033c6 <scalbnf+0x66>
 800339a:	ee10 3a10 	vmov	r3, s0
 800339e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003430 <scalbnf+0xd0>
 80033a2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003434 <scalbnf+0xd4>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	eeb0 7a67 	vmov.f32	s14, s15
 80033ac:	bfb8      	it	lt
 80033ae:	eef0 7a66 	vmovlt.f32	s15, s13
 80033b2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80033b6:	4770      	bx	lr
 80033b8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003438 <scalbnf+0xd8>
 80033bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80033c0:	4770      	bx	lr
 80033c2:	0dd2      	lsrs	r2, r2, #23
 80033c4:	e7e6      	b.n	8003394 <scalbnf+0x34>
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	dd06      	ble.n	80033d8 <scalbnf+0x78>
 80033ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80033ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80033d2:	ee00 3a10 	vmov	s0, r3
 80033d6:	4770      	bx	lr
 80033d8:	f112 0f16 	cmn.w	r2, #22
 80033dc:	da1a      	bge.n	8003414 <scalbnf+0xb4>
 80033de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80033e2:	4298      	cmp	r0, r3
 80033e4:	ee10 3a10 	vmov	r3, s0
 80033e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ec:	dd0a      	ble.n	8003404 <scalbnf+0xa4>
 80033ee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003430 <scalbnf+0xd0>
 80033f2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003434 <scalbnf+0xd4>
 80033f6:	eef0 7a40 	vmov.f32	s15, s0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf18      	it	ne
 80033fe:	eeb0 0a47 	vmovne.f32	s0, s14
 8003402:	e7db      	b.n	80033bc <scalbnf+0x5c>
 8003404:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003438 <scalbnf+0xd8>
 8003408:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800343c <scalbnf+0xdc>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	2b00      	cmp	r3, #0
 8003412:	e7f3      	b.n	80033fc <scalbnf+0x9c>
 8003414:	3219      	adds	r2, #25
 8003416:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800341a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800341e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003440 <scalbnf+0xe0>
 8003422:	ee07 3a10 	vmov	s14, r3
 8003426:	e7c4      	b.n	80033b2 <scalbnf+0x52>
 8003428:	ffff3cb0 	.word	0xffff3cb0
 800342c:	4c000000 	.word	0x4c000000
 8003430:	7149f2ca 	.word	0x7149f2ca
 8003434:	f149f2ca 	.word	0xf149f2ca
 8003438:	0da24260 	.word	0x0da24260
 800343c:	8da24260 	.word	0x8da24260
 8003440:	33000000 	.word	0x33000000

08003444 <__errno>:
 8003444:	4b01      	ldr	r3, [pc, #4]	; (800344c <__errno+0x8>)
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000020 	.word	0x20000020

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr

Disassembly of section ccmram:

08003468 <graphic_set_pixel_RAM>:
}
/***************************************************************************************/

/*************************************************************************************************/
// Funkcje oparte na rysowaniu pojedynczego piksela
void graphic_set_pixel_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, const T_COLOR *color ) {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	4613      	mov	r3, r2
 8003478:	813b      	strh	r3, [r7, #8]
	  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800347a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800347e:	2b00      	cmp	r3, #0
 8003480:	db79      	blt.n	8003576 <graphic_set_pixel_RAM+0x10e>
 8003482:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003486:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <graphic_set_pixel_RAM+0x11c>)
 8003488:	8812      	ldrh	r2, [r2, #0]
 800348a:	4293      	cmp	r3, r2
 800348c:	da73      	bge.n	8003576 <graphic_set_pixel_RAM+0x10e>
 800348e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db6f      	blt.n	8003576 <graphic_set_pixel_RAM+0x10e>
 8003496:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800349a:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <graphic_set_pixel_RAM+0x120>)
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	4293      	cmp	r3, r2
 80034a0:	da69      	bge.n	8003576 <graphic_set_pixel_RAM+0x10e>
	    return;
	  if ( *color )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d031      	beq.n	800350e <graphic_set_pixel_RAM+0xa6>
		  buffer[ x + (y/8)*_width ] |=  (1<<(y%8)); // zapal pixel
 80034aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80034ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da00      	bge.n	80034b8 <graphic_set_pixel_RAM+0x50>
 80034b6:	3307      	adds	r3, #7
 80034b8:	10db      	asrs	r3, r3, #3
 80034ba:	b218      	sxth	r0, r3
 80034bc:	4601      	mov	r1, r0
 80034be:	4b31      	ldr	r3, [pc, #196]	; (8003584 <graphic_set_pixel_RAM+0x11c>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	fb03 f301 	mul.w	r3, r3, r1
 80034c6:	4413      	add	r3, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034d8:	4259      	negs	r1, r3
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	f001 0107 	and.w	r1, r1, #7
 80034e2:	bf58      	it	pl
 80034e4:	424b      	negpl	r3, r1
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	408b      	lsls	r3, r1
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b259      	sxtb	r1, r3
 80034f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <graphic_set_pixel_RAM+0x11c>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	fb03 f300 	mul.w	r3, r3, r0
 8003500:	4413      	add	r3, r2
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	b2ca      	uxtb	r2, r1
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e034      	b.n	8003578 <graphic_set_pixel_RAM+0x110>
	  else
		  buffer[ x + (y/8)*_width ] &= ~(1<<(y%8)); // zgaś pixel
 800350e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003512:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	da00      	bge.n	800351c <graphic_set_pixel_RAM+0xb4>
 800351a:	3307      	adds	r3, #7
 800351c:	10db      	asrs	r3, r3, #3
 800351e:	b218      	sxth	r0, r3
 8003520:	4601      	mov	r1, r0
 8003522:	4b18      	ldr	r3, [pc, #96]	; (8003584 <graphic_set_pixel_RAM+0x11c>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	fb03 f301 	mul.w	r3, r3, r1
 800352a:	4413      	add	r3, r2
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	b25a      	sxtb	r2, r3
 8003538:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800353c:	4259      	negs	r1, r3
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	f001 0107 	and.w	r1, r1, #7
 8003546:	bf58      	it	pl
 8003548:	424b      	negpl	r3, r1
 800354a:	b21b      	sxth	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	2301      	movs	r3, #1
 8003550:	408b      	lsls	r3, r1
 8003552:	b25b      	sxtb	r3, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	b25b      	sxtb	r3, r3
 8003558:	4013      	ands	r3, r2
 800355a:	b259      	sxtb	r1, r3
 800355c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <graphic_set_pixel_RAM+0x11c>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	fb03 f300 	mul.w	r3, r3, r0
 8003568:	4413      	add	r3, r2
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	b2ca      	uxtb	r2, r1
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e000      	b.n	8003578 <graphic_set_pixel_RAM+0x110>
	    return;
 8003576:	bf00      	nop
}
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000014 	.word	0x20000014
 8003588:	20000016 	.word	0x20000016

0800358c <TIM1_UP_TIM16_IRQHandler>:
INTERRUPT CCMRAM void TIM1_UP_TIM16_IRQHandler(void) {	// Timer2 Interrupt Handler
 800358c:	4668      	mov	r0, sp
 800358e:	f020 0107 	bic.w	r1, r0, #7
 8003592:	468d      	mov	sp, r1
 8003594:	b589      	push	{r0, r3, r7, lr}
 8003596:	af00      	add	r7, sp, #0
	if ( TIM16->SR & TIM_SR_UIF ) {
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <TIM1_UP_TIM16_IRQHandler+0x4e>
		TIM16->SR &= ~TIM_SR_UIF;						// Update interrupt Flag
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6113      	str	r3, [r2, #16]
		if (refreshScreen == 0) return;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <TIM1_UP_TIM16_IRQHandler+0x4c>
		ActualDMABuffer = TextBuffer;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <TIM1_UP_TIM16_IRQHandler+0x60>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80035c0:	6013      	str	r3, [r2, #0]
		sw_ssd1306_display();
 80035c2:	f7fe fbe5 	bl	8001d90 <sw_ssd1306_display>
		refreshScreen = 0;
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
		gpio_pin_XOR( DEBUG_PORT1, DEBUG_PIN1 );
 80035cc:	2102      	movs	r1, #2
 80035ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d2:	f7fe fac2 	bl	8001b5a <gpio_pin_XOR>
 80035d6:	e000      	b.n	80035da <TIM1_UP_TIM16_IRQHandler+0x4e>
		if (refreshScreen == 0) return;
 80035d8:	bf00      	nop
}
 80035da:	46bd      	mov	sp, r7
 80035dc:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80035e0:	4685      	mov	sp, r0
 80035e2:	4770      	bx	lr
 80035e4:	40014400 	.word	0x40014400
 80035e8:	20000520 	.word	0x20000520
 80035ec:	2000000c 	.word	0x2000000c
 80035f0:	20000524 	.word	0x20000524
