
STM32L412KBx_CID_REG_SSD1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 ccmram        0000018c  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000974  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005168  08005168  00020088  2**0
                  CONTENTS
  5 .ARM          00000000  08005168  08005168  00020088  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005168  08005168  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000088  20000000  08005178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004fc  20000088  08005200  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  08005200  00020584  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168ff  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278d  00000000  00000000  000369b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  00039148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  00039960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013862  00000000  00000000  0003a038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b801  00000000  00000000  0004d89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006929c  00000000  00000000  0005909b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c2337  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000210c  00000000  00000000  000c238c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800464c 	.word	0x0800464c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800464c 	.word	0x0800464c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <main>:
uint16_t ambilightAverage;
void my_gesture( TGSNR last_gs, TGSNR second_gs, TGSNR first_gs );

FONT_INFO CurrentFont;

int main(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b098      	sub	sp, #96	; 0x60
 8000b4c:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000b4e:	f001 fd05 	bl	800255c <SystemClock_Config>
	RCC_gpio_init();
 8000b52:	f002 f8dd 	bl	8002d10 <RCC_gpio_init>
	sw_led_debug_init();
 8000b56:	f002 f935 	bl	8002dc4 <sw_led_debug_init>
	sw_softTimers_init( 1, MICRO_SEC );
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f002 feb9 	bl	80038d4 <sw_softTimers_init>

	delay_ms(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f002 ff52 	bl	8003a0c <delay_ms>
	sw_i2c_simple_init();
 8000b68:	f000 ffd0 	bl	8001b0c <sw_i2c_simple_init>
	sw_ssd1306_init();
 8000b6c:	f002 fa3a 	bl	8002fe4 <sw_ssd1306_init>

	MPU6050__init( MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G );
 8000b70:	2100      	movs	r1, #0
 8000b72:	2003      	movs	r0, #3
 8000b74:	f001 fa90 	bl	8002098 <MPU6050__init>
	MPU6050__setThreshold( 3 );		// Ustawienie czułości
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f001 f913 	bl	8001da4 <MPU6050__setThreshold>
	MPU6050__calibrateGyro( 5 );	// Kalibracja żyroskopu
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f001 f96a 	bl	8001e58 <MPU6050__calibrateGyro>

	delay_ms(10);
 8000b84:	200a      	movs	r0, #10
 8000b86:	f002 ff41 	bl	8003a0c <delay_ms>

	if ( vcnl4010_init() ) {
 8000b8a:	f001 fe87 	bl	800289c <vcnl4010_init>
//		glcd_puts( 0, 0, "VCNL4010 initialized", 1 );

	} else {
//		glcd_puts( 0, 0, "ERROR", 1 );
	}
	delay_ms(1000);
 8000b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b92:	f002 ff3b 	bl	8003a0c <delay_ms>

	softTimer3 = 200;
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <main+0xfc>)
 8000b98:	22c8      	movs	r2, #200	; 0xc8
 8000b9a:	801a      	strh	r2, [r3, #0]
	register_measure_callback( pomiar );
 8000b9c:	482a      	ldr	r0, [pc, #168]	; (8000c48 <main+0x100>)
 8000b9e:	f001 fe11 	bl	80027c4 <register_measure_callback>

	paj7620_init( fps_120 );
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 ff5a 	bl	8002a5c <paj7620_init>
    register_gesture_callback( my_gesture, NULL );
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4828      	ldr	r0, [pc, #160]	; (8000c4c <main+0x104>)
 8000bac:	f001 ffdc 	bl	8002b68 <register_gesture_callback>

    T_STRING TextX;
    T_STRING TextY;
    T_STRING TextZ;

	softTimer3 = 500;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <main+0xfc>)
 8000bb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bb6:	801a      	strh	r2, [r3, #0]
	struct Vector normGyro;
	while(1) {
//		SW_VCNL4010_MEASURE_EVENT();
//		PAJ7620_EVENT();

		if (softTimer2 == 0) {
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <main+0x108>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d134      	bne.n	8000c2c <main+0xe4>
			softTimer2 = 500;
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <main+0x108>)
 8000bc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bc8:	801a      	strh	r2, [r3, #0]
			sw_led_xor();
 8000bca:	f002 f8e5 	bl	8002d98 <sw_led_xor>
//			rawGyro		= MPU6050__readRawGyro();
//			normGyro	= MPU6050__readNormalizeGyro();
			normGyro	= MPU6050__readNormalizeAccel();
 8000bce:	f001 fbc9 	bl	8002364 <MPU6050__readNormalizeAccel>
 8000bd2:	eef0 6a40 	vmov.f32	s13, s0
 8000bd6:	eeb0 7a60 	vmov.f32	s14, s1
 8000bda:	eef0 7a41 	vmov.f32	s15, s2
 8000bde:	edc7 6a00 	vstr	s13, [r7]
 8000be2:	ed87 7a01 	vstr	s14, [r7, #4]
 8000be6:	edc7 7a02 	vstr	s15, [r7, #8]
			TEXT_display_float( 0, 0,  normGyro.XAxis, &TextX );
 8000bea:	edd7 7a00 	vldr	s15, [r7]
 8000bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f002 fda4 	bl	8003748 <TEXT_display_float>
			TEXT_display_float( 0, 16, normGyro.YAxis, &TextY );
 8000c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c08:	461a      	mov	r2, r3
 8000c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0e:	2110      	movs	r1, #16
 8000c10:	2000      	movs	r0, #0
 8000c12:	f002 fd99 	bl	8003748 <TEXT_display_float>
			TEXT_display_float( 0, 32, normGyro.ZAxis, &TextZ );
 8000c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	461a      	mov	r2, r3
 8000c20:	eeb0 0a67 	vmov.f32	s0, s15
 8000c24:	2120      	movs	r1, #32
 8000c26:	2000      	movs	r0, #0
 8000c28:	f002 fd8e 	bl	8003748 <TEXT_display_float>

		}

		if ( !softTimer3 ) {
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <main+0xfc>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1c0      	bne.n	8000bb8 <main+0x70>
			sw_ssd1306_display();
 8000c36:	f002 f961 	bl	8002efc <sw_ssd1306_display>
			softTimer3 = 300;
 8000c3a:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <main+0xfc>)
 8000c3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c40:	801a      	strh	r2, [r3, #0]
		if (softTimer2 == 0) {
 8000c42:	e7b9      	b.n	8000bb8 <main+0x70>
 8000c44:	20000576 	.word	0x20000576
 8000c48:	08000d55 	.word	0x08000d55
 8000c4c:	08000dc1 	.word	0x08000dc1
 8000c50:	20000562 	.word	0x20000562

08000c54 <srednia1>:
}



// ------------ Definicje funkcji --------------
static uint16_t srednia1( uint16_t wartosc ) {
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor1[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor1[ kolejny_pomiar++ ] = wartosc;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <srednia1+0x74>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	b2d1      	uxtb	r1, r2
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <srednia1+0x74>)
 8000c68:	7011      	strb	r1, [r2, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <srednia1+0x78>)
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <srednia1+0x74>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d102      	bne.n	8000c82 <srednia1+0x2e>
		kolejny_pomiar = 0;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <srednia1+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	72fb      	strb	r3, [r7, #11]
 8000c8a:	e00a      	b.n	8000ca2 <srednia1+0x4e>
		wynik = wynik + bufor1[i];
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <srednia1+0x78>)
 8000c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c94:	461a      	mov	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4413      	add	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	72fb      	strb	r3, [r7, #11]
 8000ca2:	7afb      	ldrb	r3, [r7, #11]
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d9f1      	bls.n	8000c8c <srednia1+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <srednia1+0x7c>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	60fb      	str	r3, [r7, #12]
	return wynik;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	b29b      	uxth	r3, r3
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200000a4 	.word	0x200000a4
 8000ccc:	200000a8 	.word	0x200000a8
 8000cd0:	cccccccd 	.word	0xcccccccd

08000cd4 <srednia2>:

static uint16_t srednia2( uint16_t wartosc ) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor2[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor2 [ kolejny_pomiar++ ] = wartosc;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <srednia2+0x74>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	b2d1      	uxtb	r1, r2
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <srednia2+0x74>)
 8000ce8:	7011      	strb	r1, [r2, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <srednia2+0x78>)
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <srednia2+0x74>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d102      	bne.n	8000d02 <srednia2+0x2e>
		kolejny_pomiar = 0;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <srednia2+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	72fb      	strb	r3, [r7, #11]
 8000d0a:	e00a      	b.n	8000d22 <srednia2+0x4e>
		wynik = wynik + bufor2[i];
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <srednia2+0x78>)
 8000d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d14:	461a      	mov	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000d1c:	7afb      	ldrb	r3, [r7, #11]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	72fb      	strb	r3, [r7, #11]
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d9f1      	bls.n	8000d0c <srednia2+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <srednia2+0x7c>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	60fb      	str	r3, [r7, #12]
	return wynik;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	b29b      	uxth	r3, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	200000b2 	.word	0x200000b2
 8000d4c:	200000b4 	.word	0x200000b4
 8000d50:	cccccccd 	.word	0xcccccccd

08000d54 <pomiar>:


void pomiar( T_RESULTS *pomiar1 ) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint16_t result;

	// Składamy wynik 16 bitowy z 8 bitowych
	result = ( (uint16_t)pomiar1->proximityHigh<<8 ) | pomiar1->proximityLow;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	78db      	ldrb	r3, [r3, #3]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	81fb      	strh	r3, [r7, #14]
	proximityAverage = srednia1(result ),
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff6e 	bl	8000c54 <srednia1>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <pomiar+0x64>)
 8000d7e:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 0, result, 1 );

	result = ( (uint16_t)pomiar1->ambientHigh<<8 )   | pomiar1->ambientLow;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	81fb      	strh	r3, [r7, #14]
	ambilightAverage = srednia2(result);
 8000d94:	89fb      	ldrh	r3, [r7, #14]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff9c 	bl	8000cd4 <srednia2>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <pomiar+0x68>)
 8000da2:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 36, result, 1 );

	gpio_pin_XOR( DEBUG_PORT0, DEBUG_PIN0 );
 8000da4:	2101      	movs	r1, #1
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f001 ffd6 	bl	8002d5a <gpio_pin_XOR>
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000055a 	.word	0x2000055a
 8000dbc:	20000558 	.word	0x20000558

08000dc0 <my_gesture>:

void my_gesture( TGSNR last_gs, TGSNR second_gs, TGSNR first_gs ) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	71bb      	strb	r3, [r7, #6]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	717b      	strb	r3, [r7, #5]
//    else if( last_gs == gs_cw )         graphic_puts_RAM( 0, 0, L"CW", 1, WHITE, BLACK, CurrentFont );		// 7
//    else if( last_gs == gs_ccw )        graphic_puts_RAM( 0, 0, L"CCW", 1, WHITE, BLACK, CurrentFont );		// 8
//    else if( last_gs == gs_wave )       graphic_puts_RAM( 0, 0, L"WAVE", 1, WHITE, BLACK, CurrentFont );		// 9

//	sw_ssd1306_ram_to_display(0);
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <HardFault_Handler+0x4>

08000dea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <BusFault_Handler+0x4>

08000df6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <SystemInit+0x5c>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <SystemInit+0x5c>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SystemInit+0x60>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <SystemInit+0x60>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <SystemInit+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <SystemInit+0x60>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <SystemInit+0x60>)
 8000e54:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e58:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <SystemInit+0x60>)
 8000e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SystemInit+0x60>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SystemInit+0x60>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SystemInit+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	40021000 	.word	0x40021000

08000e8c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000e92:	4b4f      	ldr	r3, [pc, #316]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d107      	bne.n	8000eae <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000e9e:	4b4c      	ldr	r3, [pc, #304]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e005      	b.n	8000eba <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000eae:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000eba:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <SystemCoreClockUpdate+0x148>)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec4:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d866      	bhi.n	8000f9e <SystemCoreClockUpdate+0x112>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <SystemCoreClockUpdate+0x4c>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f0d 	.word	0x08000f0d
 8000edc:	08000f9f 	.word	0x08000f9f
 8000ee0:	08000f9f 	.word	0x08000f9f
 8000ee4:	08000f9f 	.word	0x08000f9f
 8000ee8:	08000f15 	.word	0x08000f15
 8000eec:	08000f9f 	.word	0x08000f9f
 8000ef0:	08000f9f 	.word	0x08000f9f
 8000ef4:	08000f9f 	.word	0x08000f9f
 8000ef8:	08000f1d 	.word	0x08000f1d
 8000efc:	08000f9f 	.word	0x08000f9f
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f25 	.word	0x08000f25
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	6013      	str	r3, [r2, #0]
      break;
 8000f12:	e048      	b.n	8000fa6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000f16:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <SystemCoreClockUpdate+0x150>)
 8000f18:	601a      	str	r2, [r3, #0]
      break;
 8000f1a:	e044      	b.n	8000fa6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000f1e:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <SystemCoreClockUpdate+0x154>)
 8000f20:	601a      	str	r2, [r3, #0]
      break;
 8000f22:	e040      	b.n	8000fa6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d003      	beq.n	8000f4a <SystemCoreClockUpdate+0xbe>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d006      	beq.n	8000f56 <SystemCoreClockUpdate+0xca>
 8000f48:	e00b      	b.n	8000f62 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <SystemCoreClockUpdate+0x150>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	613b      	str	r3, [r7, #16]
          break;
 8000f54:	e00b      	b.n	8000f6e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <SystemCoreClockUpdate+0x154>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	613b      	str	r3, [r7, #16]
          break;
 8000f60:	e005      	b.n	8000f6e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	613b      	str	r3, [r7, #16]
          break;
 8000f6c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0e5b      	lsrs	r3, r3, #25
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000f9a:	6013      	str	r3, [r2, #0]
      break;
 8000f9c:	e003      	b.n	8000fa6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	6013      	str	r3, [r2, #0]
      break;
 8000fa4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <SystemCoreClockUpdate+0x144>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <SystemCoreClockUpdate+0x158>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemCoreClockUpdate+0x14c>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	08004808 	.word	0x08004808
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	00f42400 	.word	0x00f42400
 8000fe0:	007a1200 	.word	0x007a1200
 8000fe4:	080047f8 	.word	0x080047f8

08000fe8 <sw_i2c_autoend_off>:




static inline void sw_i2c_autoend_on(void)  { hI2Cx->I2C->CR2 |=  I2C_CR2_AUTOEND; }
static inline void sw_i2c_autoend_off(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <sw_i2c_autoend_off+0x24>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <sw_i2c_autoend_off+0x24>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004

08001010 <sw_i2c_write_buff>:
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
}
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }

static void sw_i2c_write_buff( uint16_t nBytes, const uint8_t * pBuff ) {
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 800101c:	2300      	movs	r3, #0
 800101e:	81fb      	strh	r3, [r7, #14]
 8001020:	e027      	b.n	8001072 <sw_i2c_write_buff+0x62>
		while( sw_is_TXIS_flag_ready() == false) {}
 8001022:	bf00      	nop
}
static INLINE bool sw_is_TCR_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
}
static INLINE bool sw_is_TXIS_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <sw_i2c_write_buff+0x78>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <sw_i2c_write_buff+0x28>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <sw_i2c_write_buff+0x2a>
 8001038:	2300      	movs	r3, #0
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ef      	bne.n	8001024 <sw_i2c_write_buff+0x14>
		sw_i2c_write( *pBuff++ );
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	603a      	str	r2, [r7, #0]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	737b      	strb	r3, [r7, #13]
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
//	hI2Cx->I2C->ICR = I2C_ICR_STOPCF;
}
static INLINE I2CSTATUS sw_i2c_write( uint8_t data ) {
	hI2Cx->I2C->TXDR = data;								// First write byte
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <sw_i2c_write_buff+0x78>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	7b7a      	ldrb	r2, [r7, #13]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8001058:	bf00      	nop
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <sw_i2c_write_buff+0x78>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f7      	beq.n	800105a <sw_i2c_write_buff+0x4a>

	return I2C_Ok;
 800106a:	bf00      	nop
	for ( uint16_t i=0; i< nBytes; i++ ) {
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	3301      	adds	r3, #1
 8001070:	81fb      	strh	r3, [r7, #14]
 8001072:	89fa      	ldrh	r2, [r7, #14]
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3d3      	bcc.n	8001022 <sw_i2c_write_buff+0x12>
	}
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000004 	.word	0x20000004

0800108c <sw_i2c_read_buff>:
static void sw_i2c_read_buff( uint16_t nBytes, uint8_t * pBuff ) {
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8001098:	2300      	movs	r3, #0
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	e027      	b.n	80010ee <sw_i2c_read_buff+0x62>
		while( sw_is_RXNE_flag_ready() == false) {}
 800109e:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <sw_i2c_read_buff+0x78>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <sw_i2c_read_buff+0x28>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <sw_i2c_read_buff+0x2a>
 80010b4:	2300      	movs	r3, #0
 80010b6:	f083 0301 	eor.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ef      	bne.n	80010a0 <sw_i2c_read_buff+0x14>
		*pBuff++ = sw_i2c_read(DUMMY);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	603a      	str	r2, [r7, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	737a      	strb	r2, [r7, #13]
}
static INLINE uint8_t	sw_i2c_read( uint8_t dummy ) {
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 80010ca:	bf00      	nop
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <sw_i2c_read_buff+0x78>)
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	6992      	ldr	r2, [r2, #24]
 80010d4:	f002 0204 	and.w	r2, r2, #4
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d0f7      	beq.n	80010cc <sw_i2c_read_buff+0x40>
	return (hI2Cx->I2C->RXDR & 0xFF);
 80010dc:	4a09      	ldr	r2, [pc, #36]	; (8001104 <sw_i2c_read_buff+0x78>)
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	3301      	adds	r3, #1
 80010ec:	81fb      	strh	r3, [r7, #14]
 80010ee:	89fa      	ldrh	r2, [r7, #14]
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3d3      	bcc.n	800109e <sw_i2c_read_buff+0x12>
	}
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20000004 	.word	0x20000004

08001108 <sw_i2c_write_byte>:

I2CSTATUS sw_i2c_write_byte( uint8_t byte ) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8001112:	4b48      	ldr	r3, [pc, #288]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4b46      	ldr	r3, [pc, #280]	; (8001234 <sw_i2c_write_byte+0x12c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	bf00      	nop
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 8001128:	f7ff ff5e 	bl	8000fe8 <sw_i2c_autoend_off>
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001130:	4b41      	ldr	r3, [pc, #260]	; (8001238 <sw_i2c_write_byte+0x130>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	0412      	lsls	r2, r2, #16
 800113c:	4611      	mov	r1, r2
 800113e:	4a3e      	ldr	r2, [pc, #248]	; (8001238 <sw_i2c_write_byte+0x130>)
 8001140:	430b      	orrs	r3, r1
 8001142:	6053      	str	r3, [r2, #4]
}
 8001144:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001158:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 800115a:	bf00      	nop
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <sw_i2c_write_byte+0x12c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f7      	beq.n	800115c <sw_i2c_write_byte+0x54>
	whileTimer = 5;
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <sw_i2c_write_byte+0x134>)
 800116e:	2205      	movs	r2, #5
 8001170:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8001172:	e004      	b.n	800117e <sw_i2c_write_byte+0x76>
		if ( whileTimer == 0 ) {
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <sw_i2c_write_byte+0x134>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00d      	beq.n	800119a <sw_i2c_write_byte+0x92>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <sw_i2c_write_byte+0x8a>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <sw_i2c_write_byte+0x8c>
 8001192:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1ed      	bne.n	8001174 <sw_i2c_write_byte+0x6c>
	return I2C_Ok;
 8001198:	e000      	b.n	800119c <sw_i2c_write_byte+0x94>
			return I2C_Error;
 800119a:	bf00      	nop

	sw_i2c_nBytes(1);
	sw_i2c_start();
	while( sw_is_TXIS_flag_ready() == false ) {}	// All bytes send nBytes = 1
 800119c:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <sw_i2c_write_byte+0x12c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <sw_i2c_write_byte+0xaa>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <sw_i2c_write_byte+0xac>
 80011b2:	2300      	movs	r3, #0
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ef      	bne.n	800119e <sw_i2c_write_byte+0x96>
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <sw_i2c_write_byte+0x12c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	7bba      	ldrb	r2, [r7, #14]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80011cc:	bf00      	nop
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <sw_i2c_write_byte+0x12c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f7      	beq.n	80011ce <sw_i2c_write_byte+0xc6>
	sw_i2c_write( byte );
	while( sw_is_TC_flag_ready() == false ) {}		// All bytes send nBytes = 1
 80011de:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <sw_i2c_write_byte+0x12c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <sw_i2c_write_byte+0xec>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <sw_i2c_write_byte+0xee>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f083 0301 	eor.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ef      	bne.n	80011e0 <sw_i2c_write_byte+0xd8>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <sw_i2c_write_byte+0x12c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001212:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001214:	bf00      	nop
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <sw_i2c_write_byte+0x12c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f7      	beq.n	8001216 <sw_i2c_write_byte+0x10e>
}
 8001226:	bf00      	nop
	sw_i2c_stop();

	return I2C_Ok;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000004 	.word	0x20000004
 8001238:	40005400 	.word	0x40005400
 800123c:	20000560 	.word	0x20000560

08001240 <sw_i2c_read_block>:
	sw_i2c_stop();

	return byte;
}
I2CSTATUS sw_i2c_read_block( uint8_t  devAddr, uint8_t regAddr,
						uint16_t nBytes,  uint8_t * pBuff ) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	460b      	mov	r3, r1
 800124e:	71bb      	strb	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	74fb      	strb	r3, [r7, #19]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001258:	4b7e      	ldr	r3, [pc, #504]	; (8001454 <sw_i2c_read_block+0x214>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001264:	f023 0303 	bic.w	r3, r3, #3
 8001268:	7cf9      	ldrb	r1, [r7, #19]
 800126a:	4a7a      	ldr	r2, [pc, #488]	; (8001454 <sw_i2c_read_block+0x214>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	430b      	orrs	r3, r1
 8001272:	6053      	str	r3, [r2, #4]
}
 8001274:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_byte( regAddr );
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff45 	bl	8001108 <sw_i2c_write_byte>
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
 800127e:	4b75      	ldr	r3, [pc, #468]	; (8001454 <sw_i2c_read_block+0x214>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4b73      	ldr	r3, [pc, #460]	; (8001454 <sw_i2c_read_block+0x214>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	bf00      	nop
	sw_i2c_read_dir();

	if ( nBytes <= I2C_CR2_NBYTE_MAX ) {
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d817      	bhi.n	80012ca <sw_i2c_read_block+0x8a>
		CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800129a:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <sw_i2c_read_block+0x214>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <sw_i2c_read_block+0x214>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80012ac:	605a      	str	r2, [r3, #4]
		sw_i2c_nBytes( nBytes );
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	74bb      	strb	r3, [r7, #18]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80012b4:	4b68      	ldr	r3, [pc, #416]	; (8001458 <sw_i2c_read_block+0x218>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80012bc:	7cba      	ldrb	r2, [r7, #18]
 80012be:	0412      	lsls	r2, r2, #16
 80012c0:	4611      	mov	r1, r2
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <sw_i2c_read_block+0x218>)
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6053      	str	r3, [r2, #4]
}
 80012c8:	e016      	b.n	80012f8 <sw_i2c_read_block+0xb8>
	} else {
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 80012ca:	4b62      	ldr	r3, [pc, #392]	; (8001454 <sw_i2c_read_block+0x214>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4b60      	ldr	r3, [pc, #384]	; (8001454 <sw_i2c_read_block+0x214>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <sw_i2c_read_block+0x218>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80012ea:	7c7a      	ldrb	r2, [r7, #17]
 80012ec:	0412      	lsls	r2, r2, #16
 80012ee:	4611      	mov	r1, r2
 80012f0:	4a59      	ldr	r2, [pc, #356]	; (8001458 <sw_i2c_read_block+0x218>)
 80012f2:	430b      	orrs	r3, r1
 80012f4:	6053      	str	r3, [r2, #4]
}
 80012f6:	bf00      	nop
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
	}

	uint16_t nBlock = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;
 80012fc:	23fe      	movs	r3, #254	; 0xfe
 80012fe:	82bb      	strh	r3, [r7, #20]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001300:	4b54      	ldr	r3, [pc, #336]	; (8001454 <sw_i2c_read_block+0x214>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4b52      	ldr	r3, [pc, #328]	; (8001454 <sw_i2c_read_block+0x214>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001312:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001314:	bf00      	nop
 8001316:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <sw_i2c_read_block+0x214>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f7      	beq.n	8001316 <sw_i2c_read_block+0xd6>
	whileTimer = 5;
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <sw_i2c_read_block+0x21c>)
 8001328:	2205      	movs	r2, #5
 800132a:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 800132c:	e004      	b.n	8001338 <sw_i2c_read_block+0xf8>
		if ( whileTimer == 0 ) {
 800132e:	4b4b      	ldr	r3, [pc, #300]	; (800145c <sw_i2c_read_block+0x21c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00d      	beq.n	8001354 <sw_i2c_read_block+0x114>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <sw_i2c_read_block+0x214>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <sw_i2c_read_block+0x10c>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <sw_i2c_read_block+0x10e>
 800134c:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1ed      	bne.n	800132e <sw_i2c_read_block+0xee>
	return I2C_Ok;
 8001352:	e000      	b.n	8001356 <sw_i2c_read_block+0x116>
			return I2C_Error;
 8001354:	bf00      	nop
	sw_i2c_start();
	while ( nBytes ) {
 8001356:	e061      	b.n	800141c <sw_i2c_read_block+0x1dc>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	2bfe      	cmp	r3, #254	; 0xfe
 800135c:	d950      	bls.n	8001400 <sw_i2c_read_block+0x1c0>
			if ( nBlock != 0) n = I2C_CR2_NBYTE_MAX;
 800135e:	8afb      	ldrh	r3, [r7, #22]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <sw_i2c_read_block+0x128>
 8001364:	23ff      	movs	r3, #255	; 0xff
 8001366:	82bb      	strh	r3, [r7, #20]

			sw_i2c_read_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX  );
 8001368:	8afb      	ldrh	r3, [r7, #22]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	82fa      	strh	r2, [r7, #22]
 800136e:	461a      	mov	r2, r3
 8001370:	4613      	mov	r3, r2
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	461a      	mov	r2, r3
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	441a      	add	r2, r3
 800137c:	8abb      	ldrh	r3, [r7, #20]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe83 	bl	800108c <sw_i2c_read_buff>
			while( sw_is_TCR_flag_ready() == false ) {}
 8001386:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <sw_i2c_read_block+0x214>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <sw_i2c_read_block+0x15c>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <sw_i2c_read_block+0x15e>
 800139c:	2300      	movs	r3, #0
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ef      	bne.n	8001388 <sw_i2c_read_block+0x148>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	3bff      	subs	r3, #255	; 0xff
 80013ac:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	2bfe      	cmp	r3, #254	; 0xfe
 80013b2:	d818      	bhi.n	80013e6 <sw_i2c_read_block+0x1a6>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <sw_i2c_read_block+0x214>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <sw_i2c_read_block+0x214>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80013c6:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );						// Last nBytes < 255
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <sw_i2c_read_block+0x218>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80013d6:	7c3a      	ldrb	r2, [r7, #16]
 80013d8:	0412      	lsls	r2, r2, #16
 80013da:	4611      	mov	r1, r2
 80013dc:	4a1e      	ldr	r2, [pc, #120]	; (8001458 <sw_i2c_read_block+0x218>)
 80013de:	430b      	orrs	r3, r1
 80013e0:	6053      	str	r3, [r2, #4]
}
 80013e2:	bf00      	nop
 80013e4:	e01a      	b.n	800141c <sw_i2c_read_block+0x1dc>
 80013e6:	23ff      	movs	r3, #255	; 0xff
 80013e8:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <sw_i2c_read_block+0x218>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	0412      	lsls	r2, r2, #16
 80013f6:	4611      	mov	r1, r2
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <sw_i2c_read_block+0x218>)
 80013fa:	430b      	orrs	r3, r1
 80013fc:	6053      	str	r3, [r2, #4]
 80013fe:	e00d      	b.n	800141c <sw_i2c_read_block+0x1dc>
			}
			else
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		} else {
			sw_i2c_read_buff( nBytes, (uint8_t *)pBuff +  nBlock*I2C_CR2_NBYTE_MAX );
 8001400:	8afa      	ldrh	r2, [r7, #22]
 8001402:	4613      	mov	r3, r2
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	461a      	mov	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	441a      	add	r2, r3
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe3a 	bl	800108c <sw_i2c_read_buff>
			nBytes = 0;									// End of while() loop
 8001418:	2300      	movs	r3, #0
 800141a:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d19a      	bne.n	8001358 <sw_i2c_read_block+0x118>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <sw_i2c_read_block+0x214>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <sw_i2c_read_block+0x214>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001434:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001436:	bf00      	nop
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <sw_i2c_read_block+0x214>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f7      	beq.n	8001438 <sw_i2c_read_block+0x1f8>
}
 8001448:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000004 	.word	0x20000004
 8001458:	40005400 	.word	0x40005400
 800145c:	20000560 	.word	0x20000560

08001460 <sw_i2c_write_block>:
I2CSTATUS sw_i2c_write_block( uint8_t devAddr, uint8_t regAddr,
						 uint16_t nBytes, const uint8_t * pBuff ) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	460b      	mov	r3, r1
 800146e:	71bb      	strb	r3, [r7, #6]
 8001470:	4613      	mov	r3, r2
 8001472:	80bb      	strh	r3, [r7, #4]
	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
 8001474:	4ba4      	ldr	r3, [pc, #656]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	4ba2      	ldr	r3, [pc, #648]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	61da      	str	r2, [r3, #28]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 800148e:	4b9e      	ldr	r3, [pc, #632]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	7c79      	ldrb	r1, [r7, #17]
 80014a0:	4a99      	ldr	r2, [pc, #612]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	430b      	orrs	r3, r1
 80014a8:	6053      	str	r3, [r2, #4]
}
 80014aa:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_autoend_off();
 80014ac:	f7ff fd9c 	bl	8000fe8 <sw_i2c_autoend_off>
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 80014b0:	4b95      	ldr	r3, [pc, #596]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	bf00      	nop
	sw_i2c_write_dir();

	nBytes++;											// nBytes + 1 (regAddr byte)
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	3301      	adds	r3, #1
 80014ca:	80bb      	strh	r3, [r7, #4]
	if ( nBytes < I2C_CR2_NBYTE_MAX + 1) {
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d811      	bhi.n	80014f6 <sw_i2c_write_block+0x96>
		sw_i2c_nBytes( nBytes );
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80014d8:	4b8c      	ldr	r3, [pc, #560]	; (800170c <sw_i2c_write_block+0x2ac>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80014e0:	7c3a      	ldrb	r2, [r7, #16]
 80014e2:	0412      	lsls	r2, r2, #16
 80014e4:	4611      	mov	r1, r2
 80014e6:	4a89      	ldr	r2, [pc, #548]	; (800170c <sw_i2c_write_block+0x2ac>)
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6053      	str	r3, [r2, #4]
}
 80014ec:	bf00      	nop
		nBytes--;
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	e016      	b.n	8001524 <sw_i2c_write_block+0xc4>
 80014f6:	23ff      	movs	r3, #255	; 0xff
 80014f8:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80014fa:	4b84      	ldr	r3, [pc, #528]	; (800170c <sw_i2c_write_block+0x2ac>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	0412      	lsls	r2, r2, #16
 8001506:	4611      	mov	r1, r2
 8001508:	4a80      	ldr	r2, [pc, #512]	; (800170c <sw_i2c_write_block+0x2ac>)
 800150a:	430b      	orrs	r3, r1
 800150c:	6053      	str	r3, [r2, #4]
}
 800150e:	bf00      	nop
	} else {
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8001510:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <sw_i2c_write_block+0x2a8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001522:	605a      	str	r2, [r3, #4]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001524:	4b78      	ldr	r3, [pc, #480]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4b76      	ldr	r3, [pc, #472]	; (8001708 <sw_i2c_write_block+0x2a8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001536:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001538:	bf00      	nop
 800153a:	4b73      	ldr	r3, [pc, #460]	; (8001708 <sw_i2c_write_block+0x2a8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f7      	beq.n	800153a <sw_i2c_write_block+0xda>
	whileTimer = 5;
 800154a:	4b71      	ldr	r3, [pc, #452]	; (8001710 <sw_i2c_write_block+0x2b0>)
 800154c:	2205      	movs	r2, #5
 800154e:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8001550:	e004      	b.n	800155c <sw_i2c_write_block+0xfc>
		if ( whileTimer == 0 ) {
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <sw_i2c_write_block+0x2b0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <sw_i2c_write_block+0x118>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <sw_i2c_write_block+0x2a8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <sw_i2c_write_block+0x110>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <sw_i2c_write_block+0x112>
 8001570:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ed      	bne.n	8001552 <sw_i2c_write_block+0xf2>
	return I2C_Ok;
 8001576:	e000      	b.n	800157a <sw_i2c_write_block+0x11a>
			return I2C_Error;
 8001578:	bf00      	nop
	}

	sw_i2c_start();
	while ( sw_is_TXIS_flag_ready() == false ) {}
 800157a:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800157c:	4b62      	ldr	r3, [pc, #392]	; (8001708 <sw_i2c_write_block+0x2a8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <sw_i2c_write_block+0x130>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <sw_i2c_write_block+0x132>
 8001590:	2300      	movs	r3, #0
 8001592:	f083 0301 	eor.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ef      	bne.n	800157c <sw_i2c_write_block+0x11c>
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	7bba      	ldrb	r2, [r7, #14]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80015aa:	bf00      	nop
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f7      	beq.n	80015ac <sw_i2c_write_block+0x14c>
	sw_i2c_write( regAddr ); 							// First byte, address
	while ( sw_is_TXIS_flag_ready() == false ) {}
 80015bc:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80015be:	4b52      	ldr	r3, [pc, #328]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <sw_i2c_write_block+0x172>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <sw_i2c_write_block+0x174>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f083 0301 	eor.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <sw_i2c_write_block+0x15e>

	uint16_t nBlock = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;			//
 80015e2:	23fe      	movs	r3, #254	; 0xfe
 80015e4:	827b      	strh	r3, [r7, #18]
	uint8_t shift	= 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	757b      	strb	r3, [r7, #21]
	while ( nBytes ) {
 80015ea:	e070      	b.n	80016ce <sw_i2c_write_block+0x26e>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	2bfe      	cmp	r3, #254	; 0xfe
 80015f0:	d95d      	bls.n	80016ae <sw_i2c_write_block+0x24e>
			if ( nBlock == 0) {
 80015f2:	8afb      	ldrh	r3, [r7, #22]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <sw_i2c_write_block+0x1ae>
				n = I2C_CR2_NBYTE_MAX - 1;
 80015f8:	23fe      	movs	r3, #254	; 0xfe
 80015fa:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff );
 80015fc:	8a7b      	ldrh	r3, [r7, #18]
 80015fe:	6839      	ldr	r1, [r7, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fd05 	bl	8001010 <sw_i2c_write_buff>
				nBlock++;
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	3301      	adds	r3, #1
 800160a:	82fb      	strh	r3, [r7, #22]
 800160c:	e010      	b.n	8001630 <sw_i2c_write_block+0x1d0>
			} else {
				n = I2C_CR2_NBYTE_MAX;
 800160e:	23ff      	movs	r3, #255	; 0xff
 8001610:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX - 1 );
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	82fa      	strh	r2, [r7, #22]
 8001618:	461a      	mov	r2, r3
 800161a:	4613      	mov	r3, r2
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	3b01      	subs	r3, #1
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	441a      	add	r2, r3
 8001626:	8a7b      	ldrh	r3, [r7, #18]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fcf0 	bl	8001010 <sw_i2c_write_buff>
			}
			while( sw_is_TCR_flag_ready() == false ) {}
 8001630:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <sw_i2c_write_block+0x1e6>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <sw_i2c_write_block+0x1e8>
 8001646:	2300      	movs	r3, #0
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ef      	bne.n	8001632 <sw_i2c_write_block+0x1d2>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	3bff      	subs	r3, #255	; 0xff
 8001656:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	2bfe      	cmp	r3, #254	; 0xfe
 800165c:	d81a      	bhi.n	8001694 <sw_i2c_write_block+0x234>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <sw_i2c_write_block+0x2a8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001670:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <sw_i2c_write_block+0x2ac>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001680:	7b7a      	ldrb	r2, [r7, #13]
 8001682:	0412      	lsls	r2, r2, #16
 8001684:	4611      	mov	r1, r2
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <sw_i2c_write_block+0x2ac>)
 8001688:	430b      	orrs	r3, r1
 800168a:	6053      	str	r3, [r2, #4]
}
 800168c:	bf00      	nop
				shift = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	757b      	strb	r3, [r7, #21]
 8001692:	e01c      	b.n	80016ce <sw_i2c_write_block+0x26e>
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	733b      	strb	r3, [r7, #12]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <sw_i2c_write_block+0x2ac>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80016a0:	7b3a      	ldrb	r2, [r7, #12]
 80016a2:	0412      	lsls	r2, r2, #16
 80016a4:	4611      	mov	r1, r2
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <sw_i2c_write_block+0x2ac>)
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6053      	str	r3, [r2, #4]
 80016ac:	e00f      	b.n	80016ce <sw_i2c_write_block+0x26e>
			} else {
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
			}
		} else {
			sw_i2c_write_buff( nBytes , (uint8_t *)pBuff + nBlock*I2C_CR2_NBYTE_MAX - shift );
 80016ae:	8afa      	ldrh	r2, [r7, #22]
 80016b0:	4613      	mov	r3, r2
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	7d7b      	ldrb	r3, [r7, #21]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	441a      	add	r2, r3
 80016c0:	88bb      	ldrh	r3, [r7, #4]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fca3 	bl	8001010 <sw_i2c_write_buff>
			nBytes = 0;									// End of while() loop
 80016ca:	2300      	movs	r3, #0
 80016cc:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d18b      	bne.n	80015ec <sw_i2c_write_block+0x18c>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016e6:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80016e8:	bf00      	nop
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <sw_i2c_write_block+0x2a8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f7      	beq.n	80016ea <sw_i2c_write_block+0x28a>
}
 80016fa:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000004 	.word	0x20000004
 800170c:	40005400 	.word	0x40005400
 8001710:	20000560 	.word	0x20000560

08001714 <sw_i2c_write_reg>:


I2CSTATUS sw_i2c_write_reg( uint8_t devAddr, uint8_t reg, uint8_t data ) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	460b      	mov	r3, r1
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	4613      	mov	r3, r2
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 800172a:	4b60      	ldr	r3, [pc, #384]	; (80018ac <sw_i2c_write_reg+0x198>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	7bb9      	ldrb	r1, [r7, #14]
 800173c:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <sw_i2c_write_reg+0x198>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	430b      	orrs	r3, r1
 8001744:	6053      	str	r3, [r2, #4]
}
 8001746:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8001748:	4b58      	ldr	r3, [pc, #352]	; (80018ac <sw_i2c_write_reg+0x198>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b56      	ldr	r3, [pc, #344]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	bf00      	nop
//	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 800175e:	f7ff fc43 	bl	8000fe8 <sw_i2c_autoend_off>
 8001762:	2302      	movs	r3, #2
 8001764:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <sw_i2c_write_reg+0x19c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	0412      	lsls	r2, r2, #16
 8001772:	4611      	mov	r1, r2
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <sw_i2c_write_reg+0x19c>)
 8001776:	430b      	orrs	r3, r1
 8001778:	6053      	str	r3, [r2, #4]
}
 800177a:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <sw_i2c_write_reg+0x198>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800178e:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001790:	bf00      	nop
 8001792:	4b46      	ldr	r3, [pc, #280]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f7      	beq.n	8001792 <sw_i2c_write_reg+0x7e>
	whileTimer = 5;
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <sw_i2c_write_reg+0x1a0>)
 80017a4:	2205      	movs	r2, #5
 80017a6:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 80017a8:	e004      	b.n	80017b4 <sw_i2c_write_reg+0xa0>
		if ( whileTimer == 0 ) {
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <sw_i2c_write_reg+0x1a0>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <sw_i2c_write_reg+0xbc>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 80017b4:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <sw_i2c_write_reg+0x198>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <sw_i2c_write_reg+0xb4>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <sw_i2c_write_reg+0xb6>
 80017c8:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ed      	bne.n	80017aa <sw_i2c_write_reg+0x96>
	return I2C_Ok;
 80017ce:	e000      	b.n	80017d2 <sw_i2c_write_reg+0xbe>
			return I2C_Error;
 80017d0:	bf00      	nop

	sw_i2c_nBytes(2);
	sw_i2c_start(); 		while ( sw_is_TXIS_flag_ready() == false ) {}
 80017d2:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <sw_i2c_write_reg+0x198>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <sw_i2c_write_reg+0xd4>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <sw_i2c_write_reg+0xd6>
 80017e8:	2300      	movs	r3, #0
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ef      	bne.n	80017d4 <sw_i2c_write_reg+0xc0>
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	737b      	strb	r3, [r7, #13]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <sw_i2c_write_reg+0x198>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	7b7a      	ldrb	r2, [r7, #13]
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8001802:	bf00      	nop
 8001804:	4b29      	ldr	r3, [pc, #164]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f7      	beq.n	8001804 <sw_i2c_write_reg+0xf0>
	sw_i2c_write( reg ); 	while ( sw_is_TXIS_flag_ready() == false );
 8001814:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8001816:	4b25      	ldr	r3, [pc, #148]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <sw_i2c_write_reg+0x116>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <sw_i2c_write_reg+0x118>
 800182a:	2300      	movs	r3, #0
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ef      	bne.n	8001816 <sw_i2c_write_reg+0x102>
 8001836:	797b      	ldrb	r3, [r7, #5]
 8001838:	733b      	strb	r3, [r7, #12]
	hI2Cx->I2C->TXDR = data;								// First write byte
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <sw_i2c_write_reg+0x198>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	7b3a      	ldrb	r2, [r7, #12]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8001844:	bf00      	nop
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f7      	beq.n	8001846 <sw_i2c_write_reg+0x132>
	sw_i2c_write( data ); 	while ( sw_is_TC_flag_ready() 	== false );
 8001856:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <sw_i2c_write_reg+0x198>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <sw_i2c_write_reg+0x158>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <sw_i2c_write_reg+0x15a>
 800186c:	2300      	movs	r3, #0
 800186e:	f083 0301 	eor.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ef      	bne.n	8001858 <sw_i2c_write_reg+0x144>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <sw_i2c_write_reg+0x198>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800188a:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 800188c:	bf00      	nop
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <sw_i2c_write_reg+0x198>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f7      	beq.n	800188e <sw_i2c_write_reg+0x17a>
}
 800189e:	bf00      	nop
	sw_i2c_stop();
	return I2C_Ok;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000004 	.word	0x20000004
 80018b0:	40005400 	.word	0x40005400
 80018b4:	20000560 	.word	0x20000560

080018b8 <sw_i2c_read_reg>:


I2CSTATUS sw_i2c_read_reg( uint8_t devAddr, uint8_t reg, uint8_t * data ) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	603a      	str	r2, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	460b      	mov	r3, r1
 80018c6:	71bb      	strb	r3, [r7, #6]
	I2CSTATUS status = I2C_Ok;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 80018d0:	4b8b      	ldr	r3, [pc, #556]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	7b79      	ldrb	r1, [r7, #13]
 80018e2:	4a87      	ldr	r2, [pc, #540]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6053      	str	r3, [r2, #4]
}
 80018ec:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 80018ee:	4b84      	ldr	r3, [pc, #528]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	bf00      	nop

	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 8001904:	f7ff fb70 	bl	8000fe8 <sw_i2c_autoend_off>
 8001908:	2301      	movs	r3, #1
 800190a:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 800190c:	4b7d      	ldr	r3, [pc, #500]	; (8001b04 <sw_i2c_read_reg+0x24c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001914:	7bba      	ldrb	r2, [r7, #14]
 8001916:	0412      	lsls	r2, r2, #16
 8001918:	4611      	mov	r1, r2
 800191a:	4a7a      	ldr	r2, [pc, #488]	; (8001b04 <sw_i2c_read_reg+0x24c>)
 800191c:	430b      	orrs	r3, r1
 800191e:	6053      	str	r3, [r2, #4]
}
 8001920:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001922:	4b77      	ldr	r3, [pc, #476]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <sw_i2c_read_reg+0x248>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001934:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001936:	bf00      	nop
 8001938:	4b71      	ldr	r3, [pc, #452]	; (8001b00 <sw_i2c_read_reg+0x248>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f7      	beq.n	8001938 <sw_i2c_read_reg+0x80>
	whileTimer = 5;
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <sw_i2c_read_reg+0x250>)
 800194a:	2205      	movs	r2, #5
 800194c:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 800194e:	e006      	b.n	800195e <sw_i2c_read_reg+0xa6>
		if ( whileTimer == 0 ) {
 8001950:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <sw_i2c_read_reg+0x250>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <sw_i2c_read_reg+0xa6>
			return I2C_Error;
 800195a:	2301      	movs	r3, #1
 800195c:	e00d      	b.n	800197a <sw_i2c_read_reg+0xc2>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800195e:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <sw_i2c_read_reg+0xba>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <sw_i2c_read_reg+0xbc>
 8001972:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1eb      	bne.n	8001950 <sw_i2c_read_reg+0x98>
	return I2C_Ok;
 8001978:	2300      	movs	r3, #0
	sw_i2c_nBytes(1);
	status = sw_i2c_start();
 800197a:	73fb      	strb	r3, [r7, #15]
	while ( sw_is_TXIS_flag_ready() == false );
 800197c:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800197e:	4b60      	ldr	r3, [pc, #384]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <sw_i2c_read_reg+0xda>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <sw_i2c_read_reg+0xdc>
 8001992:	2300      	movs	r3, #0
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <sw_i2c_read_reg+0xc6>
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	733b      	strb	r3, [r7, #12]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80019a2:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	7b3a      	ldrb	r2, [r7, #12]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80019ac:	bf00      	nop
 80019ae:	4b54      	ldr	r3, [pc, #336]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f7      	beq.n	80019ae <sw_i2c_read_reg+0xf6>
	sw_i2c_write( reg ); 	while ( sw_is_TC_flag_ready() 	== false );
 80019be:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <sw_i2c_read_reg+0x11c>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <sw_i2c_read_reg+0x11e>
 80019d4:	2300      	movs	r3, #0
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ef      	bne.n	80019c0 <sw_i2c_read_reg+0x108>
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <sw_i2c_read_reg+0x248>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	bf00      	nop
 80019f6:	2301      	movs	r3, #1
 80019f8:	72fb      	strb	r3, [r7, #11]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <sw_i2c_read_reg+0x24c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a02:	7afa      	ldrb	r2, [r7, #11]
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	4611      	mov	r1, r2
 8001a08:	4a3e      	ldr	r2, [pc, #248]	; (8001b04 <sw_i2c_read_reg+0x24c>)
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	6053      	str	r3, [r2, #4]
}
 8001a0e:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001a10:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a22:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001a24:	bf00      	nop
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f7      	beq.n	8001a26 <sw_i2c_read_reg+0x16e>
	whileTimer = 5;
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <sw_i2c_read_reg+0x250>)
 8001a38:	2205      	movs	r2, #5
 8001a3a:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8001a3c:	e004      	b.n	8001a48 <sw_i2c_read_reg+0x190>
		if ( whileTimer == 0 ) {
 8001a3e:	4b32      	ldr	r3, [pc, #200]	; (8001b08 <sw_i2c_read_reg+0x250>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <sw_i2c_read_reg+0x1ac>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <sw_i2c_read_reg+0x1a4>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <sw_i2c_read_reg+0x1a6>
 8001a5c:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ed      	bne.n	8001a3e <sw_i2c_read_reg+0x186>
	return I2C_Ok;
 8001a62:	e000      	b.n	8001a66 <sw_i2c_read_reg+0x1ae>
			return I2C_Error;
 8001a64:	bf00      	nop

	sw_i2c_read_dir();
	sw_i2c_nBytes(1);
	sw_i2c_start();			while ( sw_is_RXNE_flag_ready() == false );
 8001a66:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <sw_i2c_read_reg+0x1c4>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <sw_i2c_read_reg+0x1c6>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f083 0301 	eor.w	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1ef      	bne.n	8001a68 <sw_i2c_read_reg+0x1b0>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	72bb      	strb	r3, [r7, #10]
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 8001a8c:	bf00      	nop
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f7      	beq.n	8001a8e <sw_i2c_read_reg+0x1d6>
	return (hI2Cx->I2C->RXDR & 0xFF);
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	b2da      	uxtb	r2, r3

	*data = sw_i2c_read(DUMMY);	while ( sw_is_TC_flag_ready()	== false );
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <sw_i2c_read_reg+0x20a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <sw_i2c_read_reg+0x20c>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ef      	bne.n	8001aae <sw_i2c_read_reg+0x1f6>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ae0:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001ae2:	bf00      	nop
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <sw_i2c_read_reg+0x248>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f7      	beq.n	8001ae4 <sw_i2c_read_reg+0x22c>
}
 8001af4:	bf00      	nop
	sw_i2c_stop();

	return status;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000004 	.word	0x20000004
 8001b04:	40005400 	.word	0x40005400
 8001b08:	20000560 	.word	0x20000560

08001b0c <sw_i2c_simple_init>:

void sw_i2c_simple_init(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
#ifdef STM32L4
	RCC->APB1RSTR1 |=  RCC_APB1RSTR1_I2C1RST;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b14:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b1a:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_I2C1RST;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b26:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1ENR1  |= RCC_APB1ENR1_I2C1EN;
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <sw_i2c_simple_init+0xc8>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR |=  RCC_APB1RSTR_I2C1RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
	RCC->APB1ENR  |= RCC_APB1ENR_I2C1EN;
#endif

	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
	while( (hI2Cx->I2C->CR1 & I2C_CR1_PE) );
 8001b48:	bf00      	nop
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f7      	bne.n	8001b4a <sw_i2c_simple_init+0x3e>

	gpio_pin_cfg( hI2Cx->scl_port,  hI2Cx->scl_pin,  hI2Cx->alternateFun );
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6898      	ldr	r0, [r3, #8]
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	8a19      	ldrh	r1, [r3, #16]
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	889b      	ldrh	r3, [r3, #4]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f001 f83d 	bl	8002bec <gpio_pin_cfg>
	gpio_pin_cfg( hI2Cx->sda_port,  hI2Cx->sda_pin,  hI2Cx->alternateFun );
 8001b72:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68d8      	ldr	r0, [r3, #12]
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	8a59      	ldrh	r1, [r3, #18]
 8001b7e:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	461a      	mov	r2, r3
 8001b86:	f001 f831 	bl	8002bec <gpio_pin_cfg>
	gpio_pin_HI ( hI2Cx->scl_port,  hI2Cx->scl_pin );
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	8a1b      	ldrh	r3, [r3, #16]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f001 f8cf 	bl	8002d3c <gpio_pin_HI>
	gpio_pin_HI ( hI2Cx->sda_port,  hI2Cx->sda_pin );
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	8a5b      	ldrh	r3, [r3, #18]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f001 f8c5 	bl	8002d3c <gpio_pin_HI>

	hI2Cx->I2C->TIMINGR  = (uint32_t)I2C_TIMING_80MHz_100KHz;
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <sw_i2c_simple_init+0xd0>)
 8001bba:	611a      	str	r2, [r3, #16]
	SET_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <sw_i2c_simple_init+0xcc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	10909cec 	.word	0x10909cec

08001be0 <sw_i2c_IsDeviceReady>:

I2CSTATUS sw_i2c_IsDeviceReady( uint8_t devAddr, uint32_t trials, uint16_t delay ) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	80bb      	strh	r3, [r7, #4]
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c00:	f023 0303 	bic.w	r3, r3, #3
 8001c04:	7bf9      	ldrb	r1, [r7, #15]
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6053      	str	r3, [r2, #4]
}
 8001c10:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	while (trials--) {
 8001c12:	e042      	b.n	8001c9a <sw_i2c_IsDeviceReady+0xba>
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8001c28:	bf00      	nop
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f7      	beq.n	8001c2a <sw_i2c_IsDeviceReady+0x4a>
	whileTimer = 5;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <sw_i2c_IsDeviceReady+0xe8>)
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8001c40:	e004      	b.n	8001c4c <sw_i2c_IsDeviceReady+0x6c>
		if ( whileTimer == 0 ) {
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <sw_i2c_IsDeviceReady+0xe8>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00d      	beq.n	8001c68 <sw_i2c_IsDeviceReady+0x88>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <sw_i2c_IsDeviceReady+0x80>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <sw_i2c_IsDeviceReady+0x82>
 8001c60:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ed      	bne.n	8001c42 <sw_i2c_IsDeviceReady+0x62>
	return I2C_Ok;
 8001c66:	e000      	b.n	8001c6a <sw_i2c_IsDeviceReady+0x8a>
			return I2C_Error;
 8001c68:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c7c:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001c7e:	bf00      	nop
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f7      	beq.n	8001c80 <sw_i2c_IsDeviceReady+0xa0>
}
 8001c90:	bf00      	nop
		sw_i2c_start();
		sw_i2c_stop();
		delay_ms( delay );
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 feb9 	bl	8003a0c <delay_ms>
	while (trials--) {
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	603a      	str	r2, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1b7      	bne.n	8001c14 <sw_i2c_IsDeviceReady+0x34>
	}
	if ( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) {
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <sw_i2c_IsDeviceReady+0xe4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <sw_i2c_IsDeviceReady+0xd8>
		return I2C_Error;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <sw_i2c_IsDeviceReady+0xda>
	}
	return I2C_Ok;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000560 	.word	0x20000560

08001ccc <MPU6050__fastRegister8>:
static float	actualThreshold;
static bool		useCalibrate;

/***************************** Static functions ****************************/
// Fast read 8-bit from register
static uint8_t 	MPU6050__fastRegister8( uint8_t reg ) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]

	sw_i2c_read_reg( MPU6050_ADDRESS, reg, &value );
 8001cda:	f107 020f 	add.w	r2, r7, #15
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	20d2      	movs	r0, #210	; 0xd2
 8001ce4:	f7ff fde8 	bl	80018b8 <sw_i2c_read_reg>

	return value;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <MPU6050__readRegister8>:
// Read 8-bit from register
static uint8_t 	MPU6050__readRegister8( uint8_t reg ) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]

	sw_i2c_read_reg( MPU6050_ADDRESS, reg, &value );
 8001d00:	f107 020f 	add.w	r2, r7, #15
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4619      	mov	r1, r3
 8001d08:	20d2      	movs	r0, #210	; 0xd2
 8001d0a:	f7ff fdd5 	bl	80018b8 <sw_i2c_read_reg>

	return value;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <MPU6050__writeRegister8>:
// Write 8-bit to register
static void 	MPU6050__writeRegister8( uint8_t reg, uint8_t value ) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	sw_i2c_write_reg( MPU6050_ADDRESS, reg, value );
 8001d28:	79ba      	ldrb	r2, [r7, #6]
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	20d2      	movs	r0, #210	; 0xd2
 8001d30:	f7ff fcf0 	bl	8001714 <sw_i2c_write_reg>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MPU6050__writeRegisterBit>:
	uint8_t value;
	value = MPU6050__readRegister8(reg);
	return ((value >> pos) & 1);
}
// Write register bit
static void	MPU6050__writeRegisterBit( uint8_t reg, uint8_t pos, bool state ) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	460b      	mov	r3, r1
 8001d48:	71bb      	strb	r3, [r7, #6]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	717b      	strb	r3, [r7, #5]
	uint8_t value;
	value = MPU6050__readRegister8(reg);
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffce 	bl	8001cf2 <MPU6050__readRegister8>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]

	if (state) {
 8001d5a:	797b      	ldrb	r3, [r7, #5]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <MPU6050__writeRegisterBit+0x3a>
		value |= (1 << pos);
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2201      	movs	r2, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	b25a      	sxtb	r2, r3
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e00b      	b.n	8001d8e <MPU6050__writeRegisterBit+0x52>
	} else {
		value &= ~(1 << pos);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	73fb      	strb	r3, [r7, #15]
	}
	MPU6050__writeRegister8(reg, value );
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ffbf 	bl	8001d18 <MPU6050__writeRegister8>
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <MPU6050__setThreshold>:
/****************************************************************************/

// Set threshold value
void MPU6050__setThreshold( uint8_t multiple ) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	if (multiple > 0) {
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d031      	beq.n	8001e18 <MPU6050__setThreshold+0x74>
// If not calibrated, need calibrate
		if (!useCalibrate) {
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <MPU6050__setThreshold+0xa4>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <MPU6050__setThreshold+0x24>
			MPU6050__calibrateGyro( 50 );
 8001dc2:	2032      	movs	r0, #50	; 0x32
 8001dc4:	f000 f848 	bl	8001e58 <MPU6050__calibrateGyro>
		}
// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <MPU6050__setThreshold+0xa8>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001dde:	edc3 7a00 	vstr	s15, [r3]
		tg.YAxis = th.YAxis * multiple;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MPU6050__setThreshold+0xa8>)
 8001de4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001df8:	edc3 7a01 	vstr	s15, [r3, #4]
		tg.ZAxis = th.ZAxis * multiple;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MPU6050__setThreshold+0xa8>)
 8001dfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001e12:	edc3 7a02 	vstr	s15, [r3, #8]
 8001e16:	e00b      	b.n	8001e30 <MPU6050__setThreshold+0x8c>
	} else {
		// No threshold
		tg.XAxis = 0;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
		tg.YAxis = 0;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	605a      	str	r2, [r3, #4]
		tg.ZAxis = 0;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MPU6050__setThreshold+0xac>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
	}
// Remember old threshold value
	actualThreshold = multiple;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3a:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MPU6050__setThreshold+0xb0>)
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000114 	.word	0x20000114
 8001e4c:	200000fc 	.word	0x200000fc
 8001e50:	200000e4 	.word	0x200000e4
 8001e54:	20000110 	.word	0x20000110

08001e58 <MPU6050__calibrateGyro>:

// Calibrate algorithm
void MPU6050__calibrateGyro( uint8_t samples ) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	// Set calibrate
	useCalibrate = true;
 8001e62:	4b87      	ldr	r3, [pc, #540]	; (8002080 <MPU6050__calibrateGyro+0x228>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]

	// Reset values
	float sumX = 0;
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
	float sumY = 0;
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
	float sumZ = 0;
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
	float sigmaX = 0;
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
	float sigmaY = 0;
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
	float sigmaZ = 0;
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]

	// Read n-samples
	for ( uint8_t i = 0; i < samples; ++i) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e04c      	b.n	8001f2c <MPU6050__calibrateGyro+0xd4>
		MPU6050__readRawGyro();
 8001e92:	f000 fab9 	bl	8002408 <MPU6050__readRawGyro>
		sumX += rg.XAxis;
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		sumY += rg.YAxis;
 8001ea8:	4b76      	ldr	r3, [pc, #472]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc7 7a08 	vstr	s15, [r7, #32]
		sumZ += rg.ZAxis;
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001ebc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ec0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec8:	edc7 7a07 	vstr	s15, [r7, #28]

		sigmaX += rg.XAxis * rg.XAxis;
 8001ecc:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	edc7 7a06 	vstr	s15, [r7, #24]
		sigmaY += rg.YAxis * rg.YAxis;
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001eea:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eee:	4b65      	ldr	r3, [pc, #404]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	edc7 7a05 	vstr	s15, [r7, #20]
		sigmaZ += rg.ZAxis * rg.ZAxis;
 8001f04:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f0a:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <MPU6050__calibrateGyro+0x22c>)
 8001f0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	edc7 7a04 	vstr	s15, [r7, #16]

		delay_ms(5);
 8001f20:	2005      	movs	r0, #5
 8001f22:	f001 fd73 	bl	8003a0c <delay_ms>
	for ( uint8_t i = 0; i < samples; ++i) {
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3ae      	bcc.n	8001e92 <MPU6050__calibrateGyro+0x3a>
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f46:	4b50      	ldr	r3, [pc, #320]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	dg.YAxis = sumY / samples;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001f60:	edc3 7a01 	vstr	s15, [r3, #4]
	dg.ZAxis = sumZ / samples;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	4b44      	ldr	r3, [pc, #272]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001f78:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	eddf 6a42 	vldr	s13, [pc, #264]	; 800208c <MPU6050__calibrateGyro+0x234>
 8001f84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f88:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001f8a:	edd3 6a00 	vldr	s13, [r3]
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	ee17 0a90 	vmov	r0, s15
 8001fa0:	f7fe fa7a 	bl	8000498 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	ec43 2b10 	vmov	d0, r2, r3
 8001fac:	f001 fe1c 	bl	8003be8 <sqrt>
 8001fb0:	ec53 2b10 	vmov	r2, r3, d0
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fd76 	bl	8000aa8 <__aeabi_d2f>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4a34      	ldr	r2, [pc, #208]	; (8002090 <MPU6050__calibrateGyro+0x238>)
 8001fc0:	6013      	str	r3, [r2, #0]
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
 8001fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800208c <MPU6050__calibrateGyro+0x234>
 8001fca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001fd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8001fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe2:	ee17 0a90 	vmov	r0, s15
 8001fe6:	f7fe fa57 	bl	8000498 <__aeabi_f2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	ec43 2b10 	vmov	d0, r2, r3
 8001ff2:	f001 fdf9 	bl	8003be8 <sqrt>
 8001ff6:	ec53 2b10 	vmov	r2, r3, d0
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd53 	bl	8000aa8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <MPU6050__calibrateGyro+0x238>)
 8002006:	6053      	str	r3, [r2, #4]
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
 8002008:	edd7 7a04 	vldr	s15, [r7, #16]
 800200c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800208c <MPU6050__calibrateGyro+0x234>
 8002010:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 8002016:	edd3 6a02 	vldr	s13, [r3, #8]
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <MPU6050__calibrateGyro+0x230>)
 800201c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002028:	ee17 0a90 	vmov	r0, s15
 800202c:	f7fe fa34 	bl	8000498 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	ec43 2b10 	vmov	d0, r2, r3
 8002038:	f001 fdd6 	bl	8003be8 <sqrt>
 800203c:	ec53 2b10 	vmov	r2, r3, d0
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd30 	bl	8000aa8 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <MPU6050__calibrateGyro+0x238>)
 800204c:	6093      	str	r3, [r2, #8]

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0) {
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MPU6050__calibrateGyro+0x23c>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205c:	dc00      	bgt.n	8002060 <MPU6050__calibrateGyro+0x208>
		MPU6050__setThreshold( actualThreshold );
	}
}
 800205e:	e00b      	b.n	8002078 <MPU6050__calibrateGyro+0x220>
		MPU6050__setThreshold( actualThreshold );
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MPU6050__calibrateGyro+0x23c>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	edc7 7a00 	vstr	s15, [r7]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe96 	bl	8001da4 <MPU6050__setThreshold>
}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000114 	.word	0x20000114
 8002084:	200000cc 	.word	0x200000cc
 8002088:	200000f0 	.word	0x200000f0
 800208c:	42480000 	.word	0x42480000
 8002090:	200000fc 	.word	0x200000fc
 8002094:	20000110 	.word	0x20000110

08002098 <MPU6050__init>:


bool MPU6050__init( mpu6050_dps_t scale, mpu6050_range_t range ) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	460a      	mov	r2, r1
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71bb      	strb	r3, [r7, #6]
//	sw_i2c_simple_init();

	// Reset calibrate values
	dg.XAxis 		= 0;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MPU6050__init+0x84>)
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
	dg.YAxis 		= 0;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MPU6050__init+0x84>)
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
	dg.ZAxis 		= 0;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MPU6050__init+0x84>)
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
	useCalibrate 	= false;
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MPU6050__init+0x88>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]

	// Reset threshold values
	tg.XAxis 		= 0;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MPU6050__init+0x8c>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
	tg.YAxis 		= 0;
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MPU6050__init+0x8c>)
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	605a      	str	r2, [r3, #4]
	tg.ZAxis 		= 0;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MPU6050__init+0x8c>)
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
	actualThreshold = 0;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MPU6050__init+0x90>)
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

	// Check MPU6050 Who Am I Register
	if ( MPU6050__fastRegister8( MPU6050_REG_WHO_AM_I ) != 0x68 ) {
 80020e6:	2075      	movs	r0, #117	; 0x75
 80020e8:	f7ff fdf0 	bl	8001ccc <MPU6050__fastRegister8>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b68      	cmp	r3, #104	; 0x68
 80020f0:	d001      	beq.n	80020f6 <MPU6050__init+0x5e>
		return false;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e00e      	b.n	8002114 <MPU6050__init+0x7c>
	}

	// Set Clock Source
	MPU6050__setClockSource( MPU6050_CLOCK_PLL_XGYRO );
 80020f6:	2001      	movs	r0, #1
 80020f8:	f000 f8ac 	bl	8002254 <MPU6050__setClockSource>

	// Set Scale & Range
	MPU6050__setScale( scale );
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f814 	bl	800212c <MPU6050__setScale>
	MPU6050__setRange( range );
 8002104:	79bb      	ldrb	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f85a 	bl	80021c0 <MPU6050__setRange>

	// Disable Sleep Mode
	MPU6050__setSleepEnabled( false );
 800210c:	2000      	movs	r0, #0
 800210e:	f000 f8bc 	bl	800228a <MPU6050__setSleepEnabled>

	return true;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	200000f0 	.word	0x200000f0
 8002120:	20000114 	.word	0x20000114
 8002124:	200000e4 	.word	0x200000e4
 8002128:	20000110 	.word	0x20000110

0800212c <MPU6050__setScale>:

void MPU6050__setScale( mpu6050_dps_t scale ) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch (scale) {
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d81b      	bhi.n	8002174 <MPU6050__setScale+0x48>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <MPU6050__setScale+0x18>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	08002155 	.word	0x08002155
 8002148:	0800215d 	.word	0x0800215d
 800214c:	08002165 	.word	0x08002165
 8002150:	0800216d 	.word	0x0800216d
	case MPU6050_SCALE_250DPS:
		dpsPerDigit = 0.007633f;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <MPU6050__setScale+0x80>)
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <MPU6050__setScale+0x84>)
 8002158:	601a      	str	r2, [r3, #0]
		break;
 800215a:	e00c      	b.n	8002176 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_500DPS:
		dpsPerDigit = 0.015267f;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <MPU6050__setScale+0x80>)
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <MPU6050__setScale+0x88>)
 8002160:	601a      	str	r2, [r3, #0]
		break;
 8002162:	e008      	b.n	8002176 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_1000DPS:
		dpsPerDigit = 0.030487f;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MPU6050__setScale+0x80>)
 8002166:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <MPU6050__setScale+0x8c>)
 8002168:	601a      	str	r2, [r3, #0]
		break;
 800216a:	e004      	b.n	8002176 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_2000DPS:
		dpsPerDigit = 0.060975f;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MPU6050__setScale+0x80>)
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <MPU6050__setScale+0x90>)
 8002170:	601a      	str	r2, [r3, #0]
		break;
 8002172:	e000      	b.n	8002176 <MPU6050__setScale+0x4a>
	default:
		break;
 8002174:	bf00      	nop
	}
	value = MPU6050__readRegister8( MPU6050_REG_GYRO_CONFIG);
 8002176:	201b      	movs	r0, #27
 8002178:	f7ff fdbb 	bl	8001cf2 <MPU6050__readRegister8>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111;
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	f023 0318 	bic.w	r3, r3, #24
 8002186:	73fb      	strb	r3, [r7, #15]
	value |= (scale << 3);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	b25a      	sxtb	r2, r3
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4313      	orrs	r3, r2
 8002194:	b25b      	sxtb	r3, r3
 8002196:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_GYRO_CONFIG, value );
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	4619      	mov	r1, r3
 800219c:	201b      	movs	r0, #27
 800219e:	f7ff fdbb 	bl	8001d18 <MPU6050__writeRegister8>
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000108 	.word	0x20000108
 80021b0:	3bfa1e3f 	.word	0x3bfa1e3f
 80021b4:	3c7a2270 	.word	0x3c7a2270
 80021b8:	3cf9bfdf 	.word	0x3cf9bfdf
 80021bc:	3d79c0ec 	.word	0x3d79c0ec

080021c0 <MPU6050__setRange>:
	value &= 0b00011000;
	value >>= 3;
	return ( mpu6050_dps_t) value;
}

void MPU6050__setRange( mpu6050_range_t range) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch (range) {
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d81b      	bhi.n	8002208 <MPU6050__setRange+0x48>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <MPU6050__setRange+0x18>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	080021f1 	.word	0x080021f1
 80021e0:	080021f9 	.word	0x080021f9
 80021e4:	08002201 	.word	0x08002201
	case MPU6050_RANGE_2G:
		rangePerDigit = 0.000061f;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MPU6050__setRange+0x80>)
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <MPU6050__setRange+0x84>)
 80021ec:	601a      	str	r2, [r3, #0]
		break;
 80021ee:	e00c      	b.n	800220a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_4G:
		rangePerDigit = 0.000122f;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MPU6050__setRange+0x80>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MPU6050__setRange+0x88>)
 80021f4:	601a      	str	r2, [r3, #0]
		break;
 80021f6:	e008      	b.n	800220a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_8G:
		rangePerDigit = 0.000244f;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MPU6050__setRange+0x80>)
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <MPU6050__setRange+0x8c>)
 80021fc:	601a      	str	r2, [r3, #0]
		break;
 80021fe:	e004      	b.n	800220a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_16G:
		rangePerDigit = 0.0004882f;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MPU6050__setRange+0x80>)
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <MPU6050__setRange+0x90>)
 8002204:	601a      	str	r2, [r3, #0]
		break;
 8002206:	e000      	b.n	800220a <MPU6050__setRange+0x4a>
	default:
		break;
 8002208:	bf00      	nop
	}

	value = MPU6050__readRegister8( MPU6050_REG_ACCEL_CONFIG);
 800220a:	201c      	movs	r0, #28
 800220c:	f7ff fd71 	bl	8001cf2 <MPU6050__readRegister8>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	f023 0318 	bic.w	r3, r3, #24
 800221a:	73fb      	strb	r3, [r7, #15]
	value |= (range << 3);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	b25a      	sxtb	r2, r3
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4313      	orrs	r3, r2
 8002228:	b25b      	sxtb	r3, r3
 800222a:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_ACCEL_CONFIG, value );
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	4619      	mov	r1, r3
 8002230:	201c      	movs	r0, #28
 8002232:	f7ff fd71 	bl	8001d18 <MPU6050__writeRegister8>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000010c 	.word	0x2000010c
 8002244:	387fda40 	.word	0x387fda40
 8002248:	38ffda40 	.word	0x38ffda40
 800224c:	397fda40 	.word	0x397fda40
 8002250:	39fff518 	.word	0x39fff518

08002254 <MPU6050__setClockSource>:
	value &= 0b11111000;
	value |= dlpf;
	MPU6050__writeRegister8( MPU6050_REG_CONFIG, value );
}

void MPU6050__setClockSource( mpu6050_clockSource_t source) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	value = MPU6050__readRegister8( MPU6050_REG_PWR_MGMT_1);
 800225e:	206b      	movs	r0, #107	; 0x6b
 8002260:	f7ff fd47 	bl	8001cf2 <MPU6050__readRegister8>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111000;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	73fb      	strb	r3, [r7, #15]
	value |= source;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4313      	orrs	r3, r2
 8002276:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_PWR_MGMT_1, value );
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	4619      	mov	r1, r3
 800227c:	206b      	movs	r0, #107	; 0x6b
 800227e:	f7ff fd4b 	bl	8001d18 <MPU6050__writeRegister8>
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <MPU6050__setSleepEnabled>:

bool MPU6050__getSleepEnabled(void) {
	return MPU6050__readRegisterBit( MPU6050_REG_PWR_MGMT_1, 6);
}

void MPU6050__setSleepEnabled( bool state) {
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
	MPU6050__writeRegisterBit( MPU6050_REG_PWR_MGMT_1, 6, state);
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	461a      	mov	r2, r3
 8002298:	2106      	movs	r1, #6
 800229a:	206b      	movs	r0, #107	; 0x6b
 800229c:	f7ff fd4e 	bl	8001d3c <MPU6050__writeRegisterBit>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <MPU6050__readRawAccel>:
	a.isPosActivityOnZ = ((data >> 2) & 1);

	return a;
}

struct Vector MPU6050__readRawAccel(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
	uint8_t buffer[6];
	sw_i2c_read_block( MPU6050_ADDRESS, MPU6050_REG_ACCEL_XOUT_H, 6, buffer );
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	2206      	movs	r2, #6
 80022b4:	213b      	movs	r1, #59	; 0x3b
 80022b6:	20d2      	movs	r0, #210	; 0xd2
 80022b8:	f7fe ffc2 	bl	8001240 <sw_i2c_read_block>

	uint8_t xha = buffer[0];
 80022bc:	7d3b      	ldrb	r3, [r7, #20]
 80022be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t xla = buffer[1];
 80022c2:	7d7b      	ldrb	r3, [r7, #21]
 80022c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t yha = buffer[2];
 80022c8:	7dbb      	ldrb	r3, [r7, #22]
 80022ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t yla = buffer[3];
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t zha = buffer[4];
 80022d4:	7e3b      	ldrb	r3, [r7, #24]
 80022d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t zla = buffer[5];
 80022da:	7e7b      	ldrb	r3, [r7, #25]
 80022dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	ra.XAxis = xha << 8 | xla;
 80022e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022e4:	021a      	lsls	r2, r3, #8
 80022e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022ea:	4313      	orrs	r3, r2
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <MPU6050__readRawAccel+0xb8>)
 80022f6:	edc3 7a00 	vstr	s15, [r3]
	ra.YAxis = yha << 8 | yla;
 80022fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022fe:	021a      	lsls	r2, r3, #8
 8002300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002304:	4313      	orrs	r3, r2
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MPU6050__readRawAccel+0xb8>)
 8002310:	edc3 7a01 	vstr	s15, [r3, #4]
	ra.ZAxis = zha << 8 | zla;
 8002314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800231e:	4313      	orrs	r3, r2
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <MPU6050__readRawAccel+0xb8>)
 800232a:	edc3 7a02 	vstr	s15, [r3, #8]

	return ra;
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <MPU6050__readRawAccel+0xb8>)
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	ca07      	ldmia	r2, {r0, r1, r2}
 8002336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800233a:	69f9      	ldr	r1, [r7, #28]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	ee06 1a90 	vmov	s13, r1
 8002344:	ee07 2a10 	vmov	s14, r2
 8002348:	ee07 3a90 	vmov	s15, r3
}
 800234c:	eeb0 0a66 	vmov.f32	s0, s13
 8002350:	eef0 0a47 	vmov.f32	s1, s14
 8002354:	eeb0 1a67 	vmov.f32	s2, s15
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000c0 	.word	0x200000c0

08002364 <MPU6050__readNormalizeAccel>:

struct Vector MPU6050__readNormalizeAccel(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
	MPU6050__readRawAccel();
 800236a:	f7ff ff9d 	bl	80022a8 <MPU6050__readRawAccel>

	na.XAxis = ra.XAxis * rangePerDigit * 9.80665f;
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <MPU6050__readNormalizeAccel+0x94>)
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <MPU6050__readNormalizeAccel+0x98>)
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002400 <MPU6050__readNormalizeAccel+0x9c>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MPU6050__readNormalizeAccel+0xa0>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
	na.YAxis = ra.YAxis * rangePerDigit * 9.80665f;
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <MPU6050__readNormalizeAccel+0x94>)
 800238e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MPU6050__readNormalizeAccel+0x98>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002400 <MPU6050__readNormalizeAccel+0x9c>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MPU6050__readNormalizeAccel+0xa0>)
 80023a6:	edc3 7a01 	vstr	s15, [r3, #4]
	na.ZAxis = ra.ZAxis * rangePerDigit * 9.80665f;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MPU6050__readNormalizeAccel+0x94>)
 80023ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <MPU6050__readNormalizeAccel+0x98>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002400 <MPU6050__readNormalizeAccel+0x9c>
 80023be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MPU6050__readNormalizeAccel+0xa0>)
 80023c4:	edc3 7a02 	vstr	s15, [r3, #8]

	return na;
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <MPU6050__readNormalizeAccel+0xa0>)
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023d4:	6979      	ldr	r1, [r7, #20]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	ee06 1a90 	vmov	s13, r1
 80023de:	ee07 2a10 	vmov	s14, r2
 80023e2:	ee07 3a90 	vmov	s15, r3
}
 80023e6:	eeb0 0a66 	vmov.f32	s0, s13
 80023ea:	eef0 0a47 	vmov.f32	s1, s14
 80023ee:	eeb0 1a67 	vmov.f32	s2, s15
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	200000c0 	.word	0x200000c0
 80023fc:	2000010c 	.word	0x2000010c
 8002400:	411ce80a 	.word	0x411ce80a
 8002404:	200000d8 	.word	0x200000d8

08002408 <MPU6050__readRawGyro>:
	na.ZAxis = ra.ZAxis * rangePerDigit;

	return na;
}

struct Vector MPU6050__readRawGyro(void) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0
	uint8_t buff[6];
	sw_i2c_read_block( MPU6050_ADDRESS, MPU6050_REG_GYRO_XOUT_H, 6, buff );
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	2206      	movs	r2, #6
 8002414:	2143      	movs	r1, #67	; 0x43
 8002416:	20d2      	movs	r0, #210	; 0xd2
 8002418:	f7fe ff12 	bl	8001240 <sw_i2c_read_block>
	uint8_t xha = buff[0];
 800241c:	7d3b      	ldrb	r3, [r7, #20]
 800241e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t xla = buff[1];
 8002422:	7d7b      	ldrb	r3, [r7, #21]
 8002424:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t yha = buff[2];
 8002428:	7dbb      	ldrb	r3, [r7, #22]
 800242a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t yla = buff[3];
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t zha = buff[4];
 8002434:	7e3b      	ldrb	r3, [r7, #24]
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t zla = buff[5];
 800243a:	7e7b      	ldrb	r3, [r7, #25]
 800243c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	rg.XAxis = xha << 8 | xla;
 8002440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800244a:	4313      	orrs	r3, r2
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MPU6050__readRawGyro+0xb8>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
	rg.YAxis = yha << 8 | yla;
 800245a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002464:	4313      	orrs	r3, r2
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MPU6050__readRawGyro+0xb8>)
 8002470:	edc3 7a01 	vstr	s15, [r3, #4]
	rg.ZAxis = zha << 8 | zla;
 8002474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002478:	021a      	lsls	r2, r3, #8
 800247a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800247e:	4313      	orrs	r3, r2
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <MPU6050__readRawGyro+0xb8>)
 800248a:	edc3 7a02 	vstr	s15, [r3, #8]

	return rg;
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <MPU6050__readRawGyro+0xb8>)
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	ca07      	ldmia	r2, {r0, r1, r2}
 8002496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800249a:	69f9      	ldr	r1, [r7, #28]
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	ee06 1a90 	vmov	s13, r1
 80024a4:	ee07 2a10 	vmov	s14, r2
 80024a8:	ee07 3a90 	vmov	s15, r3
}
 80024ac:	eeb0 0a66 	vmov.f32	s0, s13
 80024b0:	eef0 0a47 	vmov.f32	s1, s14
 80024b4:	eeb0 1a67 	vmov.f32	s2, s15
 80024b8:	3730      	adds	r7, #48	; 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000cc 	.word	0x200000cc

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	; (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ffc2 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <SystemClock_Config>:
			 );
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	2304      	movs	r3, #4
 8002564:	607b      	str	r3, [r7, #4]
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <SystemClock_Config+0x190>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	495f      	ldr	r1, [pc, #380]	; (80026ec <SystemClock_Config+0x190>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 8002576:	bf00      	nop
 8002578:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <SystemClock_Config+0x190>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f9      	beq.n	8002578 <SystemClock_Config+0x1c>
}
 8002584:	bf00      	nop
	MODIFY_REG( PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS_0 );
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <SystemClock_Config+0x194>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <SystemClock_Config+0x194>)
 8002590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002594:	6013      	str	r3, [r2, #0]
	while ( (PWR->SR2 & PWR_SR2_VOSF) ) {}
 8002596:	bf00      	nop
 8002598:	4b55      	ldr	r3, [pc, #340]	; (80026f0 <SystemClock_Config+0x194>)
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <SystemClock_Config+0x3c>
}
 80025a4:	bf00      	nop
 80025a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025aa:	613b      	str	r3, [r7, #16]
	switch ( clock ) {
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b2:	d004      	beq.n	80025be <SystemClock_Config+0x62>
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ba:	d006      	beq.n	80025ca <SystemClock_Config+0x6e>
			break;
 80025bc:	e00c      	b.n	80025d8 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSIRDY;
 80025be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c2:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSION;
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <SystemClock_Config+0x198>)
 80025c6:	60bb      	str	r3, [r7, #8]
			break;
 80025c8:	e006      	b.n	80025d8 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSERDY;
 80025ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ce:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSEBYP | RCC_CR_HSEON;
 80025d0:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 80025d4:	60bb      	str	r3, [r7, #8]
			break;
 80025d6:	bf00      	nop
	SET_BIT( RCC->CR, reg ) ;
 80025d8:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <SystemClock_Config+0x19c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4946      	ldr	r1, [pc, #280]	; (80026f8 <SystemClock_Config+0x19c>)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 80025e4:	bf00      	nop
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <SystemClock_Config+0x19c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f9      	beq.n	80025e6 <SystemClock_Config+0x8a>
}
 80025f2:	bf00      	nop
	uint16_t pllm = 1;			// 1, 2 - 8
 80025f4:	2301      	movs	r3, #1
 80025f6:	837b      	strh	r3, [r7, #26]
	uint16_t plln = 10;			// 8, 9 - 86
 80025f8:	230a      	movs	r3, #10
 80025fa:	833b      	strh	r3, [r7, #24]
	uint16_t pllr = 2;			// 2, 4, 6, 8,
 80025fc:	2302      	movs	r3, #2
 80025fe:	82fb      	strh	r3, [r7, #22]
	pllr = (uint8_t)pllr/2 - 1;
 8002600:	8afb      	ldrh	r3, [r7, #22]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	82fb      	strh	r3, [r7, #22]
	MODIFY_REG( RCC->PLLCFGR,
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <SystemClock_Config+0x19c>)
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <SystemClock_Config+0x1a0>)
 8002614:	4013      	ands	r3, r2
 8002616:	8b7a      	ldrh	r2, [r7, #26]
 8002618:	3a01      	subs	r2, #1
 800261a:	0111      	lsls	r1, r2, #4
 800261c:	8b3a      	ldrh	r2, [r7, #24]
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	4311      	orrs	r1, r2
 8002622:	8afa      	ldrh	r2, [r7, #22]
 8002624:	0652      	lsls	r2, r2, #25
 8002626:	430a      	orrs	r2, r1
 8002628:	4611      	mov	r1, r2
 800262a:	4a33      	ldr	r2, [pc, #204]	; (80026f8 <SystemClock_Config+0x19c>)
 800262c:	430b      	orrs	r3, r1
 800262e:	60d3      	str	r3, [r2, #12]
}
 8002630:	bf00      	nop
 8002632:	2302      	movs	r3, #2
 8002634:	61fb      	str	r3, [r7, #28]
	SET_BIT( RCC->PLLCFGR, source );
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <SystemClock_Config+0x19c>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	492f      	ldr	r1, [pc, #188]	; (80026f8 <SystemClock_Config+0x19c>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
}
 8002642:	bf00      	nop
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <SystemClock_Config+0x19c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <SystemClock_Config+0x19c>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC->PLLCFGR, RCC_PLLCFGR_PLLREN );
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <SystemClock_Config+0x19c>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <SystemClock_Config+0x19c>)
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265a:	60d3      	str	r3, [r2, #12]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 800265c:	bf00      	nop
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <SystemClock_Config+0x19c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f9      	beq.n	800265e <SystemClock_Config+0x102>
}
 800266a:	bf00      	nop
	MODIFY_REG( RCC->CFGR,
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <SystemClock_Config+0x19c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <SystemClock_Config+0x19c>)
 8002672:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002676:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800267a:	6093      	str	r3, [r2, #8]
}
 800267c:	bf00      	nop
 800267e:	2303      	movs	r3, #3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
	switch ( pllSource ) {
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2b03      	cmp	r3, #3
 8002686:	d009      	beq.n	800269c <SystemClock_Config+0x140>
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b03      	cmp	r3, #3
 800268c:	d80f      	bhi.n	80026ae <SystemClock_Config+0x152>
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d006      	beq.n	80026a2 <SystemClock_Config+0x146>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2b02      	cmp	r3, #2
 8002698:	d006      	beq.n	80026a8 <SystemClock_Config+0x14c>
			break;
 800269a:	e008      	b.n	80026ae <SystemClock_Config+0x152>
			sourceCheck = RCC_CFGR_SWS_PLL;
 800269c:	230c      	movs	r3, #12
 800269e:	623b      	str	r3, [r7, #32]
			break;
 80026a0:	e006      	b.n	80026b0 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSI;
 80026a2:	2304      	movs	r3, #4
 80026a4:	623b      	str	r3, [r7, #32]
			break;
 80026a6:	e003      	b.n	80026b0 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSE;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
			break;
 80026ac:	e000      	b.n	80026b0 <SystemClock_Config+0x154>
			break;
 80026ae:	bf00      	nop
	SET_BIT( RCC->CFGR, pllSource);
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <SystemClock_Config+0x19c>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4910      	ldr	r1, [pc, #64]	; (80026f8 <SystemClock_Config+0x19c>)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 80026bc:	bf00      	nop
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <SystemClock_Config+0x19c>)
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f9      	beq.n	80026be <SystemClock_Config+0x162>
}
 80026ca:	bf00      	nop

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 80026cc:	f7fe fbde 	bl	8000e8c <SystemCoreClockUpdate>
	SysTick_Config( SystemCoreClock / 1000 );	// Systick on 1 ms
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <SystemClock_Config+0x1a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <SystemClock_Config+0x1a8>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff1b 	bl	8002518 <SysTick_Config>
}
 80026e2:	bf00      	nop
 80026e4:	3728      	adds	r7, #40	; 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	00080100 	.word	0x00080100
 80026f8:	40021000 	.word	0x40021000
 80026fc:	f9ff808f 	.word	0xf9ff808f
 8002700:	20000000 	.word	0x20000000
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <__NVIC_EnableIRQ>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	; (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <sw_hardware_TWI_write_buf>:

#include "sw_i2c_simple_v2.h"
#include "sw_vcnl4010.h"


static void sw_hardware_TWI_write_buf(uint8_t devAddr, uint8_t reg, uint16_t nBytes, uint8_t *pBuff ) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	460b      	mov	r3, r1
 8002752:	71bb      	strb	r3, [r7, #6]
 8002754:	4613      	mov	r3, r2
 8002756:	80bb      	strh	r3, [r7, #4]
	sw_i2c_write_block( devAddr, reg, nBytes, pBuff );
 8002758:	88ba      	ldrh	r2, [r7, #4]
 800275a:	79b9      	ldrb	r1, [r7, #6]
 800275c:	79f8      	ldrb	r0, [r7, #7]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f7fe fe7e 	bl	8001460 <sw_i2c_write_block>
	delay_us(100);
 8002764:	2064      	movs	r0, #100	; 0x64
 8002766:	f001 f969 	bl	8003a3c <delay_us>
};
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <vcnl4010_write_reg>:
static void sw_hardware_TWI_read_buf( uint8_t devAddr, uint8_t reg, uint16_t nBytes, uint8_t *pBuff ) {
	sw_i2c_read_block ( devAddr, reg, nBytes, pBuff  );
	delay_us(100);
}

static void vcnl4010_write_reg( uint8_t devReg, uint8_t data ) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	460a      	mov	r2, r1
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	4613      	mov	r3, r2
 8002780:	71bb      	strb	r3, [r7, #6]
	sw_i2c_write_reg( VCNL4010_I2C_ADDR, devReg, data );
 8002782:	79ba      	ldrb	r2, [r7, #6]
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4619      	mov	r1, r3
 8002788:	2026      	movs	r0, #38	; 0x26
 800278a:	f7fe ffc3 	bl	8001714 <sw_i2c_write_reg>
	delay_us(100);
 800278e:	2064      	movs	r0, #100	; 0x64
 8002790:	f001 f954 	bl	8003a3c <delay_us>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <vcnl4010_read_reg>:
static void vcnl4010_read_reg( uint8_t devReg, uint8_t *data ) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
	sw_i2c_read_reg( VCNL4010_I2C_ADDR, devReg, data );
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	2026      	movs	r0, #38	; 0x26
 80027b0:	f7ff f882 	bl	80018b8 <sw_i2c_read_reg>
	delay_us(100);
 80027b4:	2064      	movs	r0, #100	; 0x64
 80027b6:	f001 f941 	bl	8003a3c <delay_us>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <register_measure_callback>:
volatile static uint8_t measureDataReadyFlag	= 0;

static T_RESULTS results;				// Kontener na pomiary

static void ( *measure_callback )( T_RESULTS *results );
void register_measure_callback( void (*callback)( T_RESULTS *results) ) {
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	measure_callback = callback;
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <register_measure_callback+0x1c>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000118 	.word	0x20000118

080027e4 <vcnl4010_set_led_current>:

void vcnl4010_set_led_current( uint8_t current ) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
	if (current > 20)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b14      	cmp	r3, #20
 80027f2:	d901      	bls.n	80027f8 <vcnl4010_set_led_current+0x14>
		current = 20;
 80027f4:	2314      	movs	r3, #20
 80027f6:	71fb      	strb	r3, [r7, #7]
	vcnl4010_write_reg( VCNL4010_IR_LED_CURRENT_REG, current );
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	4619      	mov	r1, r3
 80027fc:	2083      	movs	r0, #131	; 0x83
 80027fe:	f7ff ffb8 	bl	8002772 <vcnl4010_write_reg>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <vcnl4010_set_frequency>:

void vcnl4010_set_frequency( uint8_t freq ) {
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_reg = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
	vcnl4010_read_reg( VCNL4010_MOD_TIMING, &temp_reg);
 8002818:	f107 030f 	add.w	r3, r7, #15
 800281c:	4619      	mov	r1, r3
 800281e:	208f      	movs	r0, #143	; 0x8f
 8002820:	f7ff ffbc 	bl	800279c <vcnl4010_read_reg>

	temp_reg = temp_reg & ~((1<<3)|(1<<4));		// Maskujemy 4 i 3 bit rejestru ~(b00011000)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	f023 0318 	bic.w	r3, r3, #24
 800282a:	b2db      	uxtb	r3, r3
 800282c:	73fb      	strb	r3, [r7, #15]
	freq = freq << 3;							// Ustawiamy freq na 3 i 4 bicie
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	71fb      	strb	r3, [r7, #7]
	temp_reg = temp_reg | freq;					// Ustawiamy bity freq w rejestrze
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4313      	orrs	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	73fb      	strb	r3, [r7, #15]

	vcnl4010_write_reg( VCNL4010_MOD_TIMING, temp_reg );
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	4619      	mov	r1, r3
 8002842:	208f      	movs	r0, #143	; 0x8f
 8002844:	f7ff ff95 	bl	8002772 <vcnl4010_write_reg>
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <vcnl_set_threshold>:

static void vcnl_set_threshold( const uint8_t THRESHOLD, uint16_t threshold ) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	460a      	mov	r2, r1
 800285a:	71fb      	strb	r3, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = (uint8_t)(threshold>>8)&0x00FF;
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29b      	uxth	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(threshold & 0x00FF);
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	737b      	strb	r3, [r7, #13]
	if ( !THRESHOLD )
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <vcnl_set_threshold+0x36>
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG, 	 2, buf );
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	2202      	movs	r2, #2
 800287c:	218a      	movs	r1, #138	; 0x8a
 800287e:	2026      	movs	r0, #38	; 0x26
 8002880:	f7ff ff60 	bl	8002744 <sw_hardware_TWI_write_buf>
	else
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG + 2, 2, buf );

}
 8002884:	e006      	b.n	8002894 <vcnl_set_threshold+0x44>
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG + 2, 2, buf );
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	2202      	movs	r2, #2
 800288c:	218c      	movs	r1, #140	; 0x8c
 800288e:	2026      	movs	r0, #38	; 0x26
 8002890:	f7ff ff58 	bl	8002744 <sw_hardware_TWI_write_buf>
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <vcnl4010_init>:

uint8_t vcnl4010_init( void ) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
	uint8_t revision, control = INT_PROXI_READY_ENABLE;
 80028a2:	2308      	movs	r3, #8
 80028a4:	71fb      	strb	r3, [r7, #7]

	vcnl4010_read_reg( VCNL4010_PROD_ID_REVISION_REG, &revision);
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	4619      	mov	r1, r3
 80028aa:	2081      	movs	r0, #129	; 0x81
 80028ac:	f7ff ff76 	bl	800279c <vcnl4010_read_reg>
	if ( (revision & 0xF0) != 0x20 ) {
 80028b0:	79bb      	ldrb	r3, [r7, #6]
 80028b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d001      	beq.n	80028be <vcnl4010_init+0x22>
		return 0;					// Error
 80028ba:	2300      	movs	r3, #0
 80028bc:	e034      	b.n	8002928 <vcnl4010_init+0x8c>
	}
	vcnl4010_set_led_current( 20 );
 80028be:	2014      	movs	r0, #20
 80028c0:	f7ff ff90 	bl	80027e4 <vcnl4010_set_led_current>
	vcnl4010_set_frequency( VCNL4010_3M125 );
 80028c4:	2003      	movs	r0, #3
 80028c6:	f7ff ffa0 	bl	800280a <vcnl4010_set_frequency>
	vcnl_set_threshold( VCNL4010_THRESHOLD_LOW,  0xaabb );
 80028ca:	f64a 21bb 	movw	r1, #43707	; 0xaabb
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7ff ffbe 	bl	8002850 <vcnl_set_threshold>
	vcnl_set_threshold( VCNL4010_THRESHOLD_HIGH, 0xaabb );
 80028d4:	f64a 21bb 	movw	r1, #43707	; 0xaabb
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff ffb9 	bl	8002850 <vcnl_set_threshold>

	vcnl4010_write_reg( VCNL4010_INT_CONTROL_REG, control );
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4619      	mov	r1, r3
 80028e2:	2089      	movs	r0, #137	; 0x89
 80028e4:	f7ff ff45 	bl	8002772 <vcnl4010_write_reg>

	RCC->APB2ENR 		|= RCC_APB2ENR_SYSCFGEN;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <vcnl4010_init+0x94>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <vcnl4010_init+0x94>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6613      	str	r3, [r2, #96]	; 0x60
	SYSCFG->EXTICR[0] 	|= SYSCFG_EXTICR1_EXTI3_PA;	// PB[3] pin
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <vcnl4010_init+0x98>)
 80028f6:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <vcnl4010_init+0x98>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 		|= EXTI_FTSR1_FT3;			// Falling trigger event configuration bit of line 3
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <vcnl4010_init+0x9c>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <vcnl4010_init+0x9c>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 		|= EXTI_RTSR1_RT3;			// Rising trigger event configuration bit of line 3
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <vcnl4010_init+0x9c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <vcnl4010_init+0x9c>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	6093      	str	r3, [r2, #8]
	EXTI->IMR1 			|= EXTI_IMR1_IM3;			// Interrupt Mask on line 3
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <vcnl4010_init+0x9c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <vcnl4010_init+0x9c>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( EXTI3_IRQn );
 8002920:	2009      	movs	r0, #9
 8002922:	f7ff fef1 	bl	8002708 <__NVIC_EnableIRQ>
	return 1;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	40010400 	.word	0x40010400

0800293c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF3) {				// Pending bit for line 3
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <EXTI3_IRQHandler+0x20>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <EXTI3_IRQHandler+0x16>
		EXTI->PR1 = EXTI_PR1_PIF3;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <EXTI3_IRQHandler+0x20>)
 800294e:	2208      	movs	r2, #8
 8002950:	615a      	str	r2, [r3, #20]

	}
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40010400 	.word	0x40010400

08002960 <__NVIC_EnableIRQ>:
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <paj7620_write_reg>:





static void paj7620_write_reg( uint8_t addr, uint8_t cmd ) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	460a      	mov	r2, r1
 80029a6:	71fb      	strb	r3, [r7, #7]
 80029a8:	4613      	mov	r3, r2
 80029aa:	71bb      	strb	r3, [r7, #6]
	i2c_start();
	i2c_write( addr );
	i2c_write( cmd );
	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	sw_i2c_write_reg( PAJ7620_ADDR, addr, cmd );
 80029ac:	79ba      	ldrb	r2, [r7, #6]
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4619      	mov	r1, r3
 80029b2:	20e6      	movs	r0, #230	; 0xe6
 80029b4:	f7fe feae 	bl	8001714 <sw_i2c_write_reg>
#endif
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <paj7620_read_reg>:

static uint8_t paj7620_read_reg( uint8_t addr, uint8_t len, uint8_t * buf ) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	603a      	str	r2, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
 80029cc:	460b      	mov	r3, r1
 80029ce:	71bb      	strb	r3, [r7, #6]
	i2c_start();
	i2c_write( PAJ7620_ADDR + 1 );
	while (len--) *buf++ = i2c_read( len ? ACK : NACK );
	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	sw_i2c_read_block( PAJ7620_ADDR, addr, len, buf );
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	79f9      	ldrb	r1, [r7, #7]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	20e6      	movs	r0, #230	; 0xe6
 80029da:	f7fe fc31 	bl	8001240 <sw_i2c_read_block>
#endif

	return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <paj7620_bank_select>:



static void paj7620_bank_select( uint8_t bank ) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	paj7620_write_reg( PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0 );
 80029f2:	2100      	movs	r1, #0
 80029f4:	20ef      	movs	r0, #239	; 0xef
 80029f6:	f7ff ffd1 	bl	800299c <paj7620_write_reg>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <paj_int_config>:

static void paj_int_config( void ) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	EXTI->FTSR 			|= EXTI_FTSR_TR3;			// Falling trigger event configuration bit of line 3
	EXTI->RTSR 			|= EXTI_RTSR_TR3;			// Rising trigger event configuration bit of line 3
	EXTI->IMR 			|= EXTI_IMR_MR3;			// Interrupt Mask on line 3
	NVIC_EnableIRQ( EXTI3_IRQn );
#elif defined STM32L4
	RCC->APB2ENR 		|= RCC_APB2ENR_SYSCFGEN;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <paj_int_config+0x4c>)
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <paj_int_config+0x4c>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6613      	str	r3, [r2, #96]	; 0x60
	SYSCFG->EXTICR[0] 	|= SYSCFG_EXTICR1_EXTI2_PB;	// PB[3] pin
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <paj_int_config+0x50>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <paj_int_config+0x50>)
 8002a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 		|= EXTI_FTSR1_FT2;			// Falling trigger event configuration bit of line 3
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <paj_int_config+0x54>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <paj_int_config+0x54>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 		|= EXTI_RTSR1_RT2;			// Rising trigger event configuration bit of line 3
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <paj_int_config+0x54>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <paj_int_config+0x54>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	6093      	str	r3, [r2, #8]
	EXTI->IMR1 			|= EXTI_IMR1_IM2;			// Interrupt Mask on line 3
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <paj_int_config+0x54>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <paj_int_config+0x54>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ( EXTI3_IRQn );
 8002a44:	2009      	movs	r0, #9
 8002a46:	f7ff ff8b 	bl	8002960 <__NVIC_EnableIRQ>
	#endif

//			PAJ_INT_EN_REG |= ( 1<<PAJ_INT_BIT0(PAJ_INT_NR) );
#endif
#endif
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400

08002a5c <paj7620_init>:


//............................ FUNKCJE dla u�ytkownika biblioteki .................................

/* inicjalizacja pracy czujnika gest�w */
uint8_t paj7620_init( TFPS fps ) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
	paj_int_config();
 8002a66:	f7ff ffcd 	bl	8002a04 <paj_int_config>

	//*** WAKE UP - START ****
	_delay_ms(10);
 8002a6a:	200a      	movs	r0, #10
 8002a6c:	f000 ffce 	bl	8003a0c <delay_ms>
	i2c_start();
  	uint8_t res = i2c_write( PAJ7620_ADDR );
  	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	uint8_t res;
	if ( sw_i2c_IsDeviceReady( PAJ7620_ADDR, 2, 1 ) == I2C_Error ) {
 8002a70:	2201      	movs	r2, #1
 8002a72:	2102      	movs	r1, #2
 8002a74:	20e6      	movs	r0, #230	; 0xe6
 8002a76:	f7ff f8b3 	bl	8001be0 <sw_i2c_IsDeviceReady>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d102      	bne.n	8002a86 <paj7620_init+0x2a>
		res = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <paj7620_init+0x2e>
	} else {
		res = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
	}
#endif
  	if( !res ) return 0x01; // je�li nie PAJ odpowiada to zwr�� b��d 0x01
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <paj7620_init+0x38>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e060      	b.n	8002b56 <paj7620_init+0xfa>
  	//*** wake up - end ****



	paj7620_bank_select( BANK0 );
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff ffa7 	bl	80029e8 <paj7620_bank_select>

	uint16_t 	chip_id = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	817b      	strh	r3, [r7, #10]
	uint8_t 	tmo 	= 255;
 8002a9e:	23ff      	movs	r3, #255	; 0xff
 8002aa0:	73bb      	strb	r3, [r7, #14]
	while( chip_id != 0x7620 ) {
 8002aa2:	e00f      	b.n	8002ac4 <paj7620_init+0x68>
		paj7620_read_reg( PAJ7620_ADDR_PART_ID_LOW, 2, (uint8_t*)&chip_id );
 8002aa4:	f107 030a 	add.w	r3, r7, #10
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2102      	movs	r1, #2
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff ff87 	bl	80029c0 <paj7620_read_reg>
		_delay_us(500);
 8002ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab6:	f000 ffc1 	bl	8003a3c <delay_us>
		if( !tmo-- ) break;
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	73ba      	strb	r2, [r7, #14]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <paj7620_init+0x74>
	while( chip_id != 0x7620 ) {
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	f247 6220 	movw	r2, #30240	; 0x7620
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d1ea      	bne.n	8002aa4 <paj7620_init+0x48>
 8002ace:	e000      	b.n	8002ad2 <paj7620_init+0x76>
		if( !tmo-- ) break;
 8002ad0:	bf00      	nop
	}

	if( !tmo ) return 0xff;
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <paj7620_init+0x80>
 8002ad8:	23ff      	movs	r3, #255	; 0xff
 8002ada:	e03c      	b.n	8002b56 <paj7620_init+0xfa>

	paj7620_bank_select( BANK0 );
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff ff83 	bl	80029e8 <paj7620_bank_select>

	for( uint8_t i=0; i < INIT_REG_ARRAY_SIZE; i++ ) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	737b      	strb	r3, [r7, #13]
 8002ae6:	e00f      	b.n	8002b08 <paj7620_init+0xac>
		paj7620_write_reg( pgm_read_byte( &initRegisterArray[i][0] ), pgm_read_byte( &initRegisterArray[i][1] ) );
 8002ae8:	7b7b      	ldrb	r3, [r7, #13]
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <paj7620_init+0x104>)
 8002aec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8002af0:	7b7b      	ldrb	r3, [r7, #13]
 8002af2:	491b      	ldr	r1, [pc, #108]	; (8002b60 <paj7620_init+0x104>)
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	440b      	add	r3, r1
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7ff ff4d 	bl	800299c <paj7620_write_reg>
	for( uint8_t i=0; i < INIT_REG_ARRAY_SIZE; i++ ) {
 8002b02:	7b7b      	ldrb	r3, [r7, #13]
 8002b04:	3301      	adds	r3, #1
 8002b06:	737b      	strb	r3, [r7, #13]
 8002b08:	7b7b      	ldrb	r3, [r7, #13]
 8002b0a:	2b51      	cmp	r3, #81	; 0x51
 8002b0c:	d9ec      	bls.n	8002ae8 <paj7620_init+0x8c>
	}

	paj7620_bank_select( BANK1 );
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7ff ff6a 	bl	80029e8 <paj7620_bank_select>
	if( !fps ) paj7620_write_reg( 0x65, 0xB7 );		// 120 fps
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <paj7620_init+0xc8>
 8002b1a:	21b7      	movs	r1, #183	; 0xb7
 8002b1c:	2065      	movs	r0, #101	; 0x65
 8002b1e:	f7ff ff3d 	bl	800299c <paj7620_write_reg>
 8002b22:	e003      	b.n	8002b2c <paj7620_init+0xd0>
	else paj7620_write_reg( 0x65, 0x12 );			// 240 fps
 8002b24:	2112      	movs	r1, #18
 8002b26:	2065      	movs	r0, #101	; 0x65
 8002b28:	f7ff ff38 	bl	800299c <paj7620_write_reg>

	paj7620_bank_select( BANK0 );  //gesture flage reg in Bank0
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff ff5b 	bl	80029e8 <paj7620_bank_select>

	// inicjalizacja wewnetrznych przerwa� w module PJA
	uint8_t dat;
	paj7620_read_reg( 0x43, 1, &dat );
 8002b32:	f107 0309 	add.w	r3, r7, #9
 8002b36:	461a      	mov	r2, r3
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2043      	movs	r0, #67	; 0x43
 8002b3c:	f7ff ff40 	bl	80029c0 <paj7620_read_reg>
	paj7620_read_reg( 0x44, 1, &dat );
 8002b40:	f107 0309 	add.w	r3, r7, #9
 8002b44:	461a      	mov	r2, r3
 8002b46:	2101      	movs	r1, #1
 8002b48:	2044      	movs	r0, #68	; 0x44
 8002b4a:	f7ff ff39 	bl	80029c0 <paj7620_read_reg>

#if USE_CIRCLE_CONTINOUS == 1
  	enable_cc = 1;
 8002b4e:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <paj7620_init+0x108>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
#endif
  return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	0800484c 	.word	0x0800484c
 8002b64:	2000011c 	.word	0x2000011c

08002b68 <register_gesture_callback>:
 *
 * 		Argumenty:
 * 		1. w�asny callback - w�asna funckja zwrotna
 * 		2. wska�nik na timer programowy o podstawie czasu 10ms
 */
void register_gesture_callback( TGESTURE callback, volatile uint16_t * gs_timer ) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
	gesture_callback = callback;
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <register_gesture_callback+0x24>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6013      	str	r3, [r2, #0]
	gs_tmr 			 = gs_timer;
 8002b78:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <register_gesture_callback+0x28>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6013      	str	r3, [r2, #0]
	gs_set_filter(0);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f808 	bl	8002b94 <gs_set_filter>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000120 	.word	0x20000120
 8002b90:	20000128 	.word	0x20000128

08002b94 <gs_set_filter>:




/* funkcja do zmiany filtr�w gest�w */
void gs_set_filter( TGESTUREFILTER filter ) {
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
	gfilter = filter;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <gs_set_filter+0x1c>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	8013      	strh	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000126 	.word	0x20000126

08002bb4 <EXTI2_IRQHandler>:
			paj_int_flag = 1;
		}
	#endif
}
#else
INTERRUPT void EXTI2_IRQHandler(void) {
 8002bb4:	4668      	mov	r0, sp
 8002bb6:	f020 0107 	bic.w	r1, r0, #7
 8002bba:	468d      	mov	sp, r1
 8002bbc:	b481      	push	{r0, r7}
 8002bbe:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF2) {		// Pending bit for line 3
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <EXTI2_IRQHandler+0x30>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <EXTI2_IRQHandler+0x24>
		EXTI->PR1 = EXTI_PR1_PIF2;
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <EXTI2_IRQHandler+0x30>)
 8002bce:	2204      	movs	r2, #4
 8002bd0:	615a      	str	r2, [r3, #20]
		paj_int_flag = 1;
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <EXTI2_IRQHandler+0x34>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
	}
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc81      	pop	{r0, r7}
 8002bde:	4685      	mov	sp, r0
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40010400 	.word	0x40010400
 8002be8:	20000124 	.word	0x20000124

08002bec <gpio_pin_cfg>:

#include "sw_mcu_conf.h"
#include "sw_gpio.h"

/******************* Funkcja ustawiająca trybyb pracy pinów *********************/
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u)
 8002bfc:	883b      	ldrh	r3, [r7, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d006      	beq.n	8002c14 <gpio_pin_cfg+0x28>
		port->OTYPER |= pin;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e006      	b.n	8002c22 <gpio_pin_cfg+0x36>
	else
		port->OTYPER &= (uint32_t) ~pin;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	43d2      	mvns	r2, r2
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]
	pin = __builtin_ctz(pin) * 2;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 8002c4c:	883b      	ldrh	r3, [r7, #0]
 8002c4e:	0a5b      	lsrs	r3, r3, #9
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
	port->MODER = reg_val;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 8002c74:	883b      	ldrh	r3, [r7, #0]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
	port->PUPDR = reg_val;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 8002c9c:	883b      	ldrh	r3, [r7, #0]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	f003 0203 	and.w	r2, r3, #3
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
	port->OSPEEDR = reg_val;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	609a      	str	r2, [r3, #8]

	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3320      	adds	r3, #32
 8002cba:	617b      	str	r3, [r7, #20]
	pin *= 2;
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	807b      	strh	r3, [r7, #2]

	if (pin > 28) {
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	2b1c      	cmp	r3, #28
 8002cc6:	d905      	bls.n	8002cd4 <gpio_pin_cfg+0xe8>
		pin -= 32;
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	3b20      	subs	r3, #32
 8002ccc:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3324      	adds	r3, #36	; 0x24
 8002cd2:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 8002cea:	883b      	ldrh	r3, [r7, #0]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <RCC_gpio_init>:
#endif
}
#endif

#if defined STM32L412KBx_nucleo
void RCC_gpio_init( void ) {
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

#ifdef RTC_PORTA_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <RCC_gpio_init+0x28>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <RCC_gpio_init+0x28>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif
#ifdef RTC_PORTB_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <RCC_gpio_init+0x28>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <RCC_gpio_init+0x28>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
#endif
#ifdef RTC_PORTH_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
#endif
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <gpio_pin_HI>:

#ifdef BSRR_REG
	inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
		port->BRR = pin;
	}
	inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
		port->BSRR = pin;
 8002d48:	887a      	ldrh	r2, [r7, #2]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
	}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <gpio_pin_XOR>:
	inline void gpio_pin_HI(  GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
		port->BSRRL = pin;
	}
#endif

inline void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]
	port->ODR ^= pin;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	405a      	eors	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	615a      	str	r2, [r3, #20]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
void sw_led_off( void ) {
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
	LED_PORT->BSRR = LED_PIN;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <sw_led_off+0x14>)
 8002d86:	2208      	movs	r2, #8
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	48000400 	.word	0x48000400

08002d98 <sw_led_xor>:
	}
	void sw_led_on( void ) {
		LED_PORT->BSRRH = LED_PIN;
	}
#endif
void sw_led_xor( void ) {
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
	LED_PORT->ODR ^= LED_PIN;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <sw_led_xor+0x1c>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <sw_led_xor+0x1c>)
 8002da2:	f083 0308 	eor.w	r3, r3, #8
 8002da6:	6153      	str	r3, [r2, #20]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	48000400 	.word	0x48000400

08002db8 <sw_led_blink>:




void sw_led_blink( void ) { sw_led_xor(); }
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f7ff ffec 	bl	8002d98 <sw_led_xor>
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <sw_led_debug_init>:

void sw_led_debug_init( void ) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED_PORT, LED_PIN, 	gpio_mode_output_PP_LS );
 8002dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dcc:	2108      	movs	r1, #8
 8002dce:	480a      	ldr	r0, [pc, #40]	; (8002df8 <sw_led_debug_init+0x34>)
 8002dd0:	f7ff ff0c 	bl	8002bec <gpio_pin_cfg>
	sw_led_off();
 8002dd4:	f7ff ffd4 	bl	8002d80 <sw_led_off>
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 8002dd8:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8002ddc:	2101      	movs	r1, #1
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f7ff ff03 	bl	8002bec <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 8002de6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8002dea:	2102      	movs	r1, #2
 8002dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df0:	f7ff fefc 	bl	8002bec <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
#endif
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	48000400 	.word	0x48000400

08002dfc <sw_led_blinking>:
int8_t sw_led_get_status(void) {
	if (blinkCounter == 0) 	return (int8_t)_led_not_blinking;
	else					return (int8_t)_led_blinking;
}

void sw_led_blinking(void) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <sw_led_blinking+0x38>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d012      	beq.n	8002e2e <sw_led_blinking+0x32>
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <sw_led_blinking+0x3c>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <sw_led_blinking+0x32>
	else {
		softTimer3 = blinkDelay;
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <sw_led_blinking+0x40>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <sw_led_blinking+0x3c>)
 8002e1a:	801a      	strh	r2, [r3, #0]
		sw_led_blink();
 8002e1c:	f7ff ffcc 	bl	8002db8 <sw_led_blink>
		blinkCounter--;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <sw_led_blinking+0x38>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <sw_led_blinking+0x38>)
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	e000      	b.n	8002e30 <sw_led_blinking+0x34>
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 8002e2e:	bf00      	nop
	}
}
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000012c 	.word	0x2000012c
 8002e38:	20000576 	.word	0x20000576
 8002e3c:	2000012d 	.word	0x2000012d

08002e40 <__NVIC_EnableIRQ>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <WriteCmd>:
}
#endif
//***********************************************
// Zapisanie kodu komendy do sterownika SSD1306
//***********************************************
static void WriteCmd( uint8_t cmd ) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	sw_transmision_write( cmd );
	#if USE_CS==1
	CS_HI;
	#endif
#elif (TRANSMISSION_MODE==SOFT_I2C) || (TRANSMISSION_MODE==HARD_I2C)
	sw_i2c_write_reg( I2C_ADDRESS, I2C_CTRL_DC_0, cmd );
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2078      	movs	r0, #120	; 0x78
 8002e8e:	f7fe fc41 	bl	8001714 <sw_i2c_write_reg>
#endif
	delay_us(100);
 8002e92:	2064      	movs	r0, #100	; 0x64
 8002e94:	f000 fdd2 	bl	8003a3c <delay_us>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <WriteData>:
//***********************************************
// Zapisanie danej do pamięci obrazu sterownika SSD1306
//***********************************************
static void WriteData( uint8_t regAddr, uint8_t * buffer, uint16_t cnt ) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80bb      	strh	r3, [r7, #4]
		WriteSpi( buffer[i] ); 				// zapis danej
	}
	CS_HI;
#endif
#ifdef SSD1306_I2C
	sw_i2c_write_block( SSD1306_ADDR, SSD1306_SETSTARTLINE, cnt, buffer );
 8002eb0:	88ba      	ldrh	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	2078      	movs	r0, #120	; 0x78
 8002eb8:	f7fe fad2 	bl	8001460 <sw_i2c_write_block>
#endif
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <sw_display_cls>:

//**********************************************
// Zeruj bufor wyświetlacza
// i zapisz jego zwartość do RAM obrazu
//**********************************************
void sw_display_cls( uint8_t *buffer, uint8_t pattern ) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	81fb      	strh	r3, [r7, #14]
 8002ed4:	e007      	b.n	8002ee6 <sw_display_cls+0x22>
		buffer[i] = pattern;
 8002ed6:	89fb      	ldrh	r3, [r7, #14]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	81fb      	strh	r3, [r7, #14]
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d3f3      	bcc.n	8002ed6 <sw_display_cls+0x12>
	}
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <sw_ssd1306_display>:
//***********************************************

//************ Wyślij bufor RAM do sterownika ************
void sw_ssd1306_display( void ) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	2378      	movs	r3, #120	; 0x78
 8002f04:	71fb      	strb	r3, [r7, #7]
static INLINE bool sw_is_RXNE_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
}

static INLINE void sw_i2c_set_7bitAddr( uint8_t devAddr ) {
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <sw_ssd1306_display+0x78>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	79f9      	ldrb	r1, [r7, #7]
 8002f18:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <sw_ssd1306_display+0x78>)
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	6053      	str	r3, [r2, #4]
}
 8002f22:	bf00      	nop
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( 0x21  );				// Command_Column_Address_Set
 8002f24:	2021      	movs	r0, #33	; 0x21
 8002f26:	f7ff ffa9 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x00  );				// Start
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7ff ffa6 	bl	8002e7c <WriteCmd>
	WriteCmd( SCREEN_WIDTH  - 1  );	// End
 8002f30:	207f      	movs	r0, #127	; 0x7f
 8002f32:	f7ff ffa3 	bl	8002e7c <WriteCmd>

	WriteCmd( 0x22  );				// Command_Page_Address_Set
 8002f36:	2022      	movs	r0, #34	; 0x22
 8002f38:	f7ff ffa0 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x00  );				// Start
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff9d 	bl	8002e7c <WriteCmd>
	WriteCmd( SCREEN_HEIGHT - 1 );	// End
 8002f42:	203f      	movs	r0, #63	; 0x3f
 8002f44:	f7ff ff9a 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_SETLOWCOLUMN  );
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7ff ff97 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SETHIGHCOLUMN );
 8002f4e:	2010      	movs	r0, #16
 8002f50:	f7ff ff94 	bl	8002e7c <WriteCmd>
#if SCREEN_HEIGHT == 64
	WriteCmd( 0xB0 );
 8002f54:	20b0      	movs	r0, #176	; 0xb0
 8002f56:	f7ff ff91 	bl	8002e7c <WriteCmd>
#endif
#if SCREEN_HEIGHT == 32
	WriteCmd( 0xB4 );
#endif
//	delay_ms(100);
   	WriteData( SSD1306_SETSTARTLINE, (uint8_t *)ActualDMABuffer, FRAMEBUFFER_ALL );
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <sw_ssd1306_display+0x7c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f62:	4619      	mov	r1, r3
 8002f64:	2040      	movs	r0, #64	; 0x40
 8002f66:	f7ff ff9b 	bl	8002ea0 <WriteData>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	20000534 	.word	0x20000534

08002f7c <timer16_init>:
/***************************************************************/

/*********************************** Timer16 init **************************************/
static void timer16_init( uint16_t timeFPS ) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <timer16_init+0x58>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <timer16_init+0x58>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	6613      	str	r3, [r2, #96]	; 0x60
	TIM16->PSC = (uint32_t)SystemCoreClock / 0xFFFF / timeFPS - 1;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <timer16_init+0x5c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <timer16_init+0x60>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	0bda      	lsrs	r2, r3, #15
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <timer16_init+0x64>)
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6293      	str	r3, [r2, #40]	; 0x28
	TIM16->ARR = 0xFFFF - 1;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <timer16_init+0x64>)
 8002fac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM16->DIER	= TIM_DIER_UIE;		// Update Event Interrupt
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <timer16_init+0x64>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

	TIM16->CR1 |= TIM_CR1_CEN;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <timer16_init+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <timer16_init+0x64>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( TIM1_UP_TIM16_IRQn );
 8002fc4:	2019      	movs	r0, #25
 8002fc6:	f7ff ff3b 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	80008001 	.word	0x80008001
 8002fe0:	40014400 	.word	0x40014400

08002fe4 <sw_ssd1306_init>:
	}
}
/****************************************************************************************/

//************* INICJALIZACJA sterownika SSD1306
void sw_ssd1306_init(void) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
//	ActualDMABuffer = SpectrumBuffer;
//	ActualDMABuffer = TextBufferDisplay;
	ActualDMABuffer = TextBuffer;
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <sw_ssd1306_init+0xec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <sw_ssd1306_init+0xf0>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	2378      	movs	r3, #120	; 0x78
 8002ff4:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <sw_ssd1306_init+0xf4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	79f9      	ldrb	r1, [r7, #7]
 8003008:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <sw_ssd1306_init+0xf4>)
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	430b      	orrs	r3, r1
 8003010:	6053      	str	r3, [r2, #4]
}
 8003012:	bf00      	nop
	RES_LO;
	RES_HI;
#endif
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( SSD1306_DISPLAYOFF );
 8003014:	20ae      	movs	r0, #174	; 0xae
 8003016:	f7ff ff31 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SETDISPLAYCLOCKDIV );
 800301a:	20d5      	movs	r0, #213	; 0xd5
 800301c:	f7ff ff2e 	bl	8002e7c <WriteCmd>
	WriteCmd( OLED_CONTRAST );
 8003020:	20f0      	movs	r0, #240	; 0xf0
 8003022:	f7ff ff2b 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_SETDISPLAYOFFSET );
 8003026:	20d3      	movs	r0, #211	; 0xd3
 8003028:	f7ff ff28 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x0 );
 800302c:	2000      	movs	r0, #0
 800302e:	f7ff ff25 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SETSTARTLINE | 0x0 );
 8003032:	2040      	movs	r0, #64	; 0x40
 8003034:	f7ff ff22 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_CHARGEPUMP );
 8003038:	208d      	movs	r0, #141	; 0x8d
 800303a:	f7ff ff1f 	bl	8002e7c <WriteCmd>

//    if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x10 );
//    else  WriteCmd( 0x14 );	// SSD1306_SWITCHCAPVCC

	WriteCmd( 0x14 );			// SSD1306_SWITCHCAPVCC
 800303e:	2014      	movs	r0, #20
 8003040:	f7ff ff1c 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_MEMORYMODE );
 8003044:	2020      	movs	r0, #32
 8003046:	f7ff ff19 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x00 );
 800304a:	2000      	movs	r0, #0
 800304c:	f7ff ff16 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SEGREMAP | 0x1 );
 8003050:	20a1      	movs	r0, #161	; 0xa1
 8003052:	f7ff ff13 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_COMSCANDEC );
 8003056:	20c8      	movs	r0, #200	; 0xc8
 8003058:	f7ff ff10 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_SETCONTRAST );
 800305c:	2081      	movs	r0, #129	; 0x81
 800305e:	f7ff ff0d 	bl	8002e7c <WriteCmd>
	WriteCmd( REFRESH_MAX );
 8003062:	20f0      	movs	r0, #240	; 0xf0
 8003064:	f7ff ff0a 	bl	8002e7c <WriteCmd>

//	if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x9F );
//	else WriteCmd( 0xCF );

	WriteCmd( 0xCF );					// SSD1306_SWITCHCAPVCC
 8003068:	20cf      	movs	r0, #207	; 0xcf
 800306a:	f7ff ff07 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SETPRECHARGE );
 800306e:	20d9      	movs	r0, #217	; 0xd9
 8003070:	f7ff ff04 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_SETCOMPINS );
	WriteCmd( 0x02 );
#endif
// ssd1306 - 128 x 64
#ifdef GLCD_RES_128_64
	WriteCmd( SSD1306_SETMULTIPLEX );
 8003074:	20a8      	movs	r0, #168	; 0xa8
 8003076:	f7ff ff01 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x3F );
 800307a:	203f      	movs	r0, #63	; 0x3f
 800307c:	f7ff fefe 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_SETCOMPINS );
 8003080:	20da      	movs	r0, #218	; 0xda
 8003082:	f7ff fefb 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x12 );
 8003086:	2012      	movs	r0, #18
 8003088:	f7ff fef8 	bl	8002e7c <WriteCmd>
#endif
	WriteCmd( SSD1306_SETVCOMDETECT );
 800308c:	20db      	movs	r0, #219	; 0xdb
 800308e:	f7ff fef5 	bl	8002e7c <WriteCmd>
	WriteCmd( 0x40 );
 8003092:	2040      	movs	r0, #64	; 0x40
 8003094:	f7ff fef2 	bl	8002e7c <WriteCmd>

	WriteCmd( SSD1306_DISPLAYALLON_RESUME );
 8003098:	20a4      	movs	r0, #164	; 0xa4
 800309a:	f7ff feef 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_NORMALDISPLAY );
 800309e:	20a6      	movs	r0, #166	; 0xa6
 80030a0:	f7ff feec 	bl	8002e7c <WriteCmd>
	WriteCmd( SSD1306_DISPLAYON );
 80030a4:	20af      	movs	r0, #175	; 0xaf
 80030a6:	f7ff fee9 	bl	8002e7c <WriteCmd>

	sw_display_cls( (uint8_t *)ActualDMABuffer, 0x00 );
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <sw_ssd1306_init+0xf0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff07 	bl	8002ec4 <sw_display_cls>
	sw_ssd1306_display();
 80030b6:	f7ff ff21 	bl	8002efc <sw_ssd1306_display>

	timer16_init( 10 );
 80030ba:	200a      	movs	r0, #10
 80030bc:	f7ff ff5e 	bl	8002f7c <timer16_init>
	sw_dma_memset_init(8);
 80030c0:	2008      	movs	r0, #8
 80030c2:	f000 fb73 	bl	80037ac <sw_dma_memset_init>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000008 	.word	0x20000008
 80030d4:	20000534 	.word	0x20000534
 80030d8:	2000000c 	.word	0x2000000c

080030dc <graphic_draw_H_line_RAM>:
#include "displays.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
								  const uint32_t color, const T_GAMMA *gamma ) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	4608      	mov	r0, r1
 80030e6:	4611      	mov	r1, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4603      	mov	r3, r0
 80030ec:	817b      	strh	r3, [r7, #10]
 80030ee:	460b      	mov	r3, r1
 80030f0:	813b      	strh	r3, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	71fb      	strb	r3, [r7, #7]

#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]
 80030fa:	e00f      	b.n	800311c <graphic_draw_H_line_RAM+0x40>
#ifdef PANEL_RGB
		graphic_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		graphic_set_pixel_RAM( buffer, x + i, y, (uint8_t *)&color );
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	897b      	ldrh	r3, [r7, #10]
 8003102:	4413      	add	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	b219      	sxth	r1, r3
 8003108:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800310c:	f107 0320 	add.w	r3, r7, #32
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f001 faa9 	bl	8004668 <_etext>
	for ( uint8_t i=0; i < width; i++ ) {
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	3301      	adds	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
 800311c:	7dfa      	ldrb	r2, [r7, #23]
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d3eb      	bcc.n	80030fc <graphic_draw_H_line_RAM+0x20>
#endif
	}
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const uint32_t color, const T_GAMMA *gamma ) {
 800312e:	b580      	push	{r7, lr}
 8003130:	b088      	sub	sp, #32
 8003132:	af02      	add	r7, sp, #8
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	4608      	mov	r0, r1
 8003138:	4611      	mov	r1, r2
 800313a:	461a      	mov	r2, r3
 800313c:	4603      	mov	r3, r0
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	460b      	mov	r3, r1
 8003142:	813b      	strh	r3, [r7, #8]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i=0; i < height; i++ ) {
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
 800314c:	e013      	b.n	8003176 <graphic_fill_rectangle_RAM+0x48>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	b29a      	uxth	r2, r3
 8003152:	893b      	ldrh	r3, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	b21a      	sxth	r2, r3
 800315a:	79f8      	ldrb	r0, [r7, #7]
 800315c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f7ff ffb6 	bl	80030dc <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	3301      	adds	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
 8003176:	7dfa      	ldrb	r2, [r7, #23]
 8003178:	f897 3020 	ldrb.w	r3, [r7, #32]
 800317c:	429a      	cmp	r2, r3
 800317e:	d3e6      	bcc.n	800314e <graphic_fill_rectangle_RAM+0x20>
	}
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <polish_letters>:
	0xA2,  /*ó, */
};
#endif

/***** Zwraca numer znaku w tablicy ************************/
uint8_t polish_letters(uint8_t codePage, wchar_t codeChar) {
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]

	uint8_t i;
	uint8_t tmp=ASCII;
 8003198:	2313      	movs	r3, #19
 800319a:	73bb      	strb	r3, [r7, #14]

	for (i=0; i<18; i++) {
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e00e      	b.n	80031c0 <polish_letters+0x34>

#ifdef UNICODE
		if (codePage == UNICODE) {
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <polish_letters+0x2e>
			if ( codeChar == uniCode[i]) {
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <polish_letters+0x48>)
 80031ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d101      	bne.n	80031ba <polish_letters+0x2e>
				return i;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	e006      	b.n	80031c8 <polish_letters+0x3c>
	for (i=0; i<18; i++) {
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3301      	adds	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d9ed      	bls.n	80031a2 <polish_letters+0x16>
			if ( codeChar == pgm_read_byte(cp852Code+i) )
				return i;
		}
#endif
	}
	return tmp;
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	080050a8 	.word	0x080050a8

080031d8 <graphic_draw_char_RAM>:
	return charWidth;
}
/*********************************************************************************************************/
#elif defined COLOR_MONO
uint8_t graphic_draw_char_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, wchar_t charCode, uint32_t  color,
									  uint32_t bg, uint8_t drawLine, FONT_INFO *fontPtrPGM, const T_GAMMA *gamma ) {
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af04      	add	r7, sp, #16
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	817b      	strh	r3, [r7, #10]
 80031e6:	4613      	mov	r3, r2
 80031e8:	813b      	strh	r3, [r7, #8]
	uint8_t		charWidth;
	uint16_t	charOffset;
	uint8_t		charHeight			= fontPtrPGM->heightPixels;
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	763b      	strb	r3, [r7, #24]
	uint8_t		charAddressStart	= fontPtrPGM->startChar;
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	75fb      	strb	r3, [r7, #23]
	uint8_t		transCode 			= polish_letters(UNICODE, charCode);
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7ff ffc7 	bl	800318c <polish_letters>
 80031fe:	4603      	mov	r3, r0
 8003200:	75bb      	strb	r3, [r7, #22]
	uint8_t 	size 				= 1;
 8003202:	2301      	movs	r3, #1
 8003204:	757b      	strb	r3, [r7, #21]
	// Rysujemy SPACJĘ i wychodzimy -------------------------------------------------------------------
	if (charCode == L' ') {
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b20      	cmp	r3, #32
 800320a:	d113      	bne.n	8003234 <graphic_draw_char_RAM+0x5c>
		graphic_fill_rectangle_RAM( buffer, x, y, fontPtrPGM->spacePixels, charHeight, bg, gamma );
 800320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320e:	7a5c      	ldrb	r4, [r3, #9]
 8003210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003212:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8003216:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800321a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800321c:	9202      	str	r2, [sp, #8]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	7e3b      	ldrb	r3, [r7, #24]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4623      	mov	r3, r4
 8003226:	4602      	mov	r2, r0
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff ff80 	bl	800312e <graphic_fill_rectangle_RAM>
		return fontPtrPGM->spacePixels;
 800322e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003230:	7a5b      	ldrb	r3, [r3, #9]
 8003232:	e107      	b.n	8003444 <graphic_draw_char_RAM+0x26c>
	}
	//--------------------------------------------------------------------------------------------------
	if (transCode == ASCII) {
 8003234:	7dbb      	ldrb	r3, [r7, #22]
 8003236:	2b13      	cmp	r3, #19
 8003238:	d112      	bne.n	8003260 <graphic_draw_char_RAM+0x88>
		// Czytamy ile bitów zajmuje odległość czcionki
		charWidth  = fontPtrPGM->charInfo[ charCode - charAddressStart ].widthBits;
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	1acb      	subs	r3, r1, r3
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	77fb      	strb	r3, [r7, #31]
		// Czytamy ile bitów zajmuje odległość między znakami
		charOffset = fontPtrPGM->charInfo[ charCode - charAddressStart ].offset;
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	1acb      	subs	r3, r1, r3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	885b      	ldrh	r3, [r3, #2]
 800325c:	83bb      	strh	r3, [r7, #28]
 800325e:	e019      	b.n	8003294 <graphic_draw_char_RAM+0xbc>
	} else {
		charWidth  = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 8003260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	8a9b      	ldrh	r3, [r3, #20]
 8003268:	4619      	mov	r1, r3
 800326a:	7dbb      	ldrb	r3, [r7, #22]
 800326c:	f1c3 0312 	rsb	r3, r3, #18
 8003270:	1acb      	subs	r3, r1, r3
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	77fb      	strb	r3, [r7, #31]
		charOffset = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].offset;
 800327a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003280:	8a9b      	ldrh	r3, [r3, #20]
 8003282:	4619      	mov	r1, r3
 8003284:	7dbb      	ldrb	r3, [r7, #22]
 8003286:	f1c3 0312 	rsb	r3, r3, #18
 800328a:	1acb      	subs	r3, r1, r3
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	885b      	ldrh	r3, [r3, #2]
 8003292:	83bb      	strh	r3, [r7, #28]
	}

	if((x >= _width)					||	// Clip right
 8003294:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003298:	4a6c      	ldr	r2, [pc, #432]	; (800344c <graphic_draw_char_RAM+0x274>)
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	4293      	cmp	r3, r2
 800329e:	da17      	bge.n	80032d0 <graphic_draw_char_RAM+0xf8>
		(y >= _height)					||	// Clip bottom
 80032a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80032a4:	4a6a      	ldr	r2, [pc, #424]	; (8003450 <graphic_draw_char_RAM+0x278>)
 80032a6:	8812      	ldrh	r2, [r2, #0]
	if((x >= _width)					||	// Clip right
 80032a8:	4293      	cmp	r3, r2
 80032aa:	da11      	bge.n	80032d0 <graphic_draw_char_RAM+0xf8>
		((x + charWidth  * size - 1) < 0)||	// Clip left
 80032ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	7d79      	ldrb	r1, [r7, #21]
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
		(y >= _height)					||	// Clip bottom
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	dd08      	ble.n	80032d0 <graphic_draw_char_RAM+0xf8>
		((y + charHeight * size - 1) < 0))	// Clip top
 80032be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032c2:	7e3b      	ldrb	r3, [r7, #24]
 80032c4:	7d79      	ldrb	r1, [r7, #21]
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
		((x + charWidth  * size - 1) < 0)||	// Clip left
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dc01      	bgt.n	80032d4 <graphic_draw_char_RAM+0xfc>
	return 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e0b7      	b.n	8003444 <graphic_draw_char_RAM+0x26c>

	if (charCode == L' ') {
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d11a      	bne.n	8003310 <graphic_draw_char_RAM+0x138>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidth*size, charHeight*size, bg, NULL );
 80032da:	7ffa      	ldrb	r2, [r7, #31]
 80032dc:	7d7b      	ldrb	r3, [r7, #21]
 80032de:	fb12 f303 	smulbb	r3, r2, r3
 80032e2:	b2dc      	uxtb	r4, r3
 80032e4:	7e3a      	ldrb	r2, [r7, #24]
 80032e6:	7d7b      	ldrb	r3, [r7, #21]
 80032e8:	fb12 f303 	smulbb	r3, r2, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f0:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80032f4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80032f8:	2500      	movs	r5, #0
 80032fa:	9502      	str	r5, [sp, #8]
 80032fc:	9201      	str	r2, [sp, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4623      	mov	r3, r4
 8003302:	4602      	mov	r2, r0
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7ff ff12 	bl	800312e <graphic_fill_rectangle_RAM>

		return fontPtrPGM->spacePixels;
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	7a5b      	ldrb	r3, [r3, #9]
 800330e:	e099      	b.n	8003444 <graphic_draw_char_RAM+0x26c>
	}
	int8_t i, k, j=0;
 8003310:	2300      	movs	r3, #0
 8003312:	767b      	strb	r3, [r7, #25]
	uint8_t calkow = (charWidth - 1)/8; // Sprawdzamy w ilu bitach mamy szerokość czcionki
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	3b01      	subs	r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	da00      	bge.n	800331e <graphic_draw_char_RAM+0x146>
 800331c:	3307      	adds	r3, #7
 800331e:	10db      	asrs	r3, r3, #3
 8003320:	753b      	strb	r3, [r7, #20]
	uint8_t line;

	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e086      	b.n	8003436 <graphic_draw_char_RAM+0x25e>
	{
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 8003328:	2300      	movs	r3, #0
 800332a:	767b      	strb	r3, [r7, #25]
 800332c:	e078      	b.n	8003420 <graphic_draw_char_RAM+0x248>

			line = pgm_read_byte( fontPtrPGM->data + charOffset + (calkow + 1)*i + j );
 800332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	8bbb      	ldrh	r3, [r7, #28]
 8003334:	7d39      	ldrb	r1, [r7, #20]
 8003336:	3101      	adds	r1, #1
 8003338:	f997 001b 	ldrsb.w	r0, [r7, #27]
 800333c:	fb00 f101 	mul.w	r1, r0, r1
 8003340:	4419      	add	r1, r3
 8003342:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003346:	440b      	add	r3, r1
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	74fb      	strb	r3, [r7, #19]

			for ( k=0; k<8; k++ ) {
 800334e:	2300      	movs	r3, #0
 8003350:	76bb      	strb	r3, [r7, #26]
 8003352:	e05b      	b.n	800340c <graphic_draw_char_RAM+0x234>
				if ( (line & (1 << (7-k))) && ( (k + 8*j) < charWidth) ) {    // Ekstrahujemy kolejne bity
 8003354:	7cfa      	ldrb	r2, [r7, #19]
 8003356:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	fa42 f303 	asr.w	r3, r2, r3
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d023      	beq.n	80033b2 <graphic_draw_char_RAM+0x1da>
 800336a:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800336e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	441a      	add	r2, r3
 8003376:	7ffb      	ldrb	r3, [r7, #31]
 8003378:	429a      	cmp	r2, r3
 800337a:	da1a      	bge.n	80033b2 <graphic_draw_char_RAM+0x1da>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&color );
 800337c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003380:	b29b      	uxth	r3, r3
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	b29a      	uxth	r2, r3
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	4413      	add	r3, r2
 800338a:	b29a      	uxth	r2, r3
 800338c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003390:	b29b      	uxth	r3, r3
 8003392:	4413      	add	r3, r2
 8003394:	b29b      	uxth	r3, r3
 8003396:	b219      	sxth	r1, r3
 8003398:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800339c:	b29a      	uxth	r2, r3
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b21a      	sxth	r2, r3
 80033a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f001 f95c 	bl	8004668 <_etext>
 80033b0:	e026      	b.n	8003400 <graphic_draw_char_RAM+0x228>
				}
				else if( (bg!=color) && ( (k + 8*j) < charWidth) ) {
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d022      	beq.n	8003400 <graphic_draw_char_RAM+0x228>
 80033ba:	f997 201a 	ldrsb.w	r2, [r7, #26]
 80033be:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	441a      	add	r2, r3
 80033c6:	7ffb      	ldrb	r3, [r7, #31]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	da19      	bge.n	8003400 <graphic_draw_char_RAM+0x228>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&bg );
 80033cc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	897b      	ldrh	r3, [r7, #10]
 80033d8:	4413      	add	r3, r2
 80033da:	b29a      	uxth	r2, r3
 80033dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b219      	sxth	r1, r3
 80033e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	4413      	add	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b21a      	sxth	r2, r3
 80033f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f001 f934 	bl	8004668 <_etext>
			for ( k=0; k<8; k++ ) {
 8003400:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	3301      	adds	r3, #1
 8003408:	b2db      	uxtb	r3, r3
 800340a:	76bb      	strb	r3, [r7, #26]
 800340c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003410:	2b07      	cmp	r3, #7
 8003412:	dd9f      	ble.n	8003354 <graphic_draw_char_RAM+0x17c>
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 8003414:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	767b      	strb	r3, [r7, #25]
 8003420:	7d3a      	ldrb	r2, [r7, #20]
 8003422:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003426:	429a      	cmp	r2, r3
 8003428:	da81      	bge.n	800332e <graphic_draw_char_RAM+0x156>
	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 800342a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	76fb      	strb	r3, [r7, #27]
 8003436:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800343a:	7e3b      	ldrb	r3, [r7, #24]
 800343c:	429a      	cmp	r2, r3
 800343e:	f6ff af73 	blt.w	8003328 <graphic_draw_char_RAM+0x150>
				}
			}
		} // Koniec rysowania
	}// Koniec pętli do wierszy

	return charWidth;
 8003442:	7ffb      	ldrb	r3, [r7, #31]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bdb0      	pop	{r4, r5, r7, pc}
 800344c:	20000014 	.word	0x20000014
 8003450:	20000016 	.word	0x20000016

08003454 <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b08f      	sub	sp, #60	; 0x3c
 8003458:	af06      	add	r7, sp, #24
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
	int16_t cursorX = string->x;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	83fb      	strh	r3, [r7, #30]
	int16_t cursorY = string->y;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	885b      	ldrh	r3, [r3, #2]
 800346e:	82fb      	strh	r3, [r7, #22]
	uint8_t charWidth;

	textSize = FONTx1;	// To być może będzie niepotrzebne
 8003470:	2301      	movs	r3, #1
 8003472:	71fb      	strb	r3, [r7, #7]

	if ( string->onChange ) {
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	7c1b      	ldrb	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d018      	beq.n	80034ae <graphic_puts_RAM+0x5a>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	889b      	ldrh	r3, [r3, #4]
 800348c:	b2dc      	uxtb	r4, r3
									string->fontPtrPGM->heightPixels, bg, gamma );
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003496:	9202      	str	r2, [sp, #8]
 8003498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4623      	mov	r3, r4
 80034a0:	4602      	mov	r2, r0
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff fe43 	bl	800312e <graphic_fill_rectangle_RAM>
		string->onChange = 0;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	741a      	strb	r2, [r3, #16]
	}
	string->lastPosX = string->x;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	825a      	strh	r2, [r3, #18]
	string->lastPosY = string->y;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	829a      	strh	r2, [r3, #20]

	wchar_t * str = string->str;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]

	while ( *str ) {
 80034c8:	e028      	b.n	800351c <graphic_puts_RAM+0xc8>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, *str++, color, bg, textSize, string->fontPtrPGM, gamma );
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	1d1a      	adds	r2, r3, #4
 80034ce:	61ba      	str	r2, [r7, #24]
 80034d0:	681c      	ldr	r4, [r3, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80034da:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80034de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e0:	9204      	str	r2, [sp, #16]
 80034e2:	9303      	str	r3, [sp, #12]
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4623      	mov	r3, r4
 80034f2:	4602      	mov	r2, r0
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fe6f 	bl	80031d8 <graphic_draw_char_RAM>
 80034fa:	4603      	mov	r3, r0
 80034fc:	757b      	strb	r3, [r7, #21]
		cursorX += textSize * (charWidth + string->fontPtrPGM->interspacePixels );
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	b29a      	uxth	r2, r3
 8003502:	7d7b      	ldrb	r3, [r7, #21]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	68c9      	ldr	r1, [r1, #12]
 8003508:	7a09      	ldrb	r1, [r1, #8]
 800350a:	440b      	add	r3, r1
 800350c:	b29b      	uxth	r3, r3
 800350e:	fb12 f303 	smulbb	r3, r2, r3
 8003512:	b29a      	uxth	r2, r3
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	4413      	add	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	83fb      	strh	r3, [r7, #30]
	while ( *str ) {
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1d2      	bne.n	80034ca <graphic_puts_RAM+0x76>
	}
	return  string->stringLength = cursorX - string->x; //Zwraca długość napisu w pikselach
 8003524:	8bfa      	ldrh	r2, [r7, #30]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352c:	b29b      	uxth	r3, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	809a      	strh	r2, [r3, #4]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	889b      	ldrh	r3, [r3, #4]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	; 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd90      	pop	{r4, r7, pc}

08003542 <graphic_char_to_wide>:
								string->fontPtrPGM->heightPixels, bg, gamma );
}
/*********************************************************************************************************/

/******************* Duplikuje tablice typu char do wideChar *******************************/
uint8_t graphic_char_to_wide( wchar_t* dest, char* source ) {
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
	int i = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
	char * ptr = source;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	60bb      	str	r3, [r7, #8]

    while(ptr[i]) {
 8003554:	e00c      	b.n	8003570 <graphic_char_to_wide+0x2e>
        dest[i] = (char)source[i];
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	4413      	add	r3, r2
 800355c:	7819      	ldrb	r1, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	460a      	mov	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
        i++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3301      	adds	r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
    while(ptr[i]) {
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ec      	bne.n	8003556 <graphic_char_to_wide+0x14>
    }
    dest[i] = '\0';
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
	return i; // Zwraca długość string'a bez znaku kontrolnego '\0'
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	b2db      	uxtb	r3, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <graphic_puts_float_RAM>:
}

#define SHIFT_MINUS		1
#define FLOAT_PRECISION	10
static void graphic_puts_float_RAM( volatile T_DISPLAY *buffer, T_STRING *string, float data, uint8_t textSize,
							 	 	 uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b0a0      	sub	sp, #128	; 0x80
 800359c:	af02      	add	r7, sp, #8
 800359e:	6178      	str	r0, [r7, #20]
 80035a0:	6139      	str	r1, [r7, #16]
 80035a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	72fb      	strb	r3, [r7, #11]
	char text_char [16];
	char *ptr_char = text_char;
 80035ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80035b0:	677b      	str	r3, [r7, #116]	; 0x74

	wchar_t	text_wchar[16];
	string->str = text_wchar;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f107 021c 	add.w	r2, r7, #28
 80035b8:	609a      	str	r2, [r3, #8]

	uint8_t i = SHIFT_MINUS;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint8_t j = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	if ( data < 0 ) *text_char = '-';
 80035c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80035ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	d503      	bpl.n	80035dc <graphic_puts_float_RAM+0x44>
 80035d4:	232d      	movs	r3, #45	; 0x2d
 80035d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80035da:	e002      	b.n	80035e2 <graphic_puts_float_RAM+0x4a>
	else			*text_char = ' ';					// Space for empty character
 80035dc:	2320      	movs	r3, #32
 80035de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	if (data < 0) data = data * -1;
 80035e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	d505      	bpl.n	80035fc <graphic_puts_float_RAM+0x64>
 80035f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f4:	eef1 7a67 	vneg.f32	s15, s15
 80035f8:	edc7 7a03 	vstr	s15, [r7, #12]

	int32_t dec = (int32_t)data;
 80035fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003604:	ee17 3a90 	vmov	r3, s15
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c
	itoa( dec, text_char + SHIFT_MINUS, 10 );			// One place for minus
 800360a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800360e:	3301      	adds	r3, #1
 8003610:	220a      	movs	r2, #10
 8003612:	4619      	mov	r1, r3
 8003614:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003616:	f000 faa3 	bl	8003b60 <itoa>

	while ( *( ptr_char++ ) ) {
 800361a:	e009      	b.n	8003630 <graphic_puts_float_RAM+0x98>
		i++;
 800361c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003620:	3301      	adds	r3, #1
 8003622:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		j++;
 8003626:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800362a:	3301      	adds	r3, #1
 800362c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	while ( *( ptr_char++ ) ) {
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	677a      	str	r2, [r7, #116]	; 0x74
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ef      	bne.n	800361c <graphic_puts_float_RAM+0x84>
	}
	text_char[ i++ - 1 ] = '.';
 800363c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	f887 2073 	strb.w	r2, [r7, #115]	; 0x73
 8003646:	3b01      	subs	r3, #1
 8003648:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800364c:	4413      	add	r3, r2
 800364e:	222e      	movs	r2, #46	; 0x2e
 8003650:	f803 2c1c 	strb.w	r2, [r3, #-28]

	data = data - (float32_t)dec;
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003666:	edc7 7a03 	vstr	s15, [r7, #12]
	do {
		data = (float32_t)data*10;
 800366a:	edd7 7a03 	vldr	s15, [r7, #12]
 800366e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003676:	edc7 7a03 	vstr	s15, [r7, #12]
		dec = (uint32_t) ( data );
 800367a:	edd7 7a03 	vldr	s15, [r7, #12]
 800367e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003682:	ee17 3a90 	vmov	r3, s15
 8003686:	66fb      	str	r3, [r7, #108]	; 0x6c
		text_char[ i++ - SHIFT_MINUS ] = '0';
 8003688:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	f887 2073 	strb.w	r2, [r7, #115]	; 0x73
 8003692:	3b01      	subs	r3, #1
 8003694:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003698:	4413      	add	r3, r2
 800369a:	2230      	movs	r2, #48	; 0x30
 800369c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		j++;
 80036a0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80036a4:	3301      	adds	r3, #1
 80036a6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	} while ( dec == 0 );
 80036aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0dc      	beq.n	800366a <graphic_puts_float_RAM+0xd2>
	if (j>10) j = 10;
 80036b0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80036b4:	2b0a      	cmp	r3, #10
 80036b6:	d902      	bls.n	80036be <graphic_puts_float_RAM+0x126>
 80036b8:	230a      	movs	r3, #10
 80036ba:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	dec = (uint32_t )powf( 10, FLOAT_PRECISION - j )*data;   // 10000000 * data
 80036be:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80036c2:	f1c3 030a 	rsb	r3, r3, #10
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ce:	eef0 0a67 	vmov.f32	s1, s15
 80036d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80036d6:	f000 fabb 	bl	8003c50 <powf>
 80036da:	eef0 7a40 	vmov.f32	s15, s0
 80036de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f2:	ee17 3a90 	vmov	r3, s15
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c

	itoa( (uint32_t)dec, text_char + i - SHIFT_MINUS, 10 );
 80036f8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80036fc:	3b01      	subs	r3, #1
 80036fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003702:	4413      	add	r3, r2
 8003704:	220a      	movs	r2, #10
 8003706:	4619      	mov	r1, r3
 8003708:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800370a:	f000 fa29 	bl	8003b60 <itoa>

	(void)graphic_char_to_wide( text_wchar, text_char );
 800370e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff12 	bl	8003542 <graphic_char_to_wide>
    string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 800371e:	7afa      	ldrb	r2, [r7, #11]
 8003720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6939      	ldr	r1, [r7, #16]
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f7ff fe8f 	bl	8003454 <graphic_puts_RAM>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	809a      	strh	r2, [r3, #4]
}
 800373e:	bf00      	nop
 8003740:	3778      	adds	r7, #120	; 0x78
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <TEXT_display_float>:
	Text->y = y;
	Text->onChange = 1;
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
	graphic_puts_int_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
}
void TEXT_display_float( int16_t x, int16_t y, float number, T_STRING * Text ) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b090      	sub	sp, #64	; 0x40
 800374c:	af02      	add	r7, sp, #8
 800374e:	4603      	mov	r3, r0
 8003750:	ed87 0a02 	vstr	s0, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	81fb      	strh	r3, [r7, #14]
 8003758:	460b      	mov	r3, r1
 800375a:	81bb      	strh	r3, [r7, #12]
	wchar_t String[10];
	Text->str = String;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f107 0210 	add.w	r2, r7, #16
 8003762:	609a      	str	r2, [r3, #8]
	Text->x = x;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	801a      	strh	r2, [r3, #0]
	Text->y = y;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	89ba      	ldrh	r2, [r7, #12]
 800376e:	805a      	strh	r2, [r3, #2]
	Text->onChange = 1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	741a      	strb	r2, [r3, #16]
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <TEXT_display_float+0x58>)
 800377a:	60da      	str	r2, [r3, #12]
	graphic_puts_float_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <TEXT_display_float+0x5c>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <TEXT_display_float+0x60>)
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800378c:	2201      	movs	r2, #1
 800378e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	f7ff ff00 	bl	8003598 <graphic_puts_float_RAM>
}
 8003798:	bf00      	nop
 800379a:	3738      	adds	r7, #56	; 0x38
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	0800507c 	.word	0x0800507c
 80037a4:	20000008 	.word	0x20000008
 80037a8:	080050f0 	.word	0x080050f0

080037ac <sw_dma_memset_init>:
 *      Author: simon
 */

#include "sw_mcu_conf.h"

void sw_dma_memset_init( uint32_t bits ) {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
#ifdef STM32F3
	RCC->AHBENR |= RCC_AHBENR_DMA2EN;			// DMA1 clock enabled
#elif defined STM32L4
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;			// DMA1 clock enabled
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <sw_dma_memset_init+0x64>)
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <sw_dma_memset_init+0x64>)
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;			// Clear CCR_EN bit - ready to CMAR,CPAR,CNDTR modification
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <sw_dma_memset_init+0x68>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <sw_dma_memset_init+0x68>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR = DMA_CCR_MEM2MEM		// Copy memory to memory
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <sw_dma_memset_init+0x68>)
 80037ce:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 80037d2:	601a      	str	r2, [r3, #0]
						 |DMA_CCR_MINC 	 		// Memory increment mode enabled
//						 |DMA_CCR_PINC 	 		// Peripheral increment mode enabled
//						 |DMA_CCR_DIR			// Data transfer direction. CMAR -> CPAR (Memory to Peripheral)
						 ;
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <sw_dma_memset_init+0x68>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <sw_dma_memset_init+0x68>)
 80037da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037de:	6013      	str	r3, [r2, #0]
	bits = ( bits << DMA_CCR_PSIZE_Pos );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <sw_dma_memset_init+0x68>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <sw_dma_memset_init+0x68>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
	bits = ( bits << DMA_CCR_MSIZE_Pos );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <sw_dma_memset_init+0x68>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4905      	ldr	r1, [pc, #20]	; (8003814 <sw_dma_memset_init+0x68>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40021000 	.word	0x40021000
 8003814:	40020444 	.word	0x40020444

08003818 <DMA1_Channel3_IRQHandler>:
}
/*************************************************************************************/

/* 11. *******************************************************************************/
#ifdef SPI_DMA
void SPI_DMA_ChannelTX_IRQHandler(void) {
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
	while( (DMA1->ISR & SPI_DMATX_TC_FLAG) == 0 ) {}	//
 800381c:	bf00      	nop
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <DMA1_Channel3_IRQHandler+0x4c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f9      	beq.n	800381e <DMA1_Channel3_IRQHandler+0x6>
	DMA1->IFCR = SPI_DMATX_TC_FLAG;			// DMA Channel Transfer Complete clear flag
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <DMA1_Channel3_IRQHandler+0x4c>)
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	605a      	str	r2, [r3, #4]
}
 8003832:	bf00      	nop
	while ( (spi->SPI->SR & SPI_SR_BSY) == SPI_SR_BSY ) {}
 8003834:	bf00      	nop
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <DMA1_Channel3_IRQHandler+0x50>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d0f7      	beq.n	8003836 <DMA1_Channel3_IRQHandler+0x1e>
}
 8003846:	bf00      	nop
	spi_clear_tc_flag();
	spi_wait_until_busy();
	SPI_DMATX_Channel->CCR	&= ~DMA_CCR_EN;			//
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <DMA1_Channel3_IRQHandler+0x54>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a07      	ldr	r2, [pc, #28]	; (800386c <DMA1_Channel3_IRQHandler+0x54>)
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]
	spiDmaStatus 			 = SPI_DMA_BUSY;
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <DMA1_Channel3_IRQHandler+0x58>)
 8003856:	2202      	movs	r2, #2
 8003858:	701a      	strb	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40020000 	.word	0x40020000
 8003868:	20000018 	.word	0x20000018
 800386c:	40020030 	.word	0x40020030
 8003870:	20000538 	.word	0x20000538

08003874 <DWT_Delay_Init>:
#include "sw_soft_timers.h"

#include "../SW_BOARD/sw_led_blink_debug.h"

// https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/
uint32_t DWT_Delay_Init(void) {
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <DWT_Delay_Init+0x58>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <DWT_Delay_Init+0x58>)
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003882:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <DWT_Delay_Init+0x58>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a10      	ldr	r2, [pc, #64]	; (80038cc <DWT_Delay_Init+0x58>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <DWT_Delay_Init+0x5c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0e      	ldr	r2, [pc, #56]	; (80038d0 <DWT_Delay_Init+0x5c>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <DWT_Delay_Init+0x5c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <DWT_Delay_Init+0x5c>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <DWT_Delay_Init+0x5c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80038ae:	bf00      	nop
	__ASM volatile ("NOP");
 80038b0:	bf00      	nop
	__ASM volatile ("NOP");
 80038b2:	bf00      	nop

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT) {
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <DWT_Delay_Init+0x5c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <DWT_Delay_Init+0x4c>
		return 0; /*clock cycle counter started*/
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <DWT_Delay_Init+0x4e>
	} else {
		return 1; /*clock cycle counter not started*/
 80038c0:	2301      	movs	r3, #1
	}
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000edf0 	.word	0xe000edf0
 80038d0:	e0001000 	.word	0xe0001000

080038d4 <sw_softTimers_init>:

/**** Inicjujemy SysTick pod timery programowe *****/
uint32_t sw_softTimers_init( uint32_t timeBase_ms, uint32_t type ) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]

//	if 		(type==MILI_SEC)	type = 1000;	// 1 ms
//	else if (type==MICRO_SEC) 	type = 1;		// 1 us
//	else return 0;								// błąd
//	SysTick_Config( SystemCoreClock/type/timeBase_ms );
	if ( type==MICRO_SEC ) {
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d101      	bne.n	80038e8 <sw_softTimers_init+0x14>
		DWT_Delay_Init();
 80038e4:	f7ff ffc6 	bl	8003874 <DWT_Delay_Init>
	}
	return 1;									// ok
 80038e8:	2301      	movs	r3, #1
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <SysTick_Handler>:
volatile uint16_t showMenuTimer;
volatile uint16_t softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	milis++;
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <SysTick_Handler+0xf0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <SysTick_Handler+0xf0>)
 8003900:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <SysTick_Handler+0xf4>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <SysTick_Handler+0x26>
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <SysTick_Handler+0xf4>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <SysTick_Handler+0xf4>)
 8003918:	801a      	strh	r2, [r3, #0]
	if (debounceTimer)	debounceTimer--;
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <SysTick_Handler+0xf8>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <SysTick_Handler+0x3e>
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <SysTick_Handler+0xf8>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <SysTick_Handler+0xf8>)
 8003930:	801a      	strh	r2, [r3, #0]
	if (repeatTimer)	repeatTimer--;
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <SysTick_Handler+0xfc>)
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <SysTick_Handler+0x56>
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <SysTick_Handler+0xfc>)
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <SysTick_Handler+0xfc>)
 8003948:	801a      	strh	r2, [r3, #0]
	if (delayTimer)		delayTimer--;
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <SysTick_Handler+0x100>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d006      	beq.n	8003962 <SysTick_Handler+0x6e>
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <SysTick_Handler+0x100>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <SysTick_Handler+0x100>)
 8003960:	801a      	strh	r2, [r3, #0]
	if (showMenuTimer) 	showMenuTimer--;
 8003962:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <SysTick_Handler+0x104>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <SysTick_Handler+0x86>
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <SysTick_Handler+0x104>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <SysTick_Handler+0x104>)
 8003978:	801a      	strh	r2, [r3, #0]
	if (softTimer2) 	softTimer2--;
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <SysTick_Handler+0x108>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <SysTick_Handler+0x9e>
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <SysTick_Handler+0x108>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <SysTick_Handler+0x108>)
 8003990:	801a      	strh	r2, [r3, #0]
	if (softTimer3) 	softTimer3--;
 8003992:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <SysTick_Handler+0x10c>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <SysTick_Handler+0xb6>
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <SysTick_Handler+0x10c>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <SysTick_Handler+0x10c>)
 80039a8:	801a      	strh	r2, [r3, #0]
	if (softTimer5) 	softTimer5--;
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <SysTick_Handler+0x110>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <SysTick_Handler+0xce>
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <SysTick_Handler+0x110>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <SysTick_Handler+0x110>)
 80039c0:	801a      	strh	r2, [r3, #0]
	if (whileTimer) 	whileTimer--;
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <SysTick_Handler+0x114>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <SysTick_Handler+0xe6>
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <SysTick_Handler+0x114>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <SysTick_Handler+0x114>)
 80039d8:	801a      	strh	r2, [r3, #0]

	sw_led_blinking();
 80039da:	f7ff fa0f 	bl	8002dfc <sw_led_blinking>
//	SW_IR_DECODED_EVENT();
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	2000053c 	.word	0x2000053c
 80039e8:	20000568 	.word	0x20000568
 80039ec:	2000055c 	.word	0x2000055c
 80039f0:	2000055e 	.word	0x2000055e
 80039f4:	2000053a 	.word	0x2000053a
 80039f8:	20000574 	.word	0x20000574
 80039fc:	20000562 	.word	0x20000562
 8003a00:	20000576 	.word	0x20000576
 8003a04:	20000578 	.word	0x20000578
 8003a08:	20000560 	.word	0x20000560

08003a0c <delay_ms>:
uint32_t millis(void) {
	return milis;
}
/*********************************************************/
/*********************************************************/
void delay_ms( uint16_t ms ) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
	delayTimer = ms;
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <delay_ms+0x2c>)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	8013      	strh	r3, [r2, #0]
	while ( delayTimer ) {}
 8003a1c:	bf00      	nop
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <delay_ms+0x2c>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1fa      	bne.n	8003a1e <delay_ms+0x12>
}
 8003a28:	bf00      	nop
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000053a 	.word	0x2000053a

08003a3c <delay_us>:
/*********************************************************/

void delay_us( uint16_t us ) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
	  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <delay_us+0x4c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]
	  uint32_t au32_ticks = ( uint32_t ) SystemCoreClock / 1000000;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <delay_us+0x50>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <delay_us+0x54>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	0c9b      	lsrs	r3, r3, #18
 8003a58:	60bb      	str	r3, [r7, #8]
	  us *= au32_ticks;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	fb12 f303 	smulbb	r3, r2, r3
 8003a64:	80fb      	strh	r3, [r7, #6]
	  while ( (DWT->CYCCNT - au32_initial_ticks) < us - au32_ticks );
 8003a66:	bf00      	nop
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <delay_us+0x4c>)
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	88f9      	ldrh	r1, [r7, #6]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1acb      	subs	r3, r1, r3
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3f6      	bcc.n	8003a68 <delay_us+0x2c>
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e0001000 	.word	0xe0001000
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	431bde83 	.word	0x431bde83

08003a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8003a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a98:	f7fd f9c6 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a9e:	e003      	b.n	8003aa8 <LoopCopyDataInit>

08003aa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003aa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003aa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003aa6:	3104      	adds	r1, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003aa8:	480a      	ldr	r0, [pc, #40]	; (8003ad4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003aac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003aae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ab0:	d3f6      	bcc.n	8003aa0 <CopyDataInit>
	ldr	r2, =_sbss
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ab4:	e002      	b.n	8003abc <LoopFillZerobss>

08003ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ab6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ab8:	f842 3b04 	str.w	r3, [r2], #4

08003abc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <LoopForever+0x16>)
	cmp	r2, r3
 8003abe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ac0:	d3f9      	bcc.n	8003ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f000 f811 	bl	8003ae8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ac6:	f7fd f83f 	bl	8000b48 <main>

08003aca <LoopForever>:

LoopForever:
    b LoopForever
 8003aca:	e7fe      	b.n	8003aca <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8003acc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003ad0:	08005178 	.word	0x08005178
	ldr	r0, =_sdata
 8003ad4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003ad8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8003adc:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8003ae0:	20000584 	.word	0x20000584

08003ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC1_2_IRQHandler>
	...

08003ae8 <__libc_init_array>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4d0d      	ldr	r5, [pc, #52]	; (8003b20 <__libc_init_array+0x38>)
 8003aec:	4c0d      	ldr	r4, [pc, #52]	; (8003b24 <__libc_init_array+0x3c>)
 8003aee:	1b64      	subs	r4, r4, r5
 8003af0:	10a4      	asrs	r4, r4, #2
 8003af2:	2600      	movs	r6, #0
 8003af4:	42a6      	cmp	r6, r4
 8003af6:	d109      	bne.n	8003b0c <__libc_init_array+0x24>
 8003af8:	4d0b      	ldr	r5, [pc, #44]	; (8003b28 <__libc_init_array+0x40>)
 8003afa:	4c0c      	ldr	r4, [pc, #48]	; (8003b2c <__libc_init_array+0x44>)
 8003afc:	f000 fda6 	bl	800464c <_init>
 8003b00:	1b64      	subs	r4, r4, r5
 8003b02:	10a4      	asrs	r4, r4, #2
 8003b04:	2600      	movs	r6, #0
 8003b06:	42a6      	cmp	r6, r4
 8003b08:	d105      	bne.n	8003b16 <__libc_init_array+0x2e>
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b10:	4798      	blx	r3
 8003b12:	3601      	adds	r6, #1
 8003b14:	e7ee      	b.n	8003af4 <__libc_init_array+0xc>
 8003b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1a:	4798      	blx	r3
 8003b1c:	3601      	adds	r6, #1
 8003b1e:	e7f2      	b.n	8003b06 <__libc_init_array+0x1e>
 8003b20:	08005168 	.word	0x08005168
 8003b24:	08005168 	.word	0x08005168
 8003b28:	08005168 	.word	0x08005168
 8003b2c:	0800516c 	.word	0x0800516c

08003b30 <__itoa>:
 8003b30:	1e93      	subs	r3, r2, #2
 8003b32:	2b22      	cmp	r3, #34	; 0x22
 8003b34:	b510      	push	{r4, lr}
 8003b36:	460c      	mov	r4, r1
 8003b38:	d904      	bls.n	8003b44 <__itoa+0x14>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	700b      	strb	r3, [r1, #0]
 8003b3e:	461c      	mov	r4, r3
 8003b40:	4620      	mov	r0, r4
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	2a0a      	cmp	r2, #10
 8003b46:	d109      	bne.n	8003b5c <__itoa+0x2c>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	da07      	bge.n	8003b5c <__itoa+0x2c>
 8003b4c:	232d      	movs	r3, #45	; 0x2d
 8003b4e:	700b      	strb	r3, [r1, #0]
 8003b50:	4240      	negs	r0, r0
 8003b52:	2101      	movs	r1, #1
 8003b54:	4421      	add	r1, r4
 8003b56:	f000 f805 	bl	8003b64 <__utoa>
 8003b5a:	e7f1      	b.n	8003b40 <__itoa+0x10>
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	e7f9      	b.n	8003b54 <__itoa+0x24>

08003b60 <itoa>:
 8003b60:	f7ff bfe6 	b.w	8003b30 <__itoa>

08003b64 <__utoa>:
 8003b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b66:	4c1f      	ldr	r4, [pc, #124]	; (8003be4 <__utoa+0x80>)
 8003b68:	b08b      	sub	sp, #44	; 0x2c
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	466e      	mov	r6, sp
 8003b70:	f104 0c20 	add.w	ip, r4, #32
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	6861      	ldr	r1, [r4, #4]
 8003b78:	4637      	mov	r7, r6
 8003b7a:	c703      	stmia	r7!, {r0, r1}
 8003b7c:	3408      	adds	r4, #8
 8003b7e:	4564      	cmp	r4, ip
 8003b80:	463e      	mov	r6, r7
 8003b82:	d1f7      	bne.n	8003b74 <__utoa+0x10>
 8003b84:	7921      	ldrb	r1, [r4, #4]
 8003b86:	7139      	strb	r1, [r7, #4]
 8003b88:	1e91      	subs	r1, r2, #2
 8003b8a:	6820      	ldr	r0, [r4, #0]
 8003b8c:	6038      	str	r0, [r7, #0]
 8003b8e:	2922      	cmp	r1, #34	; 0x22
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	d904      	bls.n	8003ba0 <__utoa+0x3c>
 8003b96:	7019      	strb	r1, [r3, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	b00b      	add	sp, #44	; 0x2c
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	1e58      	subs	r0, r3, #1
 8003ba2:	4684      	mov	ip, r0
 8003ba4:	fbb5 f7f2 	udiv	r7, r5, r2
 8003ba8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003bac:	fb02 5617 	mls	r6, r2, r7, r5
 8003bb0:	4476      	add	r6, lr
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003bb8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003bbc:	462e      	mov	r6, r5
 8003bbe:	42b2      	cmp	r2, r6
 8003bc0:	f101 0101 	add.w	r1, r1, #1
 8003bc4:	463d      	mov	r5, r7
 8003bc6:	d9ed      	bls.n	8003ba4 <__utoa+0x40>
 8003bc8:	2200      	movs	r2, #0
 8003bca:	545a      	strb	r2, [r3, r1]
 8003bcc:	1919      	adds	r1, r3, r4
 8003bce:	1aa5      	subs	r5, r4, r2
 8003bd0:	42aa      	cmp	r2, r5
 8003bd2:	dae2      	bge.n	8003b9a <__utoa+0x36>
 8003bd4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003bd8:	780e      	ldrb	r6, [r1, #0]
 8003bda:	7006      	strb	r6, [r0, #0]
 8003bdc:	3201      	adds	r2, #1
 8003bde:	f801 5901 	strb.w	r5, [r1], #-1
 8003be2:	e7f4      	b.n	8003bce <__utoa+0x6a>
 8003be4:	0800511c 	.word	0x0800511c

08003be8 <sqrt>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	ed2d 8b02 	vpush	{d8}
 8003bee:	ec55 4b10 	vmov	r4, r5, d0
 8003bf2:	f000 f8c5 	bl	8003d80 <__ieee754_sqrt>
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <sqrt+0x64>)
 8003bf8:	eeb0 8a40 	vmov.f32	s16, s0
 8003bfc:	eef0 8a60 	vmov.f32	s17, s1
 8003c00:	f993 3000 	ldrsb.w	r3, [r3]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d019      	beq.n	8003c3c <sqrt+0x54>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc ff34 	bl	8000a7c <__aeabi_dcmpun>
 8003c14:	b990      	cbnz	r0, 8003c3c <sqrt+0x54>
 8003c16:	2200      	movs	r2, #0
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc ff05 	bl	8000a2c <__aeabi_dcmplt>
 8003c22:	b158      	cbz	r0, 8003c3c <sqrt+0x54>
 8003c24:	f000 fd0c 	bl	8004640 <__errno>
 8003c28:	2321      	movs	r3, #33	; 0x21
 8003c2a:	6003      	str	r3, [r0, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7fc fdb2 	bl	800079c <__aeabi_ddiv>
 8003c38:	ec41 0b18 	vmov	d8, r0, r1
 8003c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8003c40:	eef0 0a68 	vmov.f32	s1, s17
 8003c44:	ecbd 8b02 	vpop	{d8}
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
 8003c4a:	bf00      	nop
 8003c4c:	20000080 	.word	0x20000080

08003c50 <powf>:
 8003c50:	b508      	push	{r3, lr}
 8003c52:	ed2d 8b04 	vpush	{d8-d9}
 8003c56:	eeb0 9a40 	vmov.f32	s18, s0
 8003c5a:	eef0 8a60 	vmov.f32	s17, s1
 8003c5e:	f000 f943 	bl	8003ee8 <__ieee754_powf>
 8003c62:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <powf+0x120>)
 8003c64:	f993 3000 	ldrsb.w	r3, [r3]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8003c6e:	d012      	beq.n	8003c96 <powf+0x46>
 8003c70:	eef4 8a68 	vcmp.f32	s17, s17
 8003c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c78:	d60d      	bvs.n	8003c96 <powf+0x46>
 8003c7a:	eeb4 9a49 	vcmp.f32	s18, s18
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	d70d      	bvc.n	8003ca0 <powf+0x50>
 8003c84:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003c90:	bf08      	it	eq
 8003c92:	eeb0 8a67 	vmoveq.f32	s16, s15
 8003c96:	eeb0 0a48 	vmov.f32	s0, s16
 8003c9a:	ecbd 8b04 	vpop	{d8-d9}
 8003c9e:	bd08      	pop	{r3, pc}
 8003ca0:	eddf 9a34 	vldr	s19, [pc, #208]	; 8003d74 <powf+0x124>
 8003ca4:	eeb4 9a69 	vcmp.f32	s18, s19
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	d116      	bne.n	8003cdc <powf+0x8c>
 8003cae:	eef4 8a69 	vcmp.f32	s17, s19
 8003cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb6:	d057      	beq.n	8003d68 <powf+0x118>
 8003cb8:	eeb0 0a68 	vmov.f32	s0, s17
 8003cbc:	f000 fbde 	bl	800447c <finitef>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0e8      	beq.n	8003c96 <powf+0x46>
 8003cc4:	eef4 8ae9 	vcmpe.f32	s17, s19
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d5e3      	bpl.n	8003c96 <powf+0x46>
 8003cce:	f000 fcb7 	bl	8004640 <__errno>
 8003cd2:	2321      	movs	r3, #33	; 0x21
 8003cd4:	6003      	str	r3, [r0, #0]
 8003cd6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8003d78 <powf+0x128>
 8003cda:	e7dc      	b.n	8003c96 <powf+0x46>
 8003cdc:	f000 fbce 	bl	800447c <finitef>
 8003ce0:	bb50      	cbnz	r0, 8003d38 <powf+0xe8>
 8003ce2:	eeb0 0a49 	vmov.f32	s0, s18
 8003ce6:	f000 fbc9 	bl	800447c <finitef>
 8003cea:	b328      	cbz	r0, 8003d38 <powf+0xe8>
 8003cec:	eeb0 0a68 	vmov.f32	s0, s17
 8003cf0:	f000 fbc4 	bl	800447c <finitef>
 8003cf4:	b300      	cbz	r0, 8003d38 <powf+0xe8>
 8003cf6:	eeb4 8a48 	vcmp.f32	s16, s16
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	d706      	bvc.n	8003d0e <powf+0xbe>
 8003d00:	f000 fc9e 	bl	8004640 <__errno>
 8003d04:	2321      	movs	r3, #33	; 0x21
 8003d06:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8003d0a:	6003      	str	r3, [r0, #0]
 8003d0c:	e7c3      	b.n	8003c96 <powf+0x46>
 8003d0e:	f000 fc97 	bl	8004640 <__errno>
 8003d12:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8003d16:	2322      	movs	r3, #34	; 0x22
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	6003      	str	r3, [r0, #0]
 8003d1e:	d508      	bpl.n	8003d32 <powf+0xe2>
 8003d20:	eeb0 0a68 	vmov.f32	s0, s17
 8003d24:	f000 fbbe 	bl	80044a4 <rintf>
 8003d28:	eeb4 0a68 	vcmp.f32	s0, s17
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d1d1      	bne.n	8003cd6 <powf+0x86>
 8003d32:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8003d7c <powf+0x12c>
 8003d36:	e7ae      	b.n	8003c96 <powf+0x46>
 8003d38:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d40:	d1a9      	bne.n	8003c96 <powf+0x46>
 8003d42:	eeb0 0a49 	vmov.f32	s0, s18
 8003d46:	f000 fb99 	bl	800447c <finitef>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0a3      	beq.n	8003c96 <powf+0x46>
 8003d4e:	eeb0 0a68 	vmov.f32	s0, s17
 8003d52:	f000 fb93 	bl	800447c <finitef>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d09d      	beq.n	8003c96 <powf+0x46>
 8003d5a:	f000 fc71 	bl	8004640 <__errno>
 8003d5e:	2322      	movs	r3, #34	; 0x22
 8003d60:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8003d74 <powf+0x124>
 8003d64:	6003      	str	r3, [r0, #0]
 8003d66:	e796      	b.n	8003c96 <powf+0x46>
 8003d68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003d6c:	e793      	b.n	8003c96 <powf+0x46>
 8003d6e:	bf00      	nop
 8003d70:	20000080 	.word	0x20000080
 8003d74:	00000000 	.word	0x00000000
 8003d78:	ff800000 	.word	0xff800000
 8003d7c:	7f800000 	.word	0x7f800000

08003d80 <__ieee754_sqrt>:
 8003d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d84:	ec55 4b10 	vmov	r4, r5, d0
 8003d88:	4e56      	ldr	r6, [pc, #344]	; (8003ee4 <__ieee754_sqrt+0x164>)
 8003d8a:	43ae      	bics	r6, r5
 8003d8c:	ee10 0a10 	vmov	r0, s0
 8003d90:	ee10 3a10 	vmov	r3, s0
 8003d94:	4629      	mov	r1, r5
 8003d96:	462a      	mov	r2, r5
 8003d98:	d110      	bne.n	8003dbc <__ieee754_sqrt+0x3c>
 8003d9a:	ee10 2a10 	vmov	r2, s0
 8003d9e:	462b      	mov	r3, r5
 8003da0:	f7fc fbd2 	bl	8000548 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fa16 	bl	80001dc <__adddf3>
 8003db0:	4604      	mov	r4, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	ec45 4b10 	vmov	d0, r4, r5
 8003db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	dc10      	bgt.n	8003de2 <__ieee754_sqrt+0x62>
 8003dc0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003dc4:	4330      	orrs	r0, r6
 8003dc6:	d0f5      	beq.n	8003db4 <__ieee754_sqrt+0x34>
 8003dc8:	b15d      	cbz	r5, 8003de2 <__ieee754_sqrt+0x62>
 8003dca:	ee10 2a10 	vmov	r2, s0
 8003dce:	462b      	mov	r3, r5
 8003dd0:	ee10 0a10 	vmov	r0, s0
 8003dd4:	f7fc fa00 	bl	80001d8 <__aeabi_dsub>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	f7fc fcde 	bl	800079c <__aeabi_ddiv>
 8003de0:	e7e6      	b.n	8003db0 <__ieee754_sqrt+0x30>
 8003de2:	1509      	asrs	r1, r1, #20
 8003de4:	d076      	beq.n	8003ed4 <__ieee754_sqrt+0x154>
 8003de6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003dea:	07ce      	lsls	r6, r1, #31
 8003dec:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8003df0:	bf5e      	ittt	pl
 8003df2:	0fda      	lsrpl	r2, r3, #31
 8003df4:	005b      	lslpl	r3, r3, #1
 8003df6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8003dfa:	0fda      	lsrs	r2, r3, #31
 8003dfc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8003e00:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003e04:	2000      	movs	r0, #0
 8003e06:	106d      	asrs	r5, r5, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	f04f 0e16 	mov.w	lr, #22
 8003e0e:	4684      	mov	ip, r0
 8003e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e14:	eb0c 0401 	add.w	r4, ip, r1
 8003e18:	4294      	cmp	r4, r2
 8003e1a:	bfde      	ittt	le
 8003e1c:	1b12      	suble	r2, r2, r4
 8003e1e:	eb04 0c01 	addle.w	ip, r4, r1
 8003e22:	1840      	addle	r0, r0, r1
 8003e24:	0052      	lsls	r2, r2, #1
 8003e26:	f1be 0e01 	subs.w	lr, lr, #1
 8003e2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003e2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003e32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e36:	d1ed      	bne.n	8003e14 <__ieee754_sqrt+0x94>
 8003e38:	4671      	mov	r1, lr
 8003e3a:	2720      	movs	r7, #32
 8003e3c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003e40:	4562      	cmp	r2, ip
 8003e42:	eb04 060e 	add.w	r6, r4, lr
 8003e46:	dc02      	bgt.n	8003e4e <__ieee754_sqrt+0xce>
 8003e48:	d113      	bne.n	8003e72 <__ieee754_sqrt+0xf2>
 8003e4a:	429e      	cmp	r6, r3
 8003e4c:	d811      	bhi.n	8003e72 <__ieee754_sqrt+0xf2>
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	eb06 0e04 	add.w	lr, r6, r4
 8003e54:	da43      	bge.n	8003ede <__ieee754_sqrt+0x15e>
 8003e56:	f1be 0f00 	cmp.w	lr, #0
 8003e5a:	db40      	blt.n	8003ede <__ieee754_sqrt+0x15e>
 8003e5c:	f10c 0801 	add.w	r8, ip, #1
 8003e60:	eba2 020c 	sub.w	r2, r2, ip
 8003e64:	429e      	cmp	r6, r3
 8003e66:	bf88      	it	hi
 8003e68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003e6c:	1b9b      	subs	r3, r3, r6
 8003e6e:	4421      	add	r1, r4
 8003e70:	46c4      	mov	ip, r8
 8003e72:	0052      	lsls	r2, r2, #1
 8003e74:	3f01      	subs	r7, #1
 8003e76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003e7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003e7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003e82:	d1dd      	bne.n	8003e40 <__ieee754_sqrt+0xc0>
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d006      	beq.n	8003e96 <__ieee754_sqrt+0x116>
 8003e88:	1c4c      	adds	r4, r1, #1
 8003e8a:	bf13      	iteet	ne
 8003e8c:	3101      	addne	r1, #1
 8003e8e:	3001      	addeq	r0, #1
 8003e90:	4639      	moveq	r1, r7
 8003e92:	f021 0101 	bicne.w	r1, r1, #1
 8003e96:	1043      	asrs	r3, r0, #1
 8003e98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003e9c:	0849      	lsrs	r1, r1, #1
 8003e9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003ea2:	07c2      	lsls	r2, r0, #31
 8003ea4:	bf48      	it	mi
 8003ea6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003eaa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8003eae:	460c      	mov	r4, r1
 8003eb0:	463d      	mov	r5, r7
 8003eb2:	e77f      	b.n	8003db4 <__ieee754_sqrt+0x34>
 8003eb4:	0ada      	lsrs	r2, r3, #11
 8003eb6:	3815      	subs	r0, #21
 8003eb8:	055b      	lsls	r3, r3, #21
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d0fa      	beq.n	8003eb4 <__ieee754_sqrt+0x134>
 8003ebe:	02d7      	lsls	r7, r2, #11
 8003ec0:	d50a      	bpl.n	8003ed8 <__ieee754_sqrt+0x158>
 8003ec2:	f1c1 0420 	rsb	r4, r1, #32
 8003ec6:	fa23 f404 	lsr.w	r4, r3, r4
 8003eca:	1e4d      	subs	r5, r1, #1
 8003ecc:	408b      	lsls	r3, r1
 8003ece:	4322      	orrs	r2, r4
 8003ed0:	1b41      	subs	r1, r0, r5
 8003ed2:	e788      	b.n	8003de6 <__ieee754_sqrt+0x66>
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	e7f0      	b.n	8003eba <__ieee754_sqrt+0x13a>
 8003ed8:	0052      	lsls	r2, r2, #1
 8003eda:	3101      	adds	r1, #1
 8003edc:	e7ef      	b.n	8003ebe <__ieee754_sqrt+0x13e>
 8003ede:	46e0      	mov	r8, ip
 8003ee0:	e7be      	b.n	8003e60 <__ieee754_sqrt+0xe0>
 8003ee2:	bf00      	nop
 8003ee4:	7ff00000 	.word	0x7ff00000

08003ee8 <__ieee754_powf>:
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	ee10 5a90 	vmov	r5, s1
 8003ef0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8003ef4:	ed2d 8b02 	vpush	{d8}
 8003ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8003efc:	eef0 8a60 	vmov.f32	s17, s1
 8003f00:	f000 8291 	beq.w	8004426 <__ieee754_powf+0x53e>
 8003f04:	ee10 8a10 	vmov	r8, s0
 8003f08:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8003f0c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003f10:	dc06      	bgt.n	8003f20 <__ieee754_powf+0x38>
 8003f12:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8003f16:	dd0a      	ble.n	8003f2e <__ieee754_powf+0x46>
 8003f18:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003f1c:	f000 8283 	beq.w	8004426 <__ieee754_powf+0x53e>
 8003f20:	ecbd 8b02 	vpop	{d8}
 8003f24:	48d8      	ldr	r0, [pc, #864]	; (8004288 <__ieee754_powf+0x3a0>)
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 bab5 	b.w	8004498 <nanf>
 8003f2e:	f1b8 0f00 	cmp.w	r8, #0
 8003f32:	da1f      	bge.n	8003f74 <__ieee754_powf+0x8c>
 8003f34:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8003f38:	da2e      	bge.n	8003f98 <__ieee754_powf+0xb0>
 8003f3a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8003f3e:	f2c0 827b 	blt.w	8004438 <__ieee754_powf+0x550>
 8003f42:	15fb      	asrs	r3, r7, #23
 8003f44:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8003f48:	fa47 f603 	asr.w	r6, r7, r3
 8003f4c:	fa06 f303 	lsl.w	r3, r6, r3
 8003f50:	42bb      	cmp	r3, r7
 8003f52:	f040 8271 	bne.w	8004438 <__ieee754_powf+0x550>
 8003f56:	f006 0601 	and.w	r6, r6, #1
 8003f5a:	f1c6 0602 	rsb	r6, r6, #2
 8003f5e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8003f62:	d120      	bne.n	8003fa6 <__ieee754_powf+0xbe>
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	f280 8264 	bge.w	8004432 <__ieee754_powf+0x54a>
 8003f6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003f6e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8003f72:	e00d      	b.n	8003f90 <__ieee754_powf+0xa8>
 8003f74:	2600      	movs	r6, #0
 8003f76:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8003f7a:	d1f0      	bne.n	8003f5e <__ieee754_powf+0x76>
 8003f7c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8003f80:	f000 8251 	beq.w	8004426 <__ieee754_powf+0x53e>
 8003f84:	dd0a      	ble.n	8003f9c <__ieee754_powf+0xb4>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	f280 8250 	bge.w	800442c <__ieee754_powf+0x544>
 8003f8c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800428c <__ieee754_powf+0x3a4>
 8003f90:	ecbd 8b02 	vpop	{d8}
 8003f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f98:	2602      	movs	r6, #2
 8003f9a:	e7ec      	b.n	8003f76 <__ieee754_powf+0x8e>
 8003f9c:	2d00      	cmp	r5, #0
 8003f9e:	daf5      	bge.n	8003f8c <__ieee754_powf+0xa4>
 8003fa0:	eeb1 0a68 	vneg.f32	s0, s17
 8003fa4:	e7f4      	b.n	8003f90 <__ieee754_powf+0xa8>
 8003fa6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8003faa:	d102      	bne.n	8003fb2 <__ieee754_powf+0xca>
 8003fac:	ee28 0a08 	vmul.f32	s0, s16, s16
 8003fb0:	e7ee      	b.n	8003f90 <__ieee754_powf+0xa8>
 8003fb2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8003fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8003fba:	d108      	bne.n	8003fce <__ieee754_powf+0xe6>
 8003fbc:	f1b8 0f00 	cmp.w	r8, #0
 8003fc0:	db05      	blt.n	8003fce <__ieee754_powf+0xe6>
 8003fc2:	ecbd 8b02 	vpop	{d8}
 8003fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fca:	f000 ba4d 	b.w	8004468 <__ieee754_sqrtf>
 8003fce:	f000 fa4e 	bl	800446e <fabsf>
 8003fd2:	b124      	cbz	r4, 8003fde <__ieee754_powf+0xf6>
 8003fd4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8003fd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8003fdc:	d117      	bne.n	800400e <__ieee754_powf+0x126>
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	bfbc      	itt	lt
 8003fe2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8003fe6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8003fea:	f1b8 0f00 	cmp.w	r8, #0
 8003fee:	dacf      	bge.n	8003f90 <__ieee754_powf+0xa8>
 8003ff0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8003ff4:	ea54 0306 	orrs.w	r3, r4, r6
 8003ff8:	d104      	bne.n	8004004 <__ieee754_powf+0x11c>
 8003ffa:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003ffe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004002:	e7c5      	b.n	8003f90 <__ieee754_powf+0xa8>
 8004004:	2e01      	cmp	r6, #1
 8004006:	d1c3      	bne.n	8003f90 <__ieee754_powf+0xa8>
 8004008:	eeb1 0a40 	vneg.f32	s0, s0
 800400c:	e7c0      	b.n	8003f90 <__ieee754_powf+0xa8>
 800400e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004012:	3801      	subs	r0, #1
 8004014:	ea56 0300 	orrs.w	r3, r6, r0
 8004018:	d104      	bne.n	8004024 <__ieee754_powf+0x13c>
 800401a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800401e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004022:	e7b5      	b.n	8003f90 <__ieee754_powf+0xa8>
 8004024:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004028:	dd6b      	ble.n	8004102 <__ieee754_powf+0x21a>
 800402a:	4b99      	ldr	r3, [pc, #612]	; (8004290 <__ieee754_powf+0x3a8>)
 800402c:	429c      	cmp	r4, r3
 800402e:	dc06      	bgt.n	800403e <__ieee754_powf+0x156>
 8004030:	2d00      	cmp	r5, #0
 8004032:	daab      	bge.n	8003f8c <__ieee754_powf+0xa4>
 8004034:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004294 <__ieee754_powf+0x3ac>
 8004038:	ee20 0a00 	vmul.f32	s0, s0, s0
 800403c:	e7a8      	b.n	8003f90 <__ieee754_powf+0xa8>
 800403e:	4b96      	ldr	r3, [pc, #600]	; (8004298 <__ieee754_powf+0x3b0>)
 8004040:	429c      	cmp	r4, r3
 8004042:	dd02      	ble.n	800404a <__ieee754_powf+0x162>
 8004044:	2d00      	cmp	r5, #0
 8004046:	dcf5      	bgt.n	8004034 <__ieee754_powf+0x14c>
 8004048:	e7a0      	b.n	8003f8c <__ieee754_powf+0xa4>
 800404a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800404e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004052:	eddf 6a92 	vldr	s13, [pc, #584]	; 800429c <__ieee754_powf+0x3b4>
 8004056:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800405a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800405e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004062:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004066:	ee20 7a00 	vmul.f32	s14, s0, s0
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80042a0 <__ieee754_powf+0x3b8>
 8004072:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8004076:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80042a4 <__ieee754_powf+0x3bc>
 800407a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800407e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80042a8 <__ieee754_powf+0x3c0>
 8004082:	eef0 6a67 	vmov.f32	s13, s15
 8004086:	eee0 6a07 	vfma.f32	s13, s0, s14
 800408a:	ee16 3a90 	vmov	r3, s13
 800408e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004092:	f023 030f 	bic.w	r3, r3, #15
 8004096:	ee00 3a90 	vmov	s1, r3
 800409a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800409e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80040a2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80040a6:	f025 050f 	bic.w	r5, r5, #15
 80040aa:	ee07 5a10 	vmov	s14, r5
 80040ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80040b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 80040be:	3e01      	subs	r6, #1
 80040c0:	ea56 0200 	orrs.w	r2, r6, r0
 80040c4:	ee07 5a10 	vmov	s14, r5
 80040c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80040d0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80040d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80040d8:	ee17 4a10 	vmov	r4, s14
 80040dc:	bf08      	it	eq
 80040de:	eeb0 8a40 	vmoveq.f32	s16, s0
 80040e2:	2c00      	cmp	r4, #0
 80040e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80040e8:	f340 8184 	ble.w	80043f4 <__ieee754_powf+0x50c>
 80040ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80040f0:	f340 80fc 	ble.w	80042ec <__ieee754_powf+0x404>
 80040f4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004294 <__ieee754_powf+0x3ac>
 80040f8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80040fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004100:	e746      	b.n	8003f90 <__ieee754_powf+0xa8>
 8004102:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8004106:	bf01      	itttt	eq
 8004108:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80042ac <__ieee754_powf+0x3c4>
 800410c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004110:	f06f 0217 	mvneq.w	r2, #23
 8004114:	ee17 4a90 	vmoveq	r4, s15
 8004118:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800411c:	bf18      	it	ne
 800411e:	2200      	movne	r2, #0
 8004120:	3b7f      	subs	r3, #127	; 0x7f
 8004122:	4413      	add	r3, r2
 8004124:	4a62      	ldr	r2, [pc, #392]	; (80042b0 <__ieee754_powf+0x3c8>)
 8004126:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800412a:	4294      	cmp	r4, r2
 800412c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004130:	dd06      	ble.n	8004140 <__ieee754_powf+0x258>
 8004132:	4a60      	ldr	r2, [pc, #384]	; (80042b4 <__ieee754_powf+0x3cc>)
 8004134:	4294      	cmp	r4, r2
 8004136:	f340 80a4 	ble.w	8004282 <__ieee754_powf+0x39a>
 800413a:	3301      	adds	r3, #1
 800413c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004140:	2400      	movs	r4, #0
 8004142:	4a5d      	ldr	r2, [pc, #372]	; (80042b8 <__ieee754_powf+0x3d0>)
 8004144:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004148:	ee07 1a90 	vmov	s15, r1
 800414c:	ed92 7a00 	vldr	s14, [r2]
 8004150:	4a5a      	ldr	r2, [pc, #360]	; (80042bc <__ieee754_powf+0x3d4>)
 8004152:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004156:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800415a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800415e:	1049      	asrs	r1, r1, #1
 8004160:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004164:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004168:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800416c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004170:	ee06 1a10 	vmov	s12, r1
 8004174:	ee65 4a26 	vmul.f32	s9, s10, s13
 8004178:	ee36 7a47 	vsub.f32	s14, s12, s14
 800417c:	ee14 7a90 	vmov	r7, s9
 8004180:	4017      	ands	r7, r2
 8004182:	ee05 7a90 	vmov	s11, r7
 8004186:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800418a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800418e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80042c0 <__ieee754_powf+0x3d8>
 8004192:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8004196:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800419a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800419e:	eddf 6a49 	vldr	s13, [pc, #292]	; 80042c4 <__ieee754_powf+0x3dc>
 80041a2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80041a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042c8 <__ieee754_powf+0x3e0>
 80041aa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041ae:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800429c <__ieee754_powf+0x3b4>
 80041b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041b6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80042cc <__ieee754_powf+0x3e4>
 80041ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80041be:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80042d0 <__ieee754_powf+0x3e8>
 80041c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041c6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80041ca:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80041ce:	ee66 6a86 	vmul.f32	s13, s13, s12
 80041d2:	eee5 6a07 	vfma.f32	s13, s10, s14
 80041d6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80041da:	eef0 7a45 	vmov.f32	s15, s10
 80041de:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e6:	ee17 1a90 	vmov	r1, s15
 80041ea:	4011      	ands	r1, r2
 80041ec:	ee07 1a90 	vmov	s15, r1
 80041f0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80041f4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80041f8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80041fc:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004200:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004204:	eeb0 6a47 	vmov.f32	s12, s14
 8004208:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800420c:	ee16 1a10 	vmov	r1, s12
 8004210:	4011      	ands	r1, r2
 8004212:	ee06 1a90 	vmov	s13, r1
 8004216:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800421a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80042d4 <__ieee754_powf+0x3ec>
 800421e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042d8 <__ieee754_powf+0x3f0>
 8004222:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004226:	ee06 1a10 	vmov	s12, r1
 800422a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800422e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80042dc <__ieee754_powf+0x3f4>
 8004232:	492b      	ldr	r1, [pc, #172]	; (80042e0 <__ieee754_powf+0x3f8>)
 8004234:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004238:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800423c:	edd1 7a00 	vldr	s15, [r1]
 8004240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004244:	ee07 3a90 	vmov	s15, r3
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <__ieee754_powf+0x3fc>)
 800424a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800424e:	eef0 7a47 	vmov.f32	s15, s14
 8004252:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004256:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800425a:	edd4 0a00 	vldr	s1, [r4]
 800425e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004266:	ee17 3a90 	vmov	r3, s15
 800426a:	4013      	ands	r3, r2
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004274:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8004278:	eee6 6a65 	vfms.f32	s13, s12, s11
 800427c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004280:	e70f      	b.n	80040a2 <__ieee754_powf+0x1ba>
 8004282:	2401      	movs	r4, #1
 8004284:	e75d      	b.n	8004142 <__ieee754_powf+0x25a>
 8004286:	bf00      	nop
 8004288:	08005140 	.word	0x08005140
 800428c:	00000000 	.word	0x00000000
 8004290:	3f7ffff7 	.word	0x3f7ffff7
 8004294:	7149f2ca 	.word	0x7149f2ca
 8004298:	3f800007 	.word	0x3f800007
 800429c:	3eaaaaab 	.word	0x3eaaaaab
 80042a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80042a4:	36eca570 	.word	0x36eca570
 80042a8:	3fb8aa00 	.word	0x3fb8aa00
 80042ac:	4b800000 	.word	0x4b800000
 80042b0:	001cc471 	.word	0x001cc471
 80042b4:	005db3d6 	.word	0x005db3d6
 80042b8:	08005144 	.word	0x08005144
 80042bc:	fffff000 	.word	0xfffff000
 80042c0:	3e6c3255 	.word	0x3e6c3255
 80042c4:	3e53f142 	.word	0x3e53f142
 80042c8:	3e8ba305 	.word	0x3e8ba305
 80042cc:	3edb6db7 	.word	0x3edb6db7
 80042d0:	3f19999a 	.word	0x3f19999a
 80042d4:	3f76384f 	.word	0x3f76384f
 80042d8:	3f763800 	.word	0x3f763800
 80042dc:	369dc3a0 	.word	0x369dc3a0
 80042e0:	08005154 	.word	0x08005154
 80042e4:	0800514c 	.word	0x0800514c
 80042e8:	3338aa3c 	.word	0x3338aa3c
 80042ec:	f040 8092 	bne.w	8004414 <__ieee754_powf+0x52c>
 80042f0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80042e8 <__ieee754_powf+0x400>
 80042f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042f8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80042fc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	f73f aef6 	bgt.w	80040f4 <__ieee754_powf+0x20c>
 8004308:	15db      	asrs	r3, r3, #23
 800430a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800430e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004312:	4103      	asrs	r3, r0
 8004314:	4423      	add	r3, r4
 8004316:	4949      	ldr	r1, [pc, #292]	; (800443c <__ieee754_powf+0x554>)
 8004318:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800431c:	3a7f      	subs	r2, #127	; 0x7f
 800431e:	4111      	asrs	r1, r2
 8004320:	ea23 0101 	bic.w	r1, r3, r1
 8004324:	ee07 1a10 	vmov	s14, r1
 8004328:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800432c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004330:	f1c2 0217 	rsb	r2, r2, #23
 8004334:	4110      	asrs	r0, r2
 8004336:	2c00      	cmp	r4, #0
 8004338:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800433c:	bfb8      	it	lt
 800433e:	4240      	neglt	r0, r0
 8004340:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004344:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8004440 <__ieee754_powf+0x558>
 8004348:	ee17 3a10 	vmov	r3, s14
 800434c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004350:	f023 030f 	bic.w	r3, r3, #15
 8004354:	ee07 3a10 	vmov	s14, r3
 8004358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004360:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004444 <__ieee754_powf+0x55c>
 8004364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004368:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800436c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004448 <__ieee754_powf+0x560>
 8004370:	eeb0 0a67 	vmov.f32	s0, s15
 8004374:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004378:	eeb0 6a40 	vmov.f32	s12, s0
 800437c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004380:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004384:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004388:	eddf 6a30 	vldr	s13, [pc, #192]	; 800444c <__ieee754_powf+0x564>
 800438c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8004450 <__ieee754_powf+0x568>
 8004390:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004394:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004454 <__ieee754_powf+0x56c>
 8004398:	eee6 6a07 	vfma.f32	s13, s12, s14
 800439c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8004458 <__ieee754_powf+0x570>
 80043a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80043a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800445c <__ieee754_powf+0x574>
 80043a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80043ac:	eeb0 6a40 	vmov.f32	s12, s0
 80043b0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80043b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043b8:	eeb0 7a46 	vmov.f32	s14, s12
 80043bc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80043c0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80043c4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80043c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80043cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80043d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80043d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80043dc:	ee10 3a10 	vmov	r3, s0
 80043e0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80043e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e8:	da1a      	bge.n	8004420 <__ieee754_powf+0x538>
 80043ea:	f000 f8b7 	bl	800455c <scalbnf>
 80043ee:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043f2:	e5cd      	b.n	8003f90 <__ieee754_powf+0xa8>
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <__ieee754_powf+0x578>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	dd02      	ble.n	8004400 <__ieee754_powf+0x518>
 80043fa:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004464 <__ieee754_powf+0x57c>
 80043fe:	e67b      	b.n	80040f8 <__ieee754_powf+0x210>
 8004400:	d108      	bne.n	8004414 <__ieee754_powf+0x52c>
 8004402:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004406:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	f6ff af7b 	blt.w	8004308 <__ieee754_powf+0x420>
 8004412:	e7f2      	b.n	80043fa <__ieee754_powf+0x512>
 8004414:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004418:	f73f af76 	bgt.w	8004308 <__ieee754_powf+0x420>
 800441c:	2000      	movs	r0, #0
 800441e:	e78f      	b.n	8004340 <__ieee754_powf+0x458>
 8004420:	ee00 3a10 	vmov	s0, r3
 8004424:	e7e3      	b.n	80043ee <__ieee754_powf+0x506>
 8004426:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800442a:	e5b1      	b.n	8003f90 <__ieee754_powf+0xa8>
 800442c:	eeb0 0a68 	vmov.f32	s0, s17
 8004430:	e5ae      	b.n	8003f90 <__ieee754_powf+0xa8>
 8004432:	eeb0 0a48 	vmov.f32	s0, s16
 8004436:	e5ab      	b.n	8003f90 <__ieee754_powf+0xa8>
 8004438:	2600      	movs	r6, #0
 800443a:	e590      	b.n	8003f5e <__ieee754_powf+0x76>
 800443c:	007fffff 	.word	0x007fffff
 8004440:	3f317218 	.word	0x3f317218
 8004444:	35bfbe8c 	.word	0x35bfbe8c
 8004448:	3f317200 	.word	0x3f317200
 800444c:	3331bb4c 	.word	0x3331bb4c
 8004450:	b5ddea0e 	.word	0xb5ddea0e
 8004454:	388ab355 	.word	0x388ab355
 8004458:	bb360b61 	.word	0xbb360b61
 800445c:	3e2aaaab 	.word	0x3e2aaaab
 8004460:	43160000 	.word	0x43160000
 8004464:	0da24260 	.word	0x0da24260

08004468 <__ieee754_sqrtf>:
 8004468:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800446c:	4770      	bx	lr

0800446e <fabsf>:
 800446e:	ee10 3a10 	vmov	r3, s0
 8004472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004476:	ee00 3a10 	vmov	s0, r3
 800447a:	4770      	bx	lr

0800447c <finitef>:
 800447c:	b082      	sub	sp, #8
 800447e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004482:	9801      	ldr	r0, [sp, #4]
 8004484:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004488:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800448c:	bfac      	ite	ge
 800448e:	2000      	movge	r0, #0
 8004490:	2001      	movlt	r0, #1
 8004492:	b002      	add	sp, #8
 8004494:	4770      	bx	lr
	...

08004498 <nanf>:
 8004498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80044a0 <nanf+0x8>
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	7fc00000 	.word	0x7fc00000

080044a4 <rintf>:
 80044a4:	ee10 2a10 	vmov	r2, s0
 80044a8:	b513      	push	{r0, r1, r4, lr}
 80044aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80044ae:	397f      	subs	r1, #127	; 0x7f
 80044b0:	2916      	cmp	r1, #22
 80044b2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80044b6:	dc47      	bgt.n	8004548 <rintf+0xa4>
 80044b8:	b32b      	cbz	r3, 8004506 <rintf+0x62>
 80044ba:	2900      	cmp	r1, #0
 80044bc:	ee10 3a10 	vmov	r3, s0
 80044c0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80044c4:	da21      	bge.n	800450a <rintf+0x66>
 80044c6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80044ca:	425b      	negs	r3, r3
 80044cc:	4921      	ldr	r1, [pc, #132]	; (8004554 <rintf+0xb0>)
 80044ce:	0a5b      	lsrs	r3, r3, #9
 80044d0:	0d12      	lsrs	r2, r2, #20
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	0512      	lsls	r2, r2, #20
 80044d8:	4313      	orrs	r3, r2
 80044da:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	edd1 6a00 	vldr	s13, [r1]
 80044e6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80044ea:	ed8d 7a01 	vstr	s14, [sp, #4]
 80044ee:	eddd 7a01 	vldr	s15, [sp, #4]
 80044f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80044f6:	ee17 3a90 	vmov	r3, s15
 80044fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044fe:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004502:	ee00 3a10 	vmov	s0, r3
 8004506:	b002      	add	sp, #8
 8004508:	bd10      	pop	{r4, pc}
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <rintf+0xb4>)
 800450c:	410a      	asrs	r2, r1
 800450e:	4213      	tst	r3, r2
 8004510:	d0f9      	beq.n	8004506 <rintf+0x62>
 8004512:	0854      	lsrs	r4, r2, #1
 8004514:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8004518:	d006      	beq.n	8004528 <rintf+0x84>
 800451a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800451e:	ea23 0304 	bic.w	r3, r3, r4
 8004522:	fa42 f101 	asr.w	r1, r2, r1
 8004526:	430b      	orrs	r3, r1
 8004528:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <rintf+0xb0>)
 800452a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800452e:	ed90 7a00 	vldr	s14, [r0]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453a:	edcd 7a01 	vstr	s15, [sp, #4]
 800453e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004542:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004546:	e7de      	b.n	8004506 <rintf+0x62>
 8004548:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800454c:	d3db      	bcc.n	8004506 <rintf+0x62>
 800454e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004552:	e7d8      	b.n	8004506 <rintf+0x62>
 8004554:	0800515c 	.word	0x0800515c
 8004558:	007fffff 	.word	0x007fffff

0800455c <scalbnf>:
 800455c:	ee10 3a10 	vmov	r3, s0
 8004560:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004564:	d025      	beq.n	80045b2 <scalbnf+0x56>
 8004566:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800456a:	d302      	bcc.n	8004572 <scalbnf+0x16>
 800456c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004570:	4770      	bx	lr
 8004572:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004576:	d122      	bne.n	80045be <scalbnf+0x62>
 8004578:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <scalbnf+0xc8>)
 800457a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004628 <scalbnf+0xcc>
 800457e:	4298      	cmp	r0, r3
 8004580:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004584:	db16      	blt.n	80045b4 <scalbnf+0x58>
 8004586:	ee10 3a10 	vmov	r3, s0
 800458a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800458e:	3a19      	subs	r2, #25
 8004590:	4402      	add	r2, r0
 8004592:	2afe      	cmp	r2, #254	; 0xfe
 8004594:	dd15      	ble.n	80045c2 <scalbnf+0x66>
 8004596:	ee10 3a10 	vmov	r3, s0
 800459a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800462c <scalbnf+0xd0>
 800459e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004630 <scalbnf+0xd4>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	eeb0 7a67 	vmov.f32	s14, s15
 80045a8:	bfb8      	it	lt
 80045aa:	eef0 7a66 	vmovlt.f32	s15, s13
 80045ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 80045b2:	4770      	bx	lr
 80045b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004634 <scalbnf+0xd8>
 80045b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045bc:	4770      	bx	lr
 80045be:	0dd2      	lsrs	r2, r2, #23
 80045c0:	e7e6      	b.n	8004590 <scalbnf+0x34>
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	dd06      	ble.n	80045d4 <scalbnf+0x78>
 80045c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80045ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80045ce:	ee00 3a10 	vmov	s0, r3
 80045d2:	4770      	bx	lr
 80045d4:	f112 0f16 	cmn.w	r2, #22
 80045d8:	da1a      	bge.n	8004610 <scalbnf+0xb4>
 80045da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80045de:	4298      	cmp	r0, r3
 80045e0:	ee10 3a10 	vmov	r3, s0
 80045e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045e8:	dd0a      	ble.n	8004600 <scalbnf+0xa4>
 80045ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800462c <scalbnf+0xd0>
 80045ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004630 <scalbnf+0xd4>
 80045f2:	eef0 7a40 	vmov.f32	s15, s0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf18      	it	ne
 80045fa:	eeb0 0a47 	vmovne.f32	s0, s14
 80045fe:	e7db      	b.n	80045b8 <scalbnf+0x5c>
 8004600:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004634 <scalbnf+0xd8>
 8004604:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004638 <scalbnf+0xdc>
 8004608:	eef0 7a40 	vmov.f32	s15, s0
 800460c:	2b00      	cmp	r3, #0
 800460e:	e7f3      	b.n	80045f8 <scalbnf+0x9c>
 8004610:	3219      	adds	r2, #25
 8004612:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004616:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800461a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800463c <scalbnf+0xe0>
 800461e:	ee07 3a10 	vmov	s14, r3
 8004622:	e7c4      	b.n	80045ae <scalbnf+0x52>
 8004624:	ffff3cb0 	.word	0xffff3cb0
 8004628:	4c000000 	.word	0x4c000000
 800462c:	7149f2ca 	.word	0x7149f2ca
 8004630:	f149f2ca 	.word	0xf149f2ca
 8004634:	0da24260 	.word	0x0da24260
 8004638:	8da24260 	.word	0x8da24260
 800463c:	33000000 	.word	0x33000000

08004640 <__errno>:
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <__errno+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	2000001c 	.word	0x2000001c

0800464c <_init>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr

08004658 <_fini>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr
 8004664:	0000      	movs	r0, r0
	...

Disassembly of section ccmram:

08004668 <graphic_set_pixel_RAM>:
}
/***************************************************************************************/

/*************************************************************************************************/
// Funkcje oparte na rysowaniu pojedynczego piksela
void graphic_set_pixel_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, const T_COLOR *color ) {
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	607b      	str	r3, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	817b      	strh	r3, [r7, #10]
 8004676:	4613      	mov	r3, r2
 8004678:	813b      	strh	r3, [r7, #8]
	  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800467a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db79      	blt.n	8004776 <graphic_set_pixel_RAM+0x10e>
 8004682:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <graphic_set_pixel_RAM+0x11c>)
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	4293      	cmp	r3, r2
 800468c:	da73      	bge.n	8004776 <graphic_set_pixel_RAM+0x10e>
 800468e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db6f      	blt.n	8004776 <graphic_set_pixel_RAM+0x10e>
 8004696:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <graphic_set_pixel_RAM+0x120>)
 800469c:	8812      	ldrh	r2, [r2, #0]
 800469e:	4293      	cmp	r3, r2
 80046a0:	da69      	bge.n	8004776 <graphic_set_pixel_RAM+0x10e>
	    return;
	  if ( *color )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <graphic_set_pixel_RAM+0xa6>
		  buffer[ x + (y/8)*_width ] |=  (1<<(y%8)); // zapal pixel
 80046aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80046ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da00      	bge.n	80046b8 <graphic_set_pixel_RAM+0x50>
 80046b6:	3307      	adds	r3, #7
 80046b8:	10db      	asrs	r3, r3, #3
 80046ba:	b218      	sxth	r0, r3
 80046bc:	4601      	mov	r1, r0
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <graphic_set_pixel_RAM+0x11c>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	fb03 f301 	mul.w	r3, r3, r1
 80046c6:	4413      	add	r3, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	b25a      	sxtb	r2, r3
 80046d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80046d8:	4259      	negs	r1, r3
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	f001 0107 	and.w	r1, r1, #7
 80046e2:	bf58      	it	pl
 80046e4:	424b      	negpl	r3, r1
 80046e6:	b21b      	sxth	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	2301      	movs	r3, #1
 80046ec:	408b      	lsls	r3, r1
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	b259      	sxtb	r1, r3
 80046f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <graphic_set_pixel_RAM+0x11c>)
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	fb03 f300 	mul.w	r3, r3, r0
 8004700:	4413      	add	r3, r2
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	b2ca      	uxtb	r2, r1
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	e034      	b.n	8004778 <graphic_set_pixel_RAM+0x110>
	  else
		  buffer[ x + (y/8)*_width ] &= ~(1<<(y%8)); // zgaś pixel
 800470e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004712:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	da00      	bge.n	800471c <graphic_set_pixel_RAM+0xb4>
 800471a:	3307      	adds	r3, #7
 800471c:	10db      	asrs	r3, r3, #3
 800471e:	b218      	sxth	r0, r3
 8004720:	4601      	mov	r1, r0
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <graphic_set_pixel_RAM+0x11c>)
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	fb03 f301 	mul.w	r3, r3, r1
 800472a:	4413      	add	r3, r2
 800472c:	461a      	mov	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	b25a      	sxtb	r2, r3
 8004738:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800473c:	4259      	negs	r1, r3
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	f001 0107 	and.w	r1, r1, #7
 8004746:	bf58      	it	pl
 8004748:	424b      	negpl	r3, r1
 800474a:	b21b      	sxth	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	2301      	movs	r3, #1
 8004750:	408b      	lsls	r3, r1
 8004752:	b25b      	sxtb	r3, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	b25b      	sxtb	r3, r3
 8004758:	4013      	ands	r3, r2
 800475a:	b259      	sxtb	r1, r3
 800475c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <graphic_set_pixel_RAM+0x11c>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	fb03 f300 	mul.w	r3, r3, r0
 8004768:	4413      	add	r3, r2
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	b2ca      	uxtb	r2, r1
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	e000      	b.n	8004778 <graphic_set_pixel_RAM+0x110>
	    return;
 8004776:	bf00      	nop
}
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000010 	.word	0x20000010
 8004788:	20000012 	.word	0x20000012

0800478c <TIM1_UP_TIM16_IRQHandler>:
INTERRUPT CCMRAM void TIM1_UP_TIM16_IRQHandler(void) {	// Timer2 Interrupt Handler
 800478c:	4668      	mov	r0, sp
 800478e:	f020 0107 	bic.w	r1, r0, #7
 8004792:	468d      	mov	sp, r1
 8004794:	b589      	push	{r0, r3, r7, lr}
 8004796:	af00      	add	r7, sp, #0
	if ( TIM16->SR & TIM_SR_UIF ) {
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <TIM1_UP_TIM16_IRQHandler+0x4e>
		TIM16->SR &= ~TIM_SR_UIF;						// Update interrupt Flag
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	6113      	str	r3, [r2, #16]
		if (refreshScreen == 0) return;
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <TIM1_UP_TIM16_IRQHandler+0x4c>
		ActualDMABuffer = TextBuffer;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <TIM1_UP_TIM16_IRQHandler+0x60>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a0c      	ldr	r2, [pc, #48]	; (80047f0 <TIM1_UP_TIM16_IRQHandler+0x64>)
 80047c0:	6013      	str	r3, [r2, #0]
		sw_ssd1306_display();
 80047c2:	f7fe fb9b 	bl	8002efc <sw_ssd1306_display>
		refreshScreen = 0;
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
		gpio_pin_XOR( DEBUG_PORT1, DEBUG_PIN1 );
 80047cc:	2102      	movs	r1, #2
 80047ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047d2:	f7fe fac2 	bl	8002d5a <gpio_pin_XOR>
 80047d6:	e000      	b.n	80047da <TIM1_UP_TIM16_IRQHandler+0x4e>
		if (refreshScreen == 0) return;
 80047d8:	bf00      	nop
}
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80047e0:	4685      	mov	sp, r0
 80047e2:	4770      	bx	lr
 80047e4:	40014400 	.word	0x40014400
 80047e8:	20000530 	.word	0x20000530
 80047ec:	20000008 	.word	0x20000008
 80047f0:	20000534 	.word	0x20000534
