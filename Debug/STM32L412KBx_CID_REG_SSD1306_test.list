
STM32L412KBx_CID_REG_SSD1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005238  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 ccmram        0000018c  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009d8  08005558  08005558  00015558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005f30  08005f30  00020088  2**0
                  CONTENTS
  5 .ARM          00000000  08005f30  08005f30  00020088  2**0
                  CONTENTS
  6 .preinit_array 00000000  08005f30  08005f30  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000088  20000000  08005f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000574  20000088  08005fc8  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005fc  08005fc8  000205fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001690d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c3  00000000  00000000  000369c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00039188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  000399b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e19  00000000  00000000  0003a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b864  00000000  00000000  0004dec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006928a  00000000  00000000  00059725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c29af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c0  00000000  00000000  000c2a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053b0 	.word	0x080053b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080053b0 	.word	0x080053b0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <main>:
uint16_t ambilightAverage;
void my_gesture( TGSNR last_gs, TGSNR second_gs, TGSNR first_gs );

FONT_INFO CurrentFont;

int main(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0


	SystemClock_Config();
 8000b4e:	f003 f8b5 	bl	8003cbc <SystemClock_Config>

	RCC_gpio_init();
 8000b52:	f000 fe3d 	bl	80017d0 <RCC_gpio_init>
	sw_led_debug_init();
 8000b56:	f000 fe95 	bl	8001884 <sw_led_debug_init>
	sw_softTimers_init( 1, MICRO_SEC );
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f001 fceb 	bl	8002538 <sw_softTimers_init>
	delay_ms(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f001 fd84 	bl	8002670 <delay_ms>
	sw_i2c_simple_init();
 8000b68:	f002 fb58 	bl	800321c <sw_i2c_simple_init>

//	can_display = 1;
//	setCurrentFont( &RockwellCondensed14x32 );
//	glcd_init();

	sw_ssd1306_init();
 8000b6c:	f000 ff9a 	bl	8001aa4 <sw_ssd1306_init>

//	test_text_param( (FONT_INFO *)&Arial6ptFontInfo_var );
//	test_text_display_number( 100 );

	TEXT_display_number( 0, 0, 100 );
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f001 fbb3 	bl	80022e0 <TEXT_display_number>
	TEXT_display_string( 0, 32, L"Napis kurwa" );
 8000b7a:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <main+0x104>)
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f001 fc1a 	bl	80023b8 <TEXT_display_string>

	MPU6050__init( MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G );
 8000b84:	2100      	movs	r1, #0
 8000b86:	2003      	movs	r0, #3
 8000b88:	f002 fe0e 	bl	80037a8 <MPU6050__init>
// Kalibracja żyroskopu
	MPU6050__calibrateGyro( 5 );
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f002 fceb 	bl	8003568 <MPU6050__calibrateGyro>
// Ustawienie czułości
	MPU6050__setThreshold( 3 );
 8000b92:	2003      	movs	r0, #3
 8000b94:	f002 fc8e 	bl	80034b4 <MPU6050__setThreshold>

	delay_ms(10);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f001 fd69 	bl	8002670 <delay_ms>

	if ( vcnl4010_init() ) {
 8000b9e:	f003 fa43 	bl	8004028 <vcnl4010_init>
//		glcd_puts( 0, 0, "VCNL4010 initialized", 1 );

	} else {
//		glcd_puts( 0, 0, "ERROR", 1 );
	}
	delay_ms(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f001 fd63 	bl	8002670 <delay_ms>

	softTimer3 = 200;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <main+0x108>)
 8000bac:	22c8      	movs	r2, #200	; 0xc8
 8000bae:	801a      	strh	r2, [r3, #0]
	register_measure_callback( pomiar );
 8000bb0:	4828      	ldr	r0, [pc, #160]	; (8000c54 <main+0x10c>)
 8000bb2:	f003 f9cd 	bl	8003f50 <register_measure_callback>

	paj7620_init( fps_120 );
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fa9a 	bl	80010f0 <paj7620_init>
    register_gesture_callback( my_gesture, NULL );
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4826      	ldr	r0, [pc, #152]	; (8000c58 <main+0x110>)
 8000bc0:	f000 fb1c 	bl	80011fc <register_gesture_callback>


	softTimer3 = 500;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <main+0x108>)
 8000bc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bca:	801a      	strh	r2, [r3, #0]
	struct Vector rawGyro;
	struct Vector normGyro;
	while(1) {
		SW_VCNL4010_MEASURE_EVENT();
 8000bcc:	f003 fb24 	bl	8004218 <SW_VCNL4010_MEASURE_EVENT>
		PAJ7620_EVENT();
 8000bd0:	f000 fb3a 	bl	8001248 <PAJ7620_EVENT>

		if (softTimer2 == 0) {
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <main+0x114>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d129      	bne.n	8000c32 <main+0xea>
			softTimer2 = 500;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <main+0x114>)
 8000be0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000be4:	801a      	strh	r2, [r3, #0]
			sw_led_xor();
 8000be6:	f000 fe37 	bl	8001858 <sw_led_xor>
			rawGyro		= MPU6050__readRawGyro();
 8000bea:	f002 fee5 	bl	80039b8 <MPU6050__readRawGyro>
 8000bee:	eef0 6a40 	vmov.f32	s13, s0
 8000bf2:	eeb0 7a60 	vmov.f32	s14, s1
 8000bf6:	eef0 7a41 	vmov.f32	s15, s2
 8000bfa:	edc7 6a03 	vstr	s13, [r7, #12]
 8000bfe:	ed87 7a04 	vstr	s14, [r7, #16]
 8000c02:	edc7 7a05 	vstr	s15, [r7, #20]
			normGyro	= MPU6050__readNormalizeGyro();
 8000c06:	f002 ff35 	bl	8003a74 <MPU6050__readNormalizeGyro>
 8000c0a:	eef0 6a40 	vmov.f32	s13, s0
 8000c0e:	eeb0 7a60 	vmov.f32	s14, s1
 8000c12:	eef0 7a41 	vmov.f32	s15, s2
 8000c16:	edc7 6a00 	vstr	s13, [r7]
 8000c1a:	ed87 7a01 	vstr	s14, [r7, #4]
 8000c1e:	edc7 7a02 	vstr	s15, [r7, #8]
			TEXT_display_float( 0, 0, normGyro.YAxis );
 8000c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c26:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f001 fb8d 	bl	800234c <TEXT_display_float>

		}


		if ( !softTimer3 ) {
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <main+0x108>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1c7      	bne.n	8000bcc <main+0x84>
//			sw_ssd1306_ram_to_display(0);					// Ładujemy do sterownika
//			mk_ssd1306_display();
			sw_ssd1306_display();
 8000c3c:	f000 febe 	bl	80019bc <sw_ssd1306_display>
			softTimer3 = 300;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <main+0x108>)
 8000c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c46:	801a      	strh	r2, [r3, #0]
		SW_VCNL4010_MEASURE_EVENT();
 8000c48:	e7c0      	b.n	8000bcc <main+0x84>
 8000c4a:	bf00      	nop
 8000c4c:	08005558 	.word	0x08005558
 8000c50:	200005ee 	.word	0x200005ee
 8000c54:	08000d61 	.word	0x08000d61
 8000c58:	08000dcd 	.word	0x08000dcd
 8000c5c:	200005da 	.word	0x200005da

08000c60 <srednia1>:
}



// ------------ Definicje funkcji --------------
static uint16_t srednia1( uint16_t wartosc ) {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor1[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor1[ kolejny_pomiar++ ] = wartosc;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <srednia1+0x74>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	b2d1      	uxtb	r1, r2
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <srednia1+0x74>)
 8000c74:	7011      	strb	r1, [r2, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <srednia1+0x78>)
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <srednia1+0x74>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d102      	bne.n	8000c8e <srednia1+0x2e>
		kolejny_pomiar = 0;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <srednia1+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000c92:	2300      	movs	r3, #0
 8000c94:	72fb      	strb	r3, [r7, #11]
 8000c96:	e00a      	b.n	8000cae <srednia1+0x4e>
		wynik = wynik + bufor1[i];
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <srednia1+0x78>)
 8000c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000ca8:	7afb      	ldrb	r3, [r7, #11]
 8000caa:	3301      	adds	r3, #1
 8000cac:	72fb      	strb	r3, [r7, #11]
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d9f1      	bls.n	8000c98 <srednia1+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <srednia1+0x7c>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
	return wynik;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	b29b      	uxth	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	200000a4 	.word	0x200000a4
 8000cd8:	200000a8 	.word	0x200000a8
 8000cdc:	cccccccd 	.word	0xcccccccd

08000ce0 <srednia2>:

static uint16_t srednia2( uint16_t wartosc ) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor2[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor2 [ kolejny_pomiar++ ] = wartosc;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <srednia2+0x74>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	b2d1      	uxtb	r1, r2
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <srednia2+0x74>)
 8000cf4:	7011      	strb	r1, [r2, #0]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <srednia2+0x78>)
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <srednia2+0x74>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d102      	bne.n	8000d0e <srednia2+0x2e>
		kolejny_pomiar = 0;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <srednia2+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	72fb      	strb	r3, [r7, #11]
 8000d16:	e00a      	b.n	8000d2e <srednia2+0x4e>
		wynik = wynik + bufor2[i];
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <srednia2+0x78>)
 8000d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d20:	461a      	mov	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	d9f1      	bls.n	8000d18 <srednia2+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <srednia2+0x7c>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	60fb      	str	r3, [r7, #12]
	return wynik;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	b29b      	uxth	r3, r3
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	200000b2 	.word	0x200000b2
 8000d58:	200000b4 	.word	0x200000b4
 8000d5c:	cccccccd 	.word	0xcccccccd

08000d60 <pomiar>:


void pomiar( T_RESULTS *pomiar1 ) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	uint16_t result;

	// Składamy wynik 16 bitowy z 8 bitowych
	result = ( (uint16_t)pomiar1->proximityHigh<<8 ) | pomiar1->proximityLow;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	81fb      	strh	r3, [r7, #14]
	proximityAverage = srednia1(result ),
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff6e 	bl	8000c60 <srednia1>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <pomiar+0x64>)
 8000d8a:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 0, result, 1 );

	result = ( (uint16_t)pomiar1->ambientHigh<<8 )   | pomiar1->ambientLow;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	81fb      	strh	r3, [r7, #14]
	ambilightAverage = srednia2(result);
 8000da0:	89fb      	ldrh	r3, [r7, #14]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff9c 	bl	8000ce0 <srednia2>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <pomiar+0x68>)
 8000dae:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 36, result, 1 );

	gpio_pin_XOR( DEBUG_PORT0, DEBUG_PIN0 );
 8000db0:	2101      	movs	r1, #1
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 fd30 	bl	800181a <gpio_pin_XOR>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200005d2 	.word	0x200005d2
 8000dc8:	200005d0 	.word	0x200005d0

08000dcc <my_gesture>:

void my_gesture( TGSNR last_gs, TGSNR second_gs, TGSNR first_gs ) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	71bb      	strb	r3, [r7, #6]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	717b      	strb	r3, [r7, #5]
//    else if( last_gs == gs_cw )         graphic_puts_RAM( 0, 0, L"CW", 1, WHITE, BLACK, CurrentFont );		// 7
//    else if( last_gs == gs_ccw )        graphic_puts_RAM( 0, 0, L"CCW", 1, WHITE, BLACK, CurrentFont );		// 8
//    else if( last_gs == gs_wave )       graphic_puts_RAM( 0, 0, L"WAVE", 1, WHITE, BLACK, CurrentFont );		// 9

//	sw_ssd1306_ram_to_display(0);
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <HardFault_Handler+0x4>

08000df6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <BusFault_Handler+0x4>

08000e02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <UsageFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <SystemInit+0x5c>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SystemInit+0x5c>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <SystemInit+0x60>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <SystemInit+0x60>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <SystemInit+0x60>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <SystemInit+0x60>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <SystemInit+0x60>)
 8000e60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <SystemInit+0x60>)
 8000e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemInit+0x60>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SystemInit+0x60>)
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SystemInit+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	40021000 	.word	0x40021000

08000e98 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d107      	bne.n	8000eba <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e005      	b.n	8000ec6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000eba:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <SystemCoreClockUpdate+0x148>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ed0:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
 8000ed8:	2b0c      	cmp	r3, #12
 8000eda:	d866      	bhi.n	8000faa <SystemCoreClockUpdate+0x112>
 8000edc:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <SystemCoreClockUpdate+0x4c>)
 8000ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee2:	bf00      	nop
 8000ee4:	08000f19 	.word	0x08000f19
 8000ee8:	08000fab 	.word	0x08000fab
 8000eec:	08000fab 	.word	0x08000fab
 8000ef0:	08000fab 	.word	0x08000fab
 8000ef4:	08000f21 	.word	0x08000f21
 8000ef8:	08000fab 	.word	0x08000fab
 8000efc:	08000fab 	.word	0x08000fab
 8000f00:	08000fab 	.word	0x08000fab
 8000f04:	08000f29 	.word	0x08000f29
 8000f08:	08000fab 	.word	0x08000fab
 8000f0c:	08000fab 	.word	0x08000fab
 8000f10:	08000fab 	.word	0x08000fab
 8000f14:	08000f31 	.word	0x08000f31
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f18:	4a32      	ldr	r2, [pc, #200]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	6013      	str	r3, [r2, #0]
      break;
 8000f1e:	e048      	b.n	8000fb2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <SystemCoreClockUpdate+0x150>)
 8000f24:	601a      	str	r2, [r3, #0]
      break;
 8000f26:	e044      	b.n	8000fb2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000f2a:	4a30      	ldr	r2, [pc, #192]	; (8000fec <SystemCoreClockUpdate+0x154>)
 8000f2c:	601a      	str	r2, [r3, #0]
      break;
 8000f2e:	e040      	b.n	8000fb2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	3301      	adds	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d003      	beq.n	8000f56 <SystemCoreClockUpdate+0xbe>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d006      	beq.n	8000f62 <SystemCoreClockUpdate+0xca>
 8000f54:	e00b      	b.n	8000f6e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <SystemCoreClockUpdate+0x150>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	613b      	str	r3, [r7, #16]
          break;
 8000f60:	e00b      	b.n	8000f7a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <SystemCoreClockUpdate+0x154>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	613b      	str	r3, [r7, #16]
          break;
 8000f6c:	e005      	b.n	8000f7a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	613b      	str	r3, [r7, #16]
          break;
 8000f78:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0e5b      	lsrs	r3, r3, #25
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	3301      	adds	r3, #1
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000fa6:	6013      	str	r3, [r2, #0]
      break;
 8000fa8:	e003      	b.n	8000fb2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000faa:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	6013      	str	r3, [r2, #0]
      break;
 8000fb0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SystemCoreClockUpdate+0x144>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <SystemCoreClockUpdate+0x158>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemCoreClockUpdate+0x14c>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	080055b0 	.word	0x080055b0
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	00f42400 	.word	0x00f42400
 8000fec:	007a1200 	.word	0x007a1200
 8000ff0:	080055a0 	.word	0x080055a0

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <paj7620_write_reg>:





static void paj7620_write_reg( uint8_t addr, uint8_t cmd ) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	i2c_start();
	i2c_write( addr );
	i2c_write( cmd );
	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	sw_i2c_write_reg( PAJ7620_ADDR, addr, cmd );
 8001040:	79ba      	ldrb	r2, [r7, #6]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	4619      	mov	r1, r3
 8001046:	20e6      	movs	r0, #230	; 0xe6
 8001048:	f001 feec 	bl	8002e24 <sw_i2c_write_reg>
#endif
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <paj7620_read_reg>:

static uint8_t paj7620_read_reg( uint8_t addr, uint8_t len, uint8_t * buf ) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	603a      	str	r2, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	460b      	mov	r3, r1
 8001062:	71bb      	strb	r3, [r7, #6]
	i2c_start();
	i2c_write( PAJ7620_ADDR + 1 );
	while (len--) *buf++ = i2c_read( len ? ACK : NACK );
	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	sw_i2c_read_block( PAJ7620_ADDR, addr, len, buf );
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	b29a      	uxth	r2, r3
 8001068:	79f9      	ldrb	r1, [r7, #7]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	20e6      	movs	r0, #230	; 0xe6
 800106e:	f001 fc6f 	bl	8002950 <sw_i2c_read_block>
#endif

	return 0;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <paj7620_bank_select>:



static void paj7620_bank_select( uint8_t bank ) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	paj7620_write_reg( PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0 );
 8001086:	2100      	movs	r1, #0
 8001088:	20ef      	movs	r0, #239	; 0xef
 800108a:	f7ff ffd1 	bl	8001030 <paj7620_write_reg>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <paj_int_config>:

static void paj_int_config( void ) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	EXTI->FTSR 			|= EXTI_FTSR_TR3;			// Falling trigger event configuration bit of line 3
	EXTI->RTSR 			|= EXTI_RTSR_TR3;			// Rising trigger event configuration bit of line 3
	EXTI->IMR 			|= EXTI_IMR_MR3;			// Interrupt Mask on line 3
	NVIC_EnableIRQ( EXTI3_IRQn );
#elif defined STM32L4
	RCC->APB2ENR 		|= RCC_APB2ENR_SYSCFGEN;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <paj_int_config+0x4c>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <paj_int_config+0x4c>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
	SYSCFG->EXTICR[0] 	|= SYSCFG_EXTICR1_EXTI2_PB;	// PB[3] pin
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <paj_int_config+0x50>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <paj_int_config+0x50>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 		|= EXTI_FTSR1_FT2;			// Falling trigger event configuration bit of line 3
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <paj_int_config+0x54>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <paj_int_config+0x54>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 		|= EXTI_RTSR1_RT2;			// Rising trigger event configuration bit of line 3
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <paj_int_config+0x54>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <paj_int_config+0x54>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6093      	str	r3, [r2, #8]
	EXTI->IMR1 			|= EXTI_IMR1_IM2;			// Interrupt Mask on line 3
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <paj_int_config+0x54>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <paj_int_config+0x54>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ( EXTI3_IRQn );
 80010d8:	2009      	movs	r0, #9
 80010da:	f7ff ff8b 	bl	8000ff4 <__NVIC_EnableIRQ>
	#endif

//			PAJ_INT_EN_REG |= ( 1<<PAJ_INT_BIT0(PAJ_INT_NR) );
#endif
#endif
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40010400 	.word	0x40010400

080010f0 <paj7620_init>:


//............................ FUNKCJE dla u�ytkownika biblioteki .................................

/* inicjalizacja pracy czujnika gest�w */
uint8_t paj7620_init( TFPS fps ) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	paj_int_config();
 80010fa:	f7ff ffcd 	bl	8001098 <paj_int_config>

	//*** WAKE UP - START ****
	_delay_ms(10);
 80010fe:	200a      	movs	r0, #10
 8001100:	f001 fab6 	bl	8002670 <delay_ms>
	i2c_start();
  	uint8_t res = i2c_write( PAJ7620_ADDR );
  	i2c_stop();
#elif defined STM32F3 || defined STM32L4
	uint8_t res;
	if ( sw_i2c_IsDeviceReady( PAJ7620_ADDR, 2, 1 ) == I2C_Error ) {
 8001104:	2201      	movs	r2, #1
 8001106:	2102      	movs	r1, #2
 8001108:	20e6      	movs	r0, #230	; 0xe6
 800110a:	f002 f8f1 	bl	80032f0 <sw_i2c_IsDeviceReady>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <paj7620_init+0x2a>
		res = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e001      	b.n	800111e <paj7620_init+0x2e>
	} else {
		res = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
	}
#endif
  	if( !res ) return 0x01; // je�li nie PAJ odpowiada to zwr�� b��d 0x01
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <paj7620_init+0x38>
 8001124:	2301      	movs	r3, #1
 8001126:	e060      	b.n	80011ea <paj7620_init+0xfa>
  	//*** wake up - end ****



	paj7620_bank_select( BANK0 );
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff ffa7 	bl	800107c <paj7620_bank_select>

	uint16_t 	chip_id = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	817b      	strh	r3, [r7, #10]
	uint8_t 	tmo 	= 255;
 8001132:	23ff      	movs	r3, #255	; 0xff
 8001134:	73bb      	strb	r3, [r7, #14]
	while( chip_id != 0x7620 ) {
 8001136:	e00f      	b.n	8001158 <paj7620_init+0x68>
		paj7620_read_reg( PAJ7620_ADDR_PART_ID_LOW, 2, (uint8_t*)&chip_id );
 8001138:	f107 030a 	add.w	r3, r7, #10
 800113c:	461a      	mov	r2, r3
 800113e:	2102      	movs	r1, #2
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ff87 	bl	8001054 <paj7620_read_reg>
		_delay_us(500);
 8001146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114a:	f001 faa9 	bl	80026a0 <delay_us>
		if( !tmo-- ) break;
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	73ba      	strb	r2, [r7, #14]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <paj7620_init+0x74>
	while( chip_id != 0x7620 ) {
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	f247 6220 	movw	r2, #30240	; 0x7620
 800115e:	4293      	cmp	r3, r2
 8001160:	d1ea      	bne.n	8001138 <paj7620_init+0x48>
 8001162:	e000      	b.n	8001166 <paj7620_init+0x76>
		if( !tmo-- ) break;
 8001164:	bf00      	nop
	}

	if( !tmo ) return 0xff;
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <paj7620_init+0x80>
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	e03c      	b.n	80011ea <paj7620_init+0xfa>

	paj7620_bank_select( BANK0 );
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff83 	bl	800107c <paj7620_bank_select>

	for( uint8_t i=0; i < INIT_REG_ARRAY_SIZE; i++ ) {
 8001176:	2300      	movs	r3, #0
 8001178:	737b      	strb	r3, [r7, #13]
 800117a:	e00f      	b.n	800119c <paj7620_init+0xac>
		paj7620_write_reg( pgm_read_byte( &initRegisterArray[i][0] ), pgm_read_byte( &initRegisterArray[i][1] ) );
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <paj7620_init+0x104>)
 8001180:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001184:	7b7b      	ldrb	r3, [r7, #13]
 8001186:	491b      	ldr	r1, [pc, #108]	; (80011f4 <paj7620_init+0x104>)
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	440b      	add	r3, r1
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	4619      	mov	r1, r3
 8001190:	4610      	mov	r0, r2
 8001192:	f7ff ff4d 	bl	8001030 <paj7620_write_reg>
	for( uint8_t i=0; i < INIT_REG_ARRAY_SIZE; i++ ) {
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	3301      	adds	r3, #1
 800119a:	737b      	strb	r3, [r7, #13]
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	2b51      	cmp	r3, #81	; 0x51
 80011a0:	d9ec      	bls.n	800117c <paj7620_init+0x8c>
	}

	paj7620_bank_select( BANK1 );
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ff6a 	bl	800107c <paj7620_bank_select>
	if( !fps ) paj7620_write_reg( 0x65, 0xB7 );		// 120 fps
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <paj7620_init+0xc8>
 80011ae:	21b7      	movs	r1, #183	; 0xb7
 80011b0:	2065      	movs	r0, #101	; 0x65
 80011b2:	f7ff ff3d 	bl	8001030 <paj7620_write_reg>
 80011b6:	e003      	b.n	80011c0 <paj7620_init+0xd0>
	else paj7620_write_reg( 0x65, 0x12 );			// 240 fps
 80011b8:	2112      	movs	r1, #18
 80011ba:	2065      	movs	r0, #101	; 0x65
 80011bc:	f7ff ff38 	bl	8001030 <paj7620_write_reg>

	paj7620_bank_select( BANK0 );  //gesture flage reg in Bank0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff5b 	bl	800107c <paj7620_bank_select>

	// inicjalizacja wewnetrznych przerwa� w module PJA
	uint8_t dat;
	paj7620_read_reg( 0x43, 1, &dat );
 80011c6:	f107 0309 	add.w	r3, r7, #9
 80011ca:	461a      	mov	r2, r3
 80011cc:	2101      	movs	r1, #1
 80011ce:	2043      	movs	r0, #67	; 0x43
 80011d0:	f7ff ff40 	bl	8001054 <paj7620_read_reg>
	paj7620_read_reg( 0x44, 1, &dat );
 80011d4:	f107 0309 	add.w	r3, r7, #9
 80011d8:	461a      	mov	r2, r3
 80011da:	2101      	movs	r1, #1
 80011dc:	2044      	movs	r0, #68	; 0x44
 80011de:	f7ff ff39 	bl	8001054 <paj7620_read_reg>

#if USE_CIRCLE_CONTINOUS == 1
  	enable_cc = 1;
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <paj7620_init+0x108>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#endif
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	080055e0 	.word	0x080055e0
 80011f8:	200000cc 	.word	0x200000cc

080011fc <register_gesture_callback>:
 *
 * 		Argumenty:
 * 		1. w�asny callback - w�asna funckja zwrotna
 * 		2. wska�nik na timer programowy o podstawie czasu 10ms
 */
void register_gesture_callback( TGESTURE callback, volatile uint16_t * gs_timer ) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	gesture_callback = callback;
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <register_gesture_callback+0x24>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6013      	str	r3, [r2, #0]
	gs_tmr 			 = gs_timer;
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <register_gesture_callback+0x28>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6013      	str	r3, [r2, #0]
	gs_set_filter(0);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f808 	bl	8001228 <gs_set_filter>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000e4 	.word	0x200000e4
 8001224:	200000f0 	.word	0x200000f0

08001228 <gs_set_filter>:




/* funkcja do zmiany filtr�w gest�w */
void gs_set_filter( TGESTUREFILTER filter ) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	gfilter = filter;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <gs_set_filter+0x1c>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	8013      	strh	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	200000ec 	.word	0x200000ec

08001248 <PAJ7620_EVENT>:




/* g��wne zdarzenie (EVENT) kt�re nale�y zawsze wywo�ywa� w p�tli g��wnej programu */
void PAJ7620_EVENT( void ) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
#if USE_CIRCLE_CONTINOUS == 1
	static int 		angle_acc, last_angle_acc;
	static uint8_t 	gs_cc, last_gs_cc=1, gs_block;
	int 			dif;

	if( enable_cc && cc_tmr && !(*cc_tmr) ) {
 800124e:	4b98      	ldr	r3, [pc, #608]	; (80014b0 <PAJ7620_EVENT+0x268>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80a5 	beq.w	80013a2 <PAJ7620_EVENT+0x15a>
 8001258:	4b96      	ldr	r3, [pc, #600]	; (80014b4 <PAJ7620_EVENT+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80a0 	beq.w	80013a2 <PAJ7620_EVENT+0x15a>
 8001262:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <PAJ7620_EVENT+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 8099 	bne.w	80013a2 <PAJ7620_EVENT+0x15a>

		if( gs_block ) gs_block--;
 8001270:	4b91      	ldr	r3, [pc, #580]	; (80014b8 <PAJ7620_EVENT+0x270>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <PAJ7620_EVENT+0x3c>
 8001278:	4b8f      	ldr	r3, [pc, #572]	; (80014b8 <PAJ7620_EVENT+0x270>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b8d      	ldr	r3, [pc, #564]	; (80014b8 <PAJ7620_EVENT+0x270>)
 8001282:	701a      	strb	r2, [r3, #0]
		if( gs_block == 1 ) {
 8001284:	4b8c      	ldr	r3, [pc, #560]	; (80014b8 <PAJ7620_EVENT+0x270>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <PAJ7620_EVENT+0x50>
			last_gs_cc = 0xFF; gs_cc = 0;
 800128c:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <PAJ7620_EVENT+0x274>)
 800128e:	22ff      	movs	r2, #255	; 0xff
 8001290:	701a      	strb	r2, [r3, #0]
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		}

		paj7620_read_reg( 0xc7, 2, (uint8_t*)&angle_acc );
 8001298:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 800129a:	2102      	movs	r1, #2
 800129c:	20c7      	movs	r0, #199	; 0xc7
 800129e:	f7ff fed9 	bl	8001054 <paj7620_read_reg>
		angle_acc &= 0x07FF;
 80012a2:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012aa:	4a86      	ldr	r2, [pc, #536]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012ac:	6013      	str	r3, [r2, #0]

		if( angle_acc ) {
 80012ae:	4b85      	ldr	r3, [pc, #532]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d071      	beq.n	800139a <PAJ7620_EVENT+0x152>

			if( angle_acc != last_angle_acc ) {
 80012b6:	4b83      	ldr	r3, [pc, #524]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b83      	ldr	r3, [pc, #524]	; (80014c8 <PAJ7620_EVENT+0x280>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d06b      	beq.n	800139a <PAJ7620_EVENT+0x152>

				dif = angle_acc - last_angle_acc;
 80012c2:	4b80      	ldr	r3, [pc, #512]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b80      	ldr	r3, [pc, #512]	; (80014c8 <PAJ7620_EVENT+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	60fb      	str	r3, [r7, #12]
				if( angle_acc - last_angle_acc < -16 ) {
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <PAJ7620_EVENT+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f113 0f10 	cmn.w	r3, #16
 80012dc:	da2d      	bge.n	800133a <PAJ7620_EVENT+0xf2>
					gs_cc = gs_cw;
 80012de:	4b78      	ldr	r3, [pc, #480]	; (80014c0 <PAJ7620_EVENT+0x278>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	701a      	strb	r2, [r3, #0]
					if(circle_callback && last_gs_cc == gs_cc ) {
 80012e4:	4b79      	ldr	r3, [pc, #484]	; (80014cc <PAJ7620_EVENT+0x284>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01d      	beq.n	8001328 <PAJ7620_EVENT+0xe0>
 80012ec:	4b73      	ldr	r3, [pc, #460]	; (80014bc <PAJ7620_EVENT+0x274>)
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	4b73      	ldr	r3, [pc, #460]	; (80014c0 <PAJ7620_EVENT+0x278>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d117      	bne.n	8001328 <PAJ7620_EVENT+0xe0>
						cc_cnt++;
 80012f8:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <PAJ7620_EVENT+0x288>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a74      	ldr	r2, [pc, #464]	; (80014d0 <PAJ7620_EVENT+0x288>)
 8001300:	6013      	str	r3, [r2, #0]
						circle_callback(gs_cc, &cc_cnt);
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <PAJ7620_EVENT+0x284>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6e      	ldr	r2, [pc, #440]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	4971      	ldr	r1, [pc, #452]	; (80014d0 <PAJ7620_EVENT+0x288>)
 800130c:	4610      	mov	r0, r2
 800130e:	4798      	blx	r3
						gs_block = 25;
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <PAJ7620_EVENT+0x270>)
 8001312:	2219      	movs	r2, #25
 8001314:	701a      	strb	r2, [r3, #0]
#if USE_INIT_GESTURE == 1
						if( init_gs_state ) *init_gs_tmr = init_gs_tmr_value;
 8001316:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <PAJ7620_EVENT+0x28c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d004      	beq.n	8001328 <PAJ7620_EVENT+0xe0>
 800131e:	4b6e      	ldr	r3, [pc, #440]	; (80014d8 <PAJ7620_EVENT+0x290>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6e      	ldr	r2, [pc, #440]	; (80014dc <PAJ7620_EVENT+0x294>)
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	801a      	strh	r2, [r3, #0]
#endif
					}
					last_angle_acc = angle_acc;
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a66      	ldr	r2, [pc, #408]	; (80014c8 <PAJ7620_EVENT+0x280>)
 800132e:	6013      	str	r3, [r2, #0]
					last_gs_cc = gs_cc;
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b61      	ldr	r3, [pc, #388]	; (80014bc <PAJ7620_EVENT+0x274>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e02f      	b.n	800139a <PAJ7620_EVENT+0x152>
				}
				else if( dif > 16 ) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b10      	cmp	r3, #16
 800133e:	dd2c      	ble.n	800139a <PAJ7620_EVENT+0x152>
					gs_cc = gs_ccw;
 8001340:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001342:	2208      	movs	r2, #8
 8001344:	701a      	strb	r2, [r3, #0]
					if(circle_callback && last_gs_cc == gs_cc ) {
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <PAJ7620_EVENT+0x284>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01d      	beq.n	800138a <PAJ7620_EVENT+0x142>
 800134e:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <PAJ7620_EVENT+0x274>)
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d117      	bne.n	800138a <PAJ7620_EVENT+0x142>
						cc_cnt--;
 800135a:	4b5d      	ldr	r3, [pc, #372]	; (80014d0 <PAJ7620_EVENT+0x288>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <PAJ7620_EVENT+0x288>)
 8001362:	6013      	str	r3, [r2, #0]
						circle_callback(gs_cc, &cc_cnt);
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <PAJ7620_EVENT+0x284>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <PAJ7620_EVENT+0x278>)
 800136a:	7812      	ldrb	r2, [r2, #0]
 800136c:	4958      	ldr	r1, [pc, #352]	; (80014d0 <PAJ7620_EVENT+0x288>)
 800136e:	4610      	mov	r0, r2
 8001370:	4798      	blx	r3
						gs_block = 25;
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <PAJ7620_EVENT+0x270>)
 8001374:	2219      	movs	r2, #25
 8001376:	701a      	strb	r2, [r3, #0]
#if USE_INIT_GESTURE == 1
						if( init_gs_state ) *init_gs_tmr = init_gs_tmr_value;
 8001378:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <PAJ7620_EVENT+0x28c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <PAJ7620_EVENT+0x142>
 8001380:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <PAJ7620_EVENT+0x290>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a55      	ldr	r2, [pc, #340]	; (80014dc <PAJ7620_EVENT+0x294>)
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	801a      	strh	r2, [r3, #0]
#endif
					}
					last_angle_acc = angle_acc;
 800138a:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <PAJ7620_EVENT+0x27c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <PAJ7620_EVENT+0x280>)
 8001390:	6013      	str	r3, [r2, #0]
					last_gs_cc = gs_cc;
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <PAJ7620_EVENT+0x278>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <PAJ7620_EVENT+0x274>)
 8001398:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		*cc_tmr = 2;
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <PAJ7620_EVENT+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	801a      	strh	r2, [r3, #0]
	}
#endif

#if USE_INIT_GESTURE == 1
	if( init_gs_state && init_gs_tmr && !(*init_gs_tmr) ) {
 80013a2:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <PAJ7620_EVENT+0x28c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d028      	beq.n	80013fc <PAJ7620_EVENT+0x1b4>
 80013aa:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <PAJ7620_EVENT+0x290>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d024      	beq.n	80013fc <PAJ7620_EVENT+0x1b4>
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <PAJ7620_EVENT+0x290>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11e      	bne.n	80013fc <PAJ7620_EVENT+0x1b4>
		init_gs_state 	= 0;
 80013be:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <PAJ7620_EVENT+0x28c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
		*init_gs_tmr 	= init_gs_tmr_value/10;
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <PAJ7620_EVENT+0x294>)
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <PAJ7620_EVENT+0x290>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4944      	ldr	r1, [pc, #272]	; (80014e0 <PAJ7620_EVENT+0x298>)
 80013ce:	fba1 1202 	umull	r1, r2, r1, r2
 80013d2:	08d2      	lsrs	r2, r2, #3
 80013d4:	b292      	uxth	r2, r2
 80013d6:	801a      	strh	r2, [r3, #0]
		init_gf_filter 	= init_gf_user_filter;
 80013d8:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <PAJ7620_EVENT+0x29c>)
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <PAJ7620_EVENT+0x2a0>)
 80013de:	801a      	strh	r2, [r3, #0]

		if( init_gs_end_callback ) init_gs_end_callback( &init_gf_filter );
 80013e0:	4b42      	ldr	r3, [pc, #264]	; (80014ec <PAJ7620_EVENT+0x2a4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <PAJ7620_EVENT+0x1a8>
 80013e8:	4b40      	ldr	r3, [pc, #256]	; (80014ec <PAJ7620_EVENT+0x2a4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	483e      	ldr	r0, [pc, #248]	; (80014e8 <PAJ7620_EVENT+0x2a0>)
 80013ee:	4798      	blx	r3
		gs_set_filter( init_gf_filter );
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <PAJ7620_EVENT+0x2a0>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff17 	bl	8001228 <gs_set_filter>
 80013fa:	e11d      	b.n	8001638 <PAJ7620_EVENT+0x3f0>
	}
#endif



	if( gs_tmr && clear_last_gs_flag && !*gs_tmr ) {
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <PAJ7620_EVENT+0x2a8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <PAJ7620_EVENT+0x1e2>
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <PAJ7620_EVENT+0x2ac>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00e      	beq.n	800142a <PAJ7620_EVENT+0x1e2>
 800140c:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <PAJ7620_EVENT+0x2a8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d108      	bne.n	800142a <PAJ7620_EVENT+0x1e2>
		clear_last_gs_flag 	= 0;
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <PAJ7620_EVENT+0x2ac>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
		second_gs 			= 0;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <PAJ7620_EVENT+0x2b0>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		first_gs 			= 0;
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <PAJ7620_EVENT+0x2b4>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	}

	if( paj_int_flag == 1 ) {
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <PAJ7620_EVENT+0x2b8>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8101 	bne.w	8001638 <PAJ7620_EVENT+0x3f0>
		paj_int_flag = 0;
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <PAJ7620_EVENT+0x2b8>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]

		error = paj7620_read_reg( 0x43, 2, (uint8_t*)&dat );
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	461a      	mov	r2, r3
 8001442:	2102      	movs	r1, #2
 8001444:	2043      	movs	r0, #67	; 0x43
 8001446:	f7ff fe05 	bl	8001054 <paj7620_read_reg>
 800144a:	4603      	mov	r3, r0
 800144c:	72fb      	strb	r3, [r7, #11]

		if( !error ) {
 800144e:	7afb      	ldrb	r3, [r7, #11]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 80f1 	bne.w	8001638 <PAJ7620_EVENT+0x3f0>
			res = 0;
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <PAJ7620_EVENT+0x2bc>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

			if( gfilter ) dat &= gfilter;
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <PAJ7620_EVENT+0x2c0>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <PAJ7620_EVENT+0x228>
 8001464:	893a      	ldrh	r2, [r7, #8]
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <PAJ7620_EVENT+0x2c0>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	4013      	ands	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	813b      	strh	r3, [r7, #8]

			if( dat ) {
 8001470:	893b      	ldrh	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d06d      	beq.n	8001552 <PAJ7620_EVENT+0x30a>
				if( dat == 1 ) res = gs_right;
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <PAJ7620_EVENT+0x23c>
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <PAJ7620_EVENT+0x2bc>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e066      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 2 ) res = gs_left;
 8001484:	893b      	ldrh	r3, [r7, #8]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d103      	bne.n	8001492 <PAJ7620_EVENT+0x24a>
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <PAJ7620_EVENT+0x2bc>)
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e05f      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 4 ) res = gs_up;
 8001492:	893b      	ldrh	r3, [r7, #8]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d103      	bne.n	80014a0 <PAJ7620_EVENT+0x258>
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <PAJ7620_EVENT+0x2bc>)
 800149a:	2203      	movs	r2, #3
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e058      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 8 ) res = gs_down;
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d132      	bne.n	800150c <PAJ7620_EVENT+0x2c4>
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <PAJ7620_EVENT+0x2bc>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e051      	b.n	8001552 <PAJ7620_EVENT+0x30a>
 80014ae:	bf00      	nop
 80014b0:	200000cc 	.word	0x200000cc
 80014b4:	200000c4 	.word	0x200000c4
 80014b8:	200000f5 	.word	0x200000f5
 80014bc:	20000004 	.word	0x20000004
 80014c0:	200000f6 	.word	0x200000f6
 80014c4:	200000f8 	.word	0x200000f8
 80014c8:	200000fc 	.word	0x200000fc
 80014cc:	200000c0 	.word	0x200000c0
 80014d0:	200000c8 	.word	0x200000c8
 80014d4:	200000e2 	.word	0x200000e2
 80014d8:	200000d8 	.word	0x200000d8
 80014dc:	200000dc 	.word	0x200000dc
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	200000de 	.word	0x200000de
 80014e8:	200000e0 	.word	0x200000e0
 80014ec:	200000d4 	.word	0x200000d4
 80014f0:	200000f0 	.word	0x200000f0
 80014f4:	200000f4 	.word	0x200000f4
 80014f8:	200000e9 	.word	0x200000e9
 80014fc:	200000ea 	.word	0x200000ea
 8001500:	200000e8 	.word	0x200000e8
 8001504:	20000100 	.word	0x20000100
 8001508:	200000ec 	.word	0x200000ec
				else if( dat == 16 ) res = gs_forward;
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d103      	bne.n	800151a <PAJ7620_EVENT+0x2d2>
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 8001514:	2205      	movs	r2, #5
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	e01b      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 32 ) res = gs_backward;
 800151a:	893b      	ldrh	r3, [r7, #8]
 800151c:	2b20      	cmp	r3, #32
 800151e:	d103      	bne.n	8001528 <PAJ7620_EVENT+0x2e0>
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 8001522:	2206      	movs	r2, #6
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e014      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 64 ) res = gs_cw;
 8001528:	893b      	ldrh	r3, [r7, #8]
 800152a:	2b40      	cmp	r3, #64	; 0x40
 800152c:	d103      	bne.n	8001536 <PAJ7620_EVENT+0x2ee>
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 8001530:	2207      	movs	r2, #7
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e00d      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 128 ) res = gs_ccw;
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	2b80      	cmp	r3, #128	; 0x80
 800153a:	d103      	bne.n	8001544 <PAJ7620_EVENT+0x2fc>
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 800153e:	2208      	movs	r2, #8
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e006      	b.n	8001552 <PAJ7620_EVENT+0x30a>
				else if( dat == 256 ) res = gs_wave;
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800154a:	d102      	bne.n	8001552 <PAJ7620_EVENT+0x30a>
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 800154e:	2209      	movs	r2, #9
 8001550:	701a      	strb	r2, [r3, #0]
			}

			if( res && gesture_callback ) {
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06e      	beq.n	8001638 <PAJ7620_EVENT+0x3f0>
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <PAJ7620_EVENT+0x3fc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d06a      	beq.n	8001638 <PAJ7620_EVENT+0x3f0>
#if USE_INIT_GESTURE == 1

				*init_gs_tmr = init_gs_tmr_value/10;
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <PAJ7620_EVENT+0x400>)
 8001564:	881a      	ldrh	r2, [r3, #0]
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <PAJ7620_EVENT+0x404>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4939      	ldr	r1, [pc, #228]	; (8001650 <PAJ7620_EVENT+0x408>)
 800156c:	fba1 1202 	umull	r1, r2, r1, r2
 8001570:	08d2      	lsrs	r2, r2, #3
 8001572:	b292      	uxth	r2, r2
 8001574:	801a      	strh	r2, [r3, #0]

				if( !init_gs_state ) {
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <PAJ7620_EVENT+0x40c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d135      	bne.n	80015ea <PAJ7620_EVENT+0x3a2>
					*init_gs_tmr = init_gs_tmr_value/10;
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <PAJ7620_EVENT+0x400>)
 8001580:	881a      	ldrh	r2, [r3, #0]
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <PAJ7620_EVENT+0x404>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4932      	ldr	r1, [pc, #200]	; (8001650 <PAJ7620_EVENT+0x408>)
 8001588:	fba1 1202 	umull	r1, r2, r1, r2
 800158c:	08d2      	lsrs	r2, r2, #3
 800158e:	b292      	uxth	r2, r2
 8001590:	801a      	strh	r2, [r3, #0]
					init_gf_filter = gf_none;
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <PAJ7620_EVENT+0x410>)
 8001594:	2200      	movs	r2, #0
 8001596:	801a      	strh	r2, [r3, #0]
					uint16_t tmr_tmp_val = init_gs_tmr_value;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <PAJ7620_EVENT+0x400>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	80fb      	strh	r3, [r7, #6]
					if( init_gs_start_callback ) init_gs_start_callback( &tmr_tmp_val, &init_gf_filter );
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <PAJ7620_EVENT+0x414>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <PAJ7620_EVENT+0x36a>
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <PAJ7620_EVENT+0x414>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1dba      	adds	r2, r7, #6
 80015ac:	492a      	ldr	r1, [pc, #168]	; (8001658 <PAJ7620_EVENT+0x410>)
 80015ae:	4610      	mov	r0, r2
 80015b0:	4798      	blx	r3
					if( tmr_tmp_val >= 800 ) *init_gs_tmr = tmr_tmp_val/10;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015b8:	d308      	bcc.n	80015cc <PAJ7620_EVENT+0x384>
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <PAJ7620_EVENT+0x404>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4923      	ldr	r1, [pc, #140]	; (8001650 <PAJ7620_EVENT+0x408>)
 80015c2:	fba1 1202 	umull	r1, r2, r1, r2
 80015c6:	08d2      	lsrs	r2, r2, #3
 80015c8:	b292      	uxth	r2, r2
 80015ca:	801a      	strh	r2, [r3, #0]
					gs_set_filter( init_gf_filter );
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <PAJ7620_EVENT+0x410>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe29 	bl	8001228 <gs_set_filter>
					first_gs = 0; second_gs = 0;
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <PAJ7620_EVENT+0x418>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <PAJ7620_EVENT+0x41c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
					init_gs_state = 1;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <PAJ7620_EVENT+0x40c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e026      	b.n	8001638 <PAJ7620_EVENT+0x3f0>
				} else {
#endif

#if USE_CIRCLE_CONTINOUS == 1
					if( !gs_block ) {
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <PAJ7620_EVENT+0x420>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11c      	bne.n	800162c <PAJ7620_EVENT+0x3e4>
						gesture_callback( res, second_gs, first_gs );
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <PAJ7620_EVENT+0x3fc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 80015f8:	7810      	ldrb	r0, [r2, #0]
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <PAJ7620_EVENT+0x41c>)
 80015fc:	7811      	ldrb	r1, [r2, #0]
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <PAJ7620_EVENT+0x418>)
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4798      	blx	r3
						if( gs_tmr ) {
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <PAJ7620_EVENT+0x424>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d015      	beq.n	8001638 <PAJ7620_EVENT+0x3f0>
							first_gs 			= second_gs;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <PAJ7620_EVENT+0x41c>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <PAJ7620_EVENT+0x418>)
 8001612:	701a      	strb	r2, [r3, #0]
							second_gs 			= res;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <PAJ7620_EVENT+0x3f8>)
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <PAJ7620_EVENT+0x41c>)
 800161a:	701a      	strb	r2, [r3, #0]
							clear_last_gs_flag 	= 1;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <PAJ7620_EVENT+0x428>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
							if( CUSTOM_GS_CLEAR_TIME >= 500 ) *gs_tmr = CUSTOM_GS_CLEAR_TIME/10;
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <PAJ7620_EVENT+0x424>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2250      	movs	r2, #80	; 0x50
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	e005      	b.n	8001638 <PAJ7620_EVENT+0x3f0>
							else *gs_tmr = 500;
						}
					} else {
						first_gs  = 0;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <PAJ7620_EVENT+0x418>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
						second_gs = 0;
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <PAJ7620_EVENT+0x41c>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
#endif
			}

		}
	}
}
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000100 	.word	0x20000100
 8001644:	200000e4 	.word	0x200000e4
 8001648:	200000dc 	.word	0x200000dc
 800164c:	200000d8 	.word	0x200000d8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	200000e2 	.word	0x200000e2
 8001658:	200000e0 	.word	0x200000e0
 800165c:	200000d0 	.word	0x200000d0
 8001660:	200000ea 	.word	0x200000ea
 8001664:	200000e9 	.word	0x200000e9
 8001668:	200000f5 	.word	0x200000f5
 800166c:	200000f0 	.word	0x200000f0
 8001670:	200000f4 	.word	0x200000f4

08001674 <EXTI2_IRQHandler>:
			paj_int_flag = 1;
		}
	#endif
}
#else
INTERRUPT void EXTI2_IRQHandler(void) {
 8001674:	4668      	mov	r0, sp
 8001676:	f020 0107 	bic.w	r1, r0, #7
 800167a:	468d      	mov	sp, r1
 800167c:	b481      	push	{r0, r7}
 800167e:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF2) {		// Pending bit for line 3
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <EXTI2_IRQHandler+0x30>)
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <EXTI2_IRQHandler+0x24>
		EXTI->PR1 = EXTI_PR1_PIF2;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <EXTI2_IRQHandler+0x30>)
 800168e:	2204      	movs	r2, #4
 8001690:	615a      	str	r2, [r3, #20]
		paj_int_flag = 1;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <EXTI2_IRQHandler+0x34>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
	}
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc81      	pop	{r0, r7}
 800169e:	4685      	mov	sp, r0
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40010400 	.word	0x40010400
 80016a8:	200000e8 	.word	0x200000e8

080016ac <gpio_pin_cfg>:

#include "sw_mcu_conf.h"
#include "sw_gpio.h"

/******************* Funkcja ustawiająca trybyb pracy pinów *********************/
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u)
 80016bc:	883b      	ldrh	r3, [r7, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d006      	beq.n	80016d4 <gpio_pin_cfg+0x28>
		port->OTYPER |= pin;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	e006      	b.n	80016e2 <gpio_pin_cfg+0x36>
	else
		port->OTYPER &= (uint32_t) ~pin;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	43d2      	mvns	r2, r2
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]
	pin = __builtin_ctz(pin) * 2;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 800170c:	883b      	ldrh	r3, [r7, #0]
 800170e:	0a5b      	lsrs	r3, r3, #9
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
	port->MODER = reg_val;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 8001734:	883b      	ldrh	r3, [r7, #0]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
	port->PUPDR = reg_val;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 800175c:	883b      	ldrh	r3, [r7, #0]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
	port->OSPEEDR = reg_val;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	609a      	str	r2, [r3, #8]

	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3320      	adds	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
	pin *= 2;
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	807b      	strh	r3, [r7, #2]

	if (pin > 28) {
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	2b1c      	cmp	r3, #28
 8001786:	d905      	bls.n	8001794 <gpio_pin_cfg+0xe8>
		pin -= 32;
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	3b20      	subs	r3, #32
 800178c:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3324      	adds	r3, #36	; 0x24
 8001792:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 80017aa:	883b      	ldrh	r3, [r7, #0]
 80017ac:	f003 020f 	and.w	r2, r3, #15
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <RCC_gpio_init>:
#endif
}
#endif

#if defined STM32L412KBx_nucleo
void RCC_gpio_init( void ) {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

#ifdef RTC_PORTA_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <RCC_gpio_init+0x28>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <RCC_gpio_init+0x28>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif
#ifdef RTC_PORTB_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <RCC_gpio_init+0x28>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <RCC_gpio_init+0x28>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
#endif
#ifdef RTC_PORTH_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000

080017fc <gpio_pin_HI>:

#ifdef BSRR_REG
	inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
		port->BRR = pin;
	}
	inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
		port->BSRR = pin;
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
	}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <gpio_pin_XOR>:
	inline void gpio_pin_HI(  GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
		port->BSRRL = pin;
	}
#endif

inline void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]
	port->ODR ^= pin;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	405a      	eors	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	615a      	str	r2, [r3, #20]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
void sw_led_off( void ) {
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	LED_PORT->BSRR = LED_PIN;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <sw_led_off+0x14>)
 8001846:	2208      	movs	r2, #8
 8001848:	619a      	str	r2, [r3, #24]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	48000400 	.word	0x48000400

08001858 <sw_led_xor>:
	}
	void sw_led_on( void ) {
		LED_PORT->BSRRH = LED_PIN;
	}
#endif
void sw_led_xor( void ) {
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	LED_PORT->ODR ^= LED_PIN;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <sw_led_xor+0x1c>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <sw_led_xor+0x1c>)
 8001862:	f083 0308 	eor.w	r3, r3, #8
 8001866:	6153      	str	r3, [r2, #20]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	48000400 	.word	0x48000400

08001878 <sw_led_blink>:




void sw_led_blink( void ) { sw_led_xor(); }
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
 800187c:	f7ff ffec 	bl	8001858 <sw_led_xor>
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <sw_led_debug_init>:

void sw_led_debug_init( void ) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED_PORT, LED_PIN, 	gpio_mode_output_PP_LS );
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	2108      	movs	r1, #8
 800188e:	480a      	ldr	r0, [pc, #40]	; (80018b8 <sw_led_debug_init+0x34>)
 8001890:	f7ff ff0c 	bl	80016ac <gpio_pin_cfg>
	sw_led_off();
 8001894:	f7ff ffd4 	bl	8001840 <sw_led_off>
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 8001898:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800189c:	2101      	movs	r1, #1
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f7ff ff03 	bl	80016ac <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 80018a6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80018aa:	2102      	movs	r1, #2
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f7ff fefc 	bl	80016ac <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
#endif
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000400 	.word	0x48000400

080018bc <sw_led_blinking>:
int8_t sw_led_get_status(void) {
	if (blinkCounter == 0) 	return (int8_t)_led_not_blinking;
	else					return (int8_t)_led_blinking;
}

void sw_led_blinking(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <sw_led_blinking+0x38>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d012      	beq.n	80018ee <sw_led_blinking+0x32>
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <sw_led_blinking+0x3c>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10d      	bne.n	80018ee <sw_led_blinking+0x32>
	else {
		softTimer3 = blinkDelay;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <sw_led_blinking+0x40>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <sw_led_blinking+0x3c>)
 80018da:	801a      	strh	r2, [r3, #0]
		sw_led_blink();
 80018dc:	f7ff ffcc 	bl	8001878 <sw_led_blink>
		blinkCounter--;
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <sw_led_blinking+0x38>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <sw_led_blinking+0x38>)
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e000      	b.n	80018f0 <sw_led_blinking+0x34>
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 80018ee:	bf00      	nop
	}
}
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000101 	.word	0x20000101
 80018f8:	200005ee 	.word	0x200005ee
 80018fc:	20000102 	.word	0x20000102

08001900 <__NVIC_EnableIRQ>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <WriteCmd>:
}
#endif
//***********************************************
// Zapisanie kodu komendy do sterownika SSD1306
//***********************************************
static void WriteCmd( uint8_t cmd ) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	sw_transmision_write( cmd );
	#if USE_CS==1
	CS_HI;
	#endif
#elif (TRANSMISSION_MODE==SOFT_I2C) || (TRANSMISSION_MODE==HARD_I2C)
	sw_i2c_write_reg( I2C_ADDRESS, I2C_CTRL_DC_0, cmd );
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	2078      	movs	r0, #120	; 0x78
 800194e:	f001 fa69 	bl	8002e24 <sw_i2c_write_reg>
#endif
	delay_us(100);
 8001952:	2064      	movs	r0, #100	; 0x64
 8001954:	f000 fea4 	bl	80026a0 <delay_us>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <WriteData>:
//***********************************************
// Zapisanie danej do pamięci obrazu sterownika SSD1306
//***********************************************
static void WriteData( uint8_t regAddr, uint8_t * buffer, uint16_t cnt ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
		WriteSpi( buffer[i] ); 				// zapis danej
	}
	CS_HI;
#endif
#ifdef SSD1306_I2C
	sw_i2c_write_block( SSD1306_ADDR, SSD1306_SETSTARTLINE, cnt, buffer );
 8001970:	88ba      	ldrh	r2, [r7, #4]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2140      	movs	r1, #64	; 0x40
 8001976:	2078      	movs	r0, #120	; 0x78
 8001978:	f001 f8fa 	bl	8002b70 <sw_i2c_write_block>
#endif
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <sw_display_cls>:

//**********************************************
// Zeruj bufor wyświetlacza
// i zapisz jego zwartość do RAM obrazu
//**********************************************
void sw_display_cls( uint8_t *buffer, uint8_t pattern ) {
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8001990:	2300      	movs	r3, #0
 8001992:	81fb      	strh	r3, [r7, #14]
 8001994:	e007      	b.n	80019a6 <sw_display_cls+0x22>
		buffer[i] = pattern;
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	3301      	adds	r3, #1
 80019a4:	81fb      	strh	r3, [r7, #14]
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	d3f3      	bcc.n	8001996 <sw_display_cls+0x12>
	}
}
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <sw_ssd1306_display>:
//***********************************************

//************ Wyślij bufor RAM do sterownika ************
void sw_ssd1306_display( void ) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	2378      	movs	r3, #120	; 0x78
 80019c4:	71fb      	strb	r3, [r7, #7]
static INLINE bool sw_is_RXNE_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
}

static INLINE void sw_i2c_set_7bitAddr( uint8_t devAddr ) {
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <sw_ssd1306_display+0x78>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	79f9      	ldrb	r1, [r7, #7]
 80019d8:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <sw_ssd1306_display+0x78>)
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	430b      	orrs	r3, r1
 80019e0:	6053      	str	r3, [r2, #4]
}
 80019e2:	bf00      	nop
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( 0x21  );				// Command_Column_Address_Set
 80019e4:	2021      	movs	r0, #33	; 0x21
 80019e6:	f7ff ffa9 	bl	800193c <WriteCmd>
	WriteCmd( 0x00  );				// Start
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff ffa6 	bl	800193c <WriteCmd>
	WriteCmd( SCREEN_WIDTH  - 1  );	// End
 80019f0:	207f      	movs	r0, #127	; 0x7f
 80019f2:	f7ff ffa3 	bl	800193c <WriteCmd>

	WriteCmd( 0x22  );				// Command_Page_Address_Set
 80019f6:	2022      	movs	r0, #34	; 0x22
 80019f8:	f7ff ffa0 	bl	800193c <WriteCmd>
	WriteCmd( 0x00  );				// Start
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff ff9d 	bl	800193c <WriteCmd>
	WriteCmd( SCREEN_HEIGHT - 1 );	// End
 8001a02:	203f      	movs	r0, #63	; 0x3f
 8001a04:	f7ff ff9a 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_SETLOWCOLUMN  );
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ff97 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SETHIGHCOLUMN );
 8001a0e:	2010      	movs	r0, #16
 8001a10:	f7ff ff94 	bl	800193c <WriteCmd>
#if SCREEN_HEIGHT == 64
	WriteCmd( 0xB0 );
 8001a14:	20b0      	movs	r0, #176	; 0xb0
 8001a16:	f7ff ff91 	bl	800193c <WriteCmd>
#endif
#if SCREEN_HEIGHT == 32
	WriteCmd( 0xB4 );
#endif
//	delay_ms(100);
   	WriteData( SSD1306_SETSTARTLINE, (uint8_t *)ActualDMABuffer, FRAMEBUFFER_ALL );
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <sw_ssd1306_display+0x7c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a22:	4619      	mov	r1, r3
 8001a24:	2040      	movs	r0, #64	; 0x40
 8001a26:	f7ff ff9b 	bl	8001960 <WriteData>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20000508 	.word	0x20000508

08001a3c <timer16_init>:
/***************************************************************/

/*********************************** Timer16 init **************************************/
static void timer16_init( uint16_t timeFPS ) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <timer16_init+0x58>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <timer16_init+0x58>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
	TIM16->PSC = (uint32_t)SystemCoreClock / 0xFFFF / timeFPS - 1;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <timer16_init+0x5c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <timer16_init+0x60>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0bda      	lsrs	r2, r3, #15
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <timer16_init+0x64>)
 8001a66:	3b01      	subs	r3, #1
 8001a68:	6293      	str	r3, [r2, #40]	; 0x28
	TIM16->ARR = 0xFFFF - 1;
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <timer16_init+0x64>)
 8001a6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a70:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM16->DIER	= TIM_DIER_UIE;		// Update Event Interrupt
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <timer16_init+0x64>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]

	TIM16->CR1 |= TIM_CR1_CEN;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <timer16_init+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <timer16_init+0x64>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( TIM1_UP_TIM16_IRQn );
 8001a84:	2019      	movs	r0, #25
 8001a86:	f7ff ff3b 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	80008001 	.word	0x80008001
 8001aa0:	40014400 	.word	0x40014400

08001aa4 <sw_ssd1306_init>:
	}
}
/****************************************************************************************/

//************* INICJALIZACJA sterownika SSD1306
void sw_ssd1306_init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
//	ActualDMABuffer = SpectrumBuffer;
//	ActualDMABuffer = TextBufferDisplay;
	ActualDMABuffer = TextBuffer;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <sw_ssd1306_init+0xec>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a39      	ldr	r2, [pc, #228]	; (8001b94 <sw_ssd1306_init+0xf0>)
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	2378      	movs	r3, #120	; 0x78
 8001ab4:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <sw_ssd1306_init+0xf4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	79f9      	ldrb	r1, [r7, #7]
 8001ac8:	4a33      	ldr	r2, [pc, #204]	; (8001b98 <sw_ssd1306_init+0xf4>)
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6053      	str	r3, [r2, #4]
}
 8001ad2:	bf00      	nop
	RES_LO;
	RES_HI;
#endif
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( SSD1306_DISPLAYOFF );
 8001ad4:	20ae      	movs	r0, #174	; 0xae
 8001ad6:	f7ff ff31 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SETDISPLAYCLOCKDIV );
 8001ada:	20d5      	movs	r0, #213	; 0xd5
 8001adc:	f7ff ff2e 	bl	800193c <WriteCmd>
	WriteCmd( OLED_CONTRAST );
 8001ae0:	20f0      	movs	r0, #240	; 0xf0
 8001ae2:	f7ff ff2b 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_SETDISPLAYOFFSET );
 8001ae6:	20d3      	movs	r0, #211	; 0xd3
 8001ae8:	f7ff ff28 	bl	800193c <WriteCmd>
	WriteCmd( 0x0 );
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff ff25 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SETSTARTLINE | 0x0 );
 8001af2:	2040      	movs	r0, #64	; 0x40
 8001af4:	f7ff ff22 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_CHARGEPUMP );
 8001af8:	208d      	movs	r0, #141	; 0x8d
 8001afa:	f7ff ff1f 	bl	800193c <WriteCmd>

//    if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x10 );
//    else  WriteCmd( 0x14 );	// SSD1306_SWITCHCAPVCC

	WriteCmd( 0x14 );			// SSD1306_SWITCHCAPVCC
 8001afe:	2014      	movs	r0, #20
 8001b00:	f7ff ff1c 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_MEMORYMODE );
 8001b04:	2020      	movs	r0, #32
 8001b06:	f7ff ff19 	bl	800193c <WriteCmd>
	WriteCmd( 0x00 );
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff ff16 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SEGREMAP | 0x1 );
 8001b10:	20a1      	movs	r0, #161	; 0xa1
 8001b12:	f7ff ff13 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_COMSCANDEC );
 8001b16:	20c8      	movs	r0, #200	; 0xc8
 8001b18:	f7ff ff10 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_SETCONTRAST );
 8001b1c:	2081      	movs	r0, #129	; 0x81
 8001b1e:	f7ff ff0d 	bl	800193c <WriteCmd>
	WriteCmd( REFRESH_MAX );
 8001b22:	20f0      	movs	r0, #240	; 0xf0
 8001b24:	f7ff ff0a 	bl	800193c <WriteCmd>

//	if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x9F );
//	else WriteCmd( 0xCF );

	WriteCmd( 0xCF );					// SSD1306_SWITCHCAPVCC
 8001b28:	20cf      	movs	r0, #207	; 0xcf
 8001b2a:	f7ff ff07 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SETPRECHARGE );
 8001b2e:	20d9      	movs	r0, #217	; 0xd9
 8001b30:	f7ff ff04 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_SETCOMPINS );
	WriteCmd( 0x02 );
#endif
// ssd1306 - 128 x 64
#ifdef GLCD_RES_128_64
	WriteCmd( SSD1306_SETMULTIPLEX );
 8001b34:	20a8      	movs	r0, #168	; 0xa8
 8001b36:	f7ff ff01 	bl	800193c <WriteCmd>
	WriteCmd( 0x3F );
 8001b3a:	203f      	movs	r0, #63	; 0x3f
 8001b3c:	f7ff fefe 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_SETCOMPINS );
 8001b40:	20da      	movs	r0, #218	; 0xda
 8001b42:	f7ff fefb 	bl	800193c <WriteCmd>
	WriteCmd( 0x12 );
 8001b46:	2012      	movs	r0, #18
 8001b48:	f7ff fef8 	bl	800193c <WriteCmd>
#endif
	WriteCmd( SSD1306_SETVCOMDETECT );
 8001b4c:	20db      	movs	r0, #219	; 0xdb
 8001b4e:	f7ff fef5 	bl	800193c <WriteCmd>
	WriteCmd( 0x40 );
 8001b52:	2040      	movs	r0, #64	; 0x40
 8001b54:	f7ff fef2 	bl	800193c <WriteCmd>

	WriteCmd( SSD1306_DISPLAYALLON_RESUME );
 8001b58:	20a4      	movs	r0, #164	; 0xa4
 8001b5a:	f7ff feef 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_NORMALDISPLAY );
 8001b5e:	20a6      	movs	r0, #166	; 0xa6
 8001b60:	f7ff feec 	bl	800193c <WriteCmd>
	WriteCmd( SSD1306_DISPLAYON );
 8001b64:	20af      	movs	r0, #175	; 0xaf
 8001b66:	f7ff fee9 	bl	800193c <WriteCmd>

	sw_display_cls( (uint8_t *)ActualDMABuffer, 0x00 );
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <sw_ssd1306_init+0xf0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff07 	bl	8001984 <sw_display_cls>
	sw_ssd1306_display();
 8001b76:	f7ff ff21 	bl	80019bc <sw_ssd1306_display>

	timer16_init( 10 );
 8001b7a:	200a      	movs	r0, #10
 8001b7c:	f7ff ff5e 	bl	8001a3c <timer16_init>
	sw_dma_memset_init(8);
 8001b80:	2008      	movs	r0, #8
 8001b82:	f000 fc45 	bl	8002410 <sw_dma_memset_init>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000508 	.word	0x20000508
 8001b98:	2000000c 	.word	0x2000000c

08001b9c <graphic_draw_H_line_RAM>:
#include "displays.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
								  const uint32_t color, const T_GAMMA *gamma ) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	817b      	strh	r3, [r7, #10]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	813b      	strh	r3, [r7, #8]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	71fb      	strb	r3, [r7, #7]

#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
 8001bba:	e00f      	b.n	8001bdc <graphic_draw_H_line_RAM+0x40>
#ifdef PANEL_RGB
		graphic_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		graphic_set_pixel_RAM( buffer, x + i, y, (uint8_t *)&color );
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b219      	sxth	r1, r3
 8001bc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001bcc:	f107 0320 	add.w	r3, r7, #32
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f003 fbf9 	bl	80053c8 <_etext>
	for ( uint8_t i=0; i < width; i++ ) {
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
 8001bdc:	7dfa      	ldrb	r2, [r7, #23]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3eb      	bcc.n	8001bbc <graphic_draw_H_line_RAM+0x20>
#endif
	}
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const uint32_t color, const T_GAMMA *gamma ) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b088      	sub	sp, #32
 8001bf2:	af02      	add	r7, sp, #8
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	817b      	strh	r3, [r7, #10]
 8001c00:	460b      	mov	r3, r1
 8001c02:	813b      	strh	r3, [r7, #8]
 8001c04:	4613      	mov	r3, r2
 8001c06:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i=0; i < height; i++ ) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]
 8001c0c:	e013      	b.n	8001c36 <graphic_fill_rectangle_RAM+0x48>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	893b      	ldrh	r3, [r7, #8]
 8001c14:	4413      	add	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	79f8      	ldrb	r0, [r7, #7]
 8001c1c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff ffb6 	bl	8001b9c <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	3301      	adds	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3e6      	bcc.n	8001c0e <graphic_fill_rectangle_RAM+0x20>
	}
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <polish_letters>:
	0xA2,  /*ó, */
};
#endif

/***** Zwraca numer znaku w tablicy ************************/
uint8_t polish_letters(uint8_t codePage, wchar_t codeChar) {
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]

	uint8_t i;
	uint8_t tmp=ASCII;
 8001c58:	2313      	movs	r3, #19
 8001c5a:	73bb      	strb	r3, [r7, #14]

	for (i=0; i<18; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e00e      	b.n	8001c80 <polish_letters+0x34>

#ifdef UNICODE
		if (codePage == UNICODE) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <polish_letters+0x2e>
			if ( codeChar == uniCode[i]) {
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <polish_letters+0x48>)
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d101      	bne.n	8001c7a <polish_letters+0x2e>
				return i;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	e006      	b.n	8001c88 <polish_letters+0x3c>
	for (i=0; i<18; i++) {
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d9ed      	bls.n	8001c62 <polish_letters+0x16>
			if ( codeChar == pgm_read_byte(cp852Code+i) )
				return i;
		}
#endif
	}
	return tmp;
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	08005e3c 	.word	0x08005e3c

08001c98 <graphic_draw_char_RAM>:
	return charWidth;
}
/*********************************************************************************************************/
#elif defined COLOR_MONO
uint8_t graphic_draw_char_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, wchar_t charCode, uint32_t  color,
									  uint32_t bg, uint8_t drawLine, FONT_INFO *fontPtrPGM, const T_GAMMA *gamma ) {
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	817b      	strh	r3, [r7, #10]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	813b      	strh	r3, [r7, #8]
	uint8_t		charWidth;
	uint16_t	charOffset;
	uint8_t		charHeight			= fontPtrPGM->heightPixels;
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	763b      	strb	r3, [r7, #24]
	uint8_t		charAddressStart	= fontPtrPGM->startChar;
 8001cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	75fb      	strb	r3, [r7, #23]
	uint8_t		transCode 			= polish_letters(UNICODE, charCode);
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff ffc7 	bl	8001c4c <polish_letters>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75bb      	strb	r3, [r7, #22]
	uint8_t 	size 				= 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	757b      	strb	r3, [r7, #21]
	// Rysujemy SPACJĘ i wychodzimy -------------------------------------------------------------------
	if (charCode == L' ') {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d113      	bne.n	8001cf4 <graphic_draw_char_RAM+0x5c>
		graphic_fill_rectangle_RAM( buffer, x, y, fontPtrPGM->spacePixels, charHeight, bg, gamma );
 8001ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cce:	7a5c      	ldrb	r4, [r3, #9]
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd2:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001cd6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cdc:	9202      	str	r2, [sp, #8]
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	7e3b      	ldrb	r3, [r7, #24]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff ff80 	bl	8001bee <graphic_fill_rectangle_RAM>
		return fontPtrPGM->spacePixels;
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	7a5b      	ldrb	r3, [r3, #9]
 8001cf2:	e107      	b.n	8001f04 <graphic_draw_char_RAM+0x26c>
	}
	//--------------------------------------------------------------------------------------------------
	if (transCode == ASCII) {
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	2b13      	cmp	r3, #19
 8001cf8:	d112      	bne.n	8001d20 <graphic_draw_char_RAM+0x88>
		// Czytamy ile bitów zajmuje odległość czcionki
		charWidth  = fontPtrPGM->charInfo[ charCode - charAddressStart ].widthBits;
 8001cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	1acb      	subs	r3, r1, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	77fb      	strb	r3, [r7, #31]
		// Czytamy ile bitów zajmuje odległość między znakami
		charOffset = fontPtrPGM->charInfo[ charCode - charAddressStart ].offset;
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	1acb      	subs	r3, r1, r3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	83bb      	strh	r3, [r7, #28]
 8001d1e:	e019      	b.n	8001d54 <graphic_draw_char_RAM+0xbc>
	} else {
		charWidth  = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 8001d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d26:	8a9b      	ldrh	r3, [r3, #20]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	7dbb      	ldrb	r3, [r7, #22]
 8001d2c:	f1c3 0312 	rsb	r3, r3, #18
 8001d30:	1acb      	subs	r3, r1, r3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	77fb      	strb	r3, [r7, #31]
		charOffset = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].offset;
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d40:	8a9b      	ldrh	r3, [r3, #20]
 8001d42:	4619      	mov	r1, r3
 8001d44:	7dbb      	ldrb	r3, [r7, #22]
 8001d46:	f1c3 0312 	rsb	r3, r3, #18
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	885b      	ldrh	r3, [r3, #2]
 8001d52:	83bb      	strh	r3, [r7, #28]
	}

	if((x >= _width)					||	// Clip right
 8001d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d58:	4a6c      	ldr	r2, [pc, #432]	; (8001f0c <graphic_draw_char_RAM+0x274>)
 8001d5a:	8812      	ldrh	r2, [r2, #0]
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	da17      	bge.n	8001d90 <graphic_draw_char_RAM+0xf8>
		(y >= _height)					||	// Clip bottom
 8001d60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <graphic_draw_char_RAM+0x278>)
 8001d66:	8812      	ldrh	r2, [r2, #0]
	if((x >= _width)					||	// Clip right
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	da11      	bge.n	8001d90 <graphic_draw_char_RAM+0xf8>
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8001d6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d70:	7ffb      	ldrb	r3, [r7, #31]
 8001d72:	7d79      	ldrb	r1, [r7, #21]
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
		(y >= _height)					||	// Clip bottom
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dd08      	ble.n	8001d90 <graphic_draw_char_RAM+0xf8>
		((y + charHeight * size - 1) < 0))	// Clip top
 8001d7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d82:	7e3b      	ldrb	r3, [r7, #24]
 8001d84:	7d79      	ldrb	r1, [r7, #21]
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	dc01      	bgt.n	8001d94 <graphic_draw_char_RAM+0xfc>
	return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e0b7      	b.n	8001f04 <graphic_draw_char_RAM+0x26c>

	if (charCode == L' ') {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d11a      	bne.n	8001dd0 <graphic_draw_char_RAM+0x138>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidth*size, charHeight*size, bg, NULL );
 8001d9a:	7ffa      	ldrb	r2, [r7, #31]
 8001d9c:	7d7b      	ldrb	r3, [r7, #21]
 8001d9e:	fb12 f303 	smulbb	r3, r2, r3
 8001da2:	b2dc      	uxtb	r4, r3
 8001da4:	7e3a      	ldrb	r2, [r7, #24]
 8001da6:	7d7b      	ldrb	r3, [r7, #21]
 8001da8:	fb12 f303 	smulbb	r3, r2, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db0:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001db4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001db8:	2500      	movs	r5, #0
 8001dba:	9502      	str	r5, [sp, #8]
 8001dbc:	9201      	str	r2, [sp, #4]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff ff12 	bl	8001bee <graphic_fill_rectangle_RAM>

		return fontPtrPGM->spacePixels;
 8001dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dcc:	7a5b      	ldrb	r3, [r3, #9]
 8001dce:	e099      	b.n	8001f04 <graphic_draw_char_RAM+0x26c>
	}
	int8_t i, k, j=0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	767b      	strb	r3, [r7, #25]
	uint8_t calkow = (charWidth - 1)/8; // Sprawdzamy w ilu bitach mamy szerokość czcionki
 8001dd4:	7ffb      	ldrb	r3, [r7, #31]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da00      	bge.n	8001dde <graphic_draw_char_RAM+0x146>
 8001ddc:	3307      	adds	r3, #7
 8001dde:	10db      	asrs	r3, r3, #3
 8001de0:	753b      	strb	r3, [r7, #20]
	uint8_t line;

	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 8001de2:	2300      	movs	r3, #0
 8001de4:	76fb      	strb	r3, [r7, #27]
 8001de6:	e086      	b.n	8001ef6 <graphic_draw_char_RAM+0x25e>
	{
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 8001de8:	2300      	movs	r3, #0
 8001dea:	767b      	strb	r3, [r7, #25]
 8001dec:	e078      	b.n	8001ee0 <graphic_draw_char_RAM+0x248>

			line = pgm_read_byte( fontPtrPGM->data + charOffset + (calkow + 1)*i + j );
 8001dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	8bbb      	ldrh	r3, [r7, #28]
 8001df4:	7d39      	ldrb	r1, [r7, #20]
 8001df6:	3101      	adds	r1, #1
 8001df8:	f997 001b 	ldrsb.w	r0, [r7, #27]
 8001dfc:	fb00 f101 	mul.w	r1, r0, r1
 8001e00:	4419      	add	r1, r3
 8001e02:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001e06:	440b      	add	r3, r1
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	74fb      	strb	r3, [r7, #19]

			for ( k=0; k<8; k++ ) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	76bb      	strb	r3, [r7, #26]
 8001e12:	e05b      	b.n	8001ecc <graphic_draw_char_RAM+0x234>
				if ( (line & (1 << (7-k))) && ( (k + 8*j) < charWidth) ) {    // Ekstrahujemy kolejne bity
 8001e14:	7cfa      	ldrb	r2, [r7, #19]
 8001e16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	fa42 f303 	asr.w	r3, r2, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d023      	beq.n	8001e72 <graphic_draw_char_RAM+0x1da>
 8001e2a:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8001e2e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	441a      	add	r2, r3
 8001e36:	7ffb      	ldrb	r3, [r7, #31]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	da1a      	bge.n	8001e72 <graphic_draw_char_RAM+0x1da>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&color );
 8001e3c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b219      	sxth	r1, r3
 8001e58:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	893b      	ldrh	r3, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b21a      	sxth	r2, r3
 8001e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f003 faac 	bl	80053c8 <_etext>
 8001e70:	e026      	b.n	8001ec0 <graphic_draw_char_RAM+0x228>
				}
				else if( (bg!=color) && ( (k + 8*j) < charWidth) ) {
 8001e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d022      	beq.n	8001ec0 <graphic_draw_char_RAM+0x228>
 8001e7a:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8001e7e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	441a      	add	r2, r3
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	da19      	bge.n	8001ec0 <graphic_draw_char_RAM+0x228>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&bg );
 8001e8c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b219      	sxth	r1, r3
 8001ea8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f003 fa84 	bl	80053c8 <_etext>
			for ( k=0; k<8; k++ ) {
 8001ec0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	76bb      	strb	r3, [r7, #26]
 8001ecc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001ed0:	2b07      	cmp	r3, #7
 8001ed2:	dd9f      	ble.n	8001e14 <graphic_draw_char_RAM+0x17c>
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 8001ed4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	767b      	strb	r3, [r7, #25]
 8001ee0:	7d3a      	ldrb	r2, [r7, #20]
 8001ee2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	da81      	bge.n	8001dee <graphic_draw_char_RAM+0x156>
	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 8001eea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	76fb      	strb	r3, [r7, #27]
 8001ef6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8001efa:	7e3b      	ldrb	r3, [r7, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f6ff af73 	blt.w	8001de8 <graphic_draw_char_RAM+0x150>
				}
			}
		} // Koniec rysowania
	}// Koniec pętli do wierszy

	return charWidth;
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0c:	20000014 	.word	0x20000014
 8001f10:	20000016 	.word	0x20000016

08001f14 <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b08f      	sub	sp, #60	; 0x3c
 8001f18:	af06      	add	r7, sp, #24
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71fb      	strb	r3, [r7, #7]
	int16_t cursorX = string->x;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	83fb      	strh	r3, [r7, #30]
	int16_t cursorY = string->y;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	82fb      	strh	r3, [r7, #22]
	uint8_t charWidth;

	textSize = FONTx1;	// To być może będzie niepotrzebne
 8001f30:	2301      	movs	r3, #1
 8001f32:	71fb      	strb	r3, [r7, #7]

	if ( string->onChange ) {
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	7c1b      	ldrb	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <graphic_puts_RAM+0x5a>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	889b      	ldrh	r3, [r3, #4]
 8001f4c:	b2dc      	uxtb	r4, r3
									string->fontPtrPGM->heightPixels, bg, gamma );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	68db      	ldr	r3, [r3, #12]
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f56:	9202      	str	r2, [sp, #8]
 8001f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4623      	mov	r3, r4
 8001f60:	4602      	mov	r2, r0
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fe43 	bl	8001bee <graphic_fill_rectangle_RAM>
		string->onChange = 0;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	741a      	strb	r2, [r3, #16]
	}
	string->lastPosX = string->x;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	825a      	strh	r2, [r3, #18]
	string->lastPosY = string->y;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	829a      	strh	r2, [r3, #20]

	wchar_t * str = string->str;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]

	while ( *str ) {
 8001f88:	e028      	b.n	8001fdc <graphic_puts_RAM+0xc8>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, *str++, color, bg, textSize, string->fontPtrPGM, gamma );
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	1d1a      	adds	r2, r3, #4
 8001f8e:	61ba      	str	r2, [r7, #24]
 8001f90:	681c      	ldr	r4, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001f9a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8001f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa0:	9204      	str	r2, [sp, #16]
 8001fa2:	9303      	str	r3, [sp, #12]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	4623      	mov	r3, r4
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fe6f 	bl	8001c98 <graphic_draw_char_RAM>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	757b      	strb	r3, [r7, #21]
		cursorX += textSize * (charWidth + string->fontPtrPGM->interspacePixels );
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	7d7b      	ldrb	r3, [r7, #21]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68c9      	ldr	r1, [r1, #12]
 8001fc8:	7a09      	ldrb	r1, [r1, #8]
 8001fca:	440b      	add	r3, r1
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	fb12 f303 	smulbb	r3, r2, r3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	83fb      	strh	r3, [r7, #30]
	while ( *str ) {
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1d2      	bne.n	8001f8a <graphic_puts_RAM+0x76>
	}
	return  string->stringLength = cursorX - string->x; //Zwraca długość napisu w pikselach
 8001fe4:	8bfa      	ldrh	r2, [r7, #30]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	809a      	strh	r2, [r3, #4]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	889b      	ldrh	r3, [r3, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}

08002002 <graphic_char_to_wide>:
								string->fontPtrPGM->heightPixels, bg, gamma );
}
/*********************************************************************************************************/

/******************* Duplikuje tablice typu char do wideChar *******************************/
uint8_t graphic_char_to_wide( wchar_t* dest, char* source ) {
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	int i = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
	char * ptr = source;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	60bb      	str	r3, [r7, #8]

    while(ptr[i]) {
 8002014:	e00c      	b.n	8002030 <graphic_char_to_wide+0x2e>
        dest[i] = (char)source[i];
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	7819      	ldrb	r1, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	460a      	mov	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
        i++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
    while(ptr[i]) {
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ec      	bne.n	8002016 <graphic_char_to_wide+0x14>
    }
    dest[i] = '\0';
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
	return i; // Zwraca długość string'a bez znaku kontrolnego '\0'
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <graphic_puts_int_RAM>:
}
/*******************************************************************************************/

/********************* Draw the numbers on screen ******************************************/
uint16_t graphic_puts_int_RAM( volatile T_DISPLAY *buffer, T_STRING *string, int data, uint8_t textSize,
						   	   uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b09a      	sub	sp, #104	; 0x68
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	70fb      	strb	r3, [r7, #3]
	char bufer[16];
	wchar_t bufer2[16];
	string->str = bufer2;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f107 0210 	add.w	r2, r7, #16
 800206c:	609a      	str	r2, [r3, #8]

	itoa( data, bufer, 10 );
 800206e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002072:	220a      	movs	r2, #10
 8002074:	4619      	mov	r1, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f002 f960 	bl	800433c <itoa>

	(void)graphic_char_to_wide( bufer2, bufer );
 800207c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffbb 	bl	8002002 <graphic_char_to_wide>

	return string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ff3a 	bl	8001f14 <graphic_puts_RAM>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	809a      	strh	r2, [r3, #4]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	889b      	ldrh	r3, [r3, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3760      	adds	r7, #96	; 0x60
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <reverse>:
	string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
}


// Reverses a string 'str' of length 'len'
static void reverse( char *str, int len ) {
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80020c8:	e018      	b.n	80020fc <reverse+0x48>
		temp = str[i];
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	440b      	add	r3, r1
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
		i++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
		j--;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
	while (i < j) {
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbe2      	blt.n	80020ca <reverse+0x16>
	}
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <intToStr>:

// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
static int intToStr( int x, char str[], int d) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
	while (x) {
 8002124:	e01d      	b.n	8002162 <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <intToStr+0x8c>)
 800212a:	fb83 1302 	smull	r1, r3, r3, r2
 800212e:	1099      	asrs	r1, r3, #2
 8002130:	17d3      	asrs	r3, r2, #31
 8002132:	1ac9      	subs	r1, r1, r3
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	1ad1      	subs	r1, r2, r3
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	6179      	str	r1, [r7, #20]
 8002146:	4619      	mov	r1, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	440b      	add	r3, r1
 800214c:	3230      	adds	r2, #48	; 0x30
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <intToStr+0x8c>)
 8002156:	fb82 1203 	smull	r1, r2, r2, r3
 800215a:	1092      	asrs	r2, r2, #2
 800215c:	17db      	asrs	r3, r3, #31
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	60fb      	str	r3, [r7, #12]
	while (x) {
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1de      	bne.n	8002126 <intToStr+0x12>
	}
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8002168:	e007      	b.n	800217a <intToStr+0x66>
		str[i++] = '0';
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	617a      	str	r2, [r7, #20]
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	2230      	movs	r2, #48	; 0x30
 8002178:	701a      	strb	r2, [r3, #0]
	while (i < d)
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbf3      	blt.n	800216a <intToStr+0x56>

	reverse(str, i);
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f7ff ff95 	bl	80020b4 <reverse>
	str[i] = '\0';
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	return i;
 8002194:	697b      	ldr	r3, [r7, #20]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	66666667 	.word	0x66666667
 80021a4:	00000000 	.word	0x00000000

080021a8 <ftoa>:

// Converts a floating-point/double number to a string.
static void ftoa( float n, char *res, int afterpoint ) {
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80021b2:	60b8      	str	r0, [r7, #8]
 80021b4:	6079      	str	r1, [r7, #4]
	int ipart 	= (int) n;						// Extract integer part
 80021b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021be:	ee17 3a90 	vmov	r3, s15
 80021c2:	61fb      	str	r3, [r7, #28]
	float fpart = n - (float) ipart;			// Extract floating part
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80021d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d6:	edc7 7a06 	vstr	s15, [r7, #24]
	int i 		= intToStr( ipart, res, 0 );	// convert integer part to string
 80021da:	2200      	movs	r2, #0
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	69f8      	ldr	r0, [r7, #28]
 80021e0:	f7ff ff98 	bl	8002114 <intToStr>
 80021e4:	6178      	str	r0, [r7, #20]

	if (afterpoint != 0) {						// check for display option after point
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d030      	beq.n	800224e <ftoa+0xa6>
		res[i] = '.'; 							// add dot
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	222e      	movs	r2, #46	; 0x2e
 80021f4:	701a      	strb	r2, [r3, #0]
	// Get the value of fraction part upto given no.
	// of points after dot. The third parameter
	// is needed to handle cases like 233.007
		fpart = fpart * pow( 10, afterpoint );
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	f7fe f94e 	bl	8000498 <__aeabi_f2d>
 80021fc:	4604      	mov	r4, r0
 80021fe:	460d      	mov	r5, r1
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe f937 	bl	8000474 <__aeabi_i2d>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	ec43 2b11 	vmov	d1, r2, r3
 800220e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002258 <ftoa+0xb0>
 8002212:	f002 f8df 	bl	80043d4 <pow>
 8002216:	ec53 2b10 	vmov	r2, r3, d0
 800221a:	4620      	mov	r0, r4
 800221c:	4629      	mov	r1, r5
 800221e:	f7fe f993 	bl	8000548 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f7fe fc3d 	bl	8000aa8 <__aeabi_d2f>
 800222e:	4603      	mov	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]

		intToStr((int) fpart, res + i + 1, afterpoint);
 8002232:	edd7 7a06 	vldr	s15, [r7, #24]
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4413      	add	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4619      	mov	r1, r3
 8002246:	ee17 0a90 	vmov	r0, s15
 800224a:	f7ff ff63 	bl	8002114 <intToStr>
	}
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bdb0      	pop	{r4, r5, r7, pc}
 8002256:	bf00      	nop
 8002258:	00000000 	.word	0x00000000
 800225c:	40240000 	.word	0x40240000

08002260 <graphic_puts_float_RAM>:
static void graphic_puts_float_RAM( volatile T_DISPLAY *buffer, T_STRING *string, float data, uint8_t textSize,
							 	 	 uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a2      	sub	sp, #136	; 0x88
 8002264:	af02      	add	r7, sp, #8
 8002266:	6178      	str	r0, [r7, #20]
 8002268:	6139      	str	r1, [r7, #16]
 800226a:	ed87 0a03 	vstr	s0, [r7, #12]
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	72fb      	strb	r3, [r7, #11]
	wchar_t	buff_wchar[20];
	char	buff[20];
	string->str = buff_wchar;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800227a:	609a      	str	r2, [r3, #8]
	memset(buff, 0, 20);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2214      	movs	r2, #20
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f85b 	bl	8004340 <memset>
	memset(buff_wchar, 0, 4*20);
 800228a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800228e:	2250      	movs	r2, #80	; 0x50
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f002 f854 	bl	8004340 <memset>
	ftoa( data, buff, 4 );
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2104      	movs	r1, #4
 800229e:	4618      	mov	r0, r3
 80022a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80022a4:	f7ff ff80 	bl	80021a8 <ftoa>

    (void)graphic_char_to_wide( buff_wchar, buff );
 80022a8:	f107 021c 	add.w	r2, r7, #28
 80022ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fea5 	bl	8002002 <graphic_char_to_wide>
    string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 80022b8:	7afa      	ldrb	r2, [r7, #11]
 80022ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6939      	ldr	r1, [r7, #16]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff fe22 	bl	8001f14 <graphic_puts_RAM>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	809a      	strh	r2, [r3, #4]
}
 80022d8:	bf00      	nop
 80022da:	3780      	adds	r7, #128	; 0x80
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TEXT_display_number>:




void TEXT_display_number( int16_t x, int16_t y, int16_t number ) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
 80022ea:	460b      	mov	r3, r1
 80022ec:	80bb      	strh	r3, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	807b      	strh	r3, [r7, #2]
	static T_STRING Text;
	Text.str = L"";
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <TEXT_display_number+0x58>)
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <TEXT_display_number+0x5c>)
 80022f6:	609a      	str	r2, [r3, #8]
	Text.x = x;
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <TEXT_display_number+0x58>)
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	8013      	strh	r3, [r2, #0]
	Text.y = y;
 80022fe:	4a0e      	ldr	r2, [pc, #56]	; (8002338 <TEXT_display_number+0x58>)
 8002300:	88bb      	ldrh	r3, [r7, #4]
 8002302:	8053      	strh	r3, [r2, #2]
	Text.onChange = 1;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <TEXT_display_number+0x58>)
 8002306:	2201      	movs	r2, #1
 8002308:	741a      	strb	r2, [r3, #16]
	Text.fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <TEXT_display_number+0x58>)
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <TEXT_display_number+0x60>)
 800230e:	60da      	str	r2, [r3, #12]
	graphic_puts_int_RAM( TextBuffer, &Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <TEXT_display_number+0x64>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <TEXT_display_number+0x68>)
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2301      	movs	r3, #1
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <TEXT_display_number+0x58>)
 800232a:	f7ff fe95 	bl	8002058 <graphic_puts_int_RAM>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2000050c 	.word	0x2000050c
 800233c:	0800559c 	.word	0x0800559c
 8002340:	08005e10 	.word	0x08005e10
 8002344:	20000008 	.word	0x20000008
 8002348:	08005e84 	.word	0x08005e84

0800234c <TEXT_display_float>:
void TEXT_display_float( int16_t x, int16_t y, float number ) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	460a      	mov	r2, r1
 8002356:	ed87 0a00 	vstr	s0, [r7]
 800235a:	80fb      	strh	r3, [r7, #6]
 800235c:	4613      	mov	r3, r2
 800235e:	80bb      	strh	r3, [r7, #4]
	static T_STRING Text;
	Text.str = L"";
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <TEXT_display_float+0x58>)
 8002362:	4a11      	ldr	r2, [pc, #68]	; (80023a8 <TEXT_display_float+0x5c>)
 8002364:	609a      	str	r2, [r3, #8]
	Text.x = x;
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <TEXT_display_float+0x58>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	8013      	strh	r3, [r2, #0]
	Text.y = y;
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <TEXT_display_float+0x58>)
 800236e:	88bb      	ldrh	r3, [r7, #4]
 8002370:	8053      	strh	r3, [r2, #2]
	Text.onChange = 1;
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <TEXT_display_float+0x58>)
 8002374:	2201      	movs	r2, #1
 8002376:	741a      	strb	r2, [r3, #16]
	Text.fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <TEXT_display_float+0x58>)
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <TEXT_display_float+0x60>)
 800237c:	60da      	str	r2, [r3, #12]
	graphic_puts_float_RAM( TextBuffer, &Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <TEXT_display_float+0x64>)
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <TEXT_display_float+0x68>)
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	2300      	movs	r3, #0
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800238e:	2201      	movs	r2, #1
 8002390:	ed97 0a00 	vldr	s0, [r7]
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <TEXT_display_float+0x58>)
 8002396:	f7ff ff63 	bl	8002260 <graphic_puts_float_RAM>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000524 	.word	0x20000524
 80023a8:	0800559c 	.word	0x0800559c
 80023ac:	08005e10 	.word	0x08005e10
 80023b0:	20000008 	.word	0x20000008
 80023b4:	08005e84 	.word	0x08005e84

080023b8 <TEXT_display_string>:
void TEXT_display_string( int16_t x, int16_t y, wchar_t * str ) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af02      	add	r7, sp, #8
 80023be:	4603      	mov	r3, r0
 80023c0:	603a      	str	r2, [r7, #0]
 80023c2:	80fb      	strh	r3, [r7, #6]
 80023c4:	460b      	mov	r3, r1
 80023c6:	80bb      	strh	r3, [r7, #4]
	static T_STRING Text;
	Text.x = x;
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <TEXT_display_string+0x48>)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	8013      	strh	r3, [r2, #0]
	Text.y = y;
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <TEXT_display_string+0x48>)
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	8053      	strh	r3, [r2, #2]
	Text.str = str;
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <TEXT_display_string+0x48>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6093      	str	r3, [r2, #8]
	Text.fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var ;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <TEXT_display_string+0x48>)
 80023dc:	4a09      	ldr	r2, [pc, #36]	; (8002404 <TEXT_display_string+0x4c>)
 80023de:	60da      	str	r2, [r3, #12]
	graphic_puts_RAM( TextBuffer, &Text, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <TEXT_display_string+0x50>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <TEXT_display_string+0x54>)
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2300      	movs	r3, #0
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80023f0:	2201      	movs	r2, #1
 80023f2:	4903      	ldr	r1, [pc, #12]	; (8002400 <TEXT_display_string+0x48>)
 80023f4:	f7ff fd8e 	bl	8001f14 <graphic_puts_RAM>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	2000053c 	.word	0x2000053c
 8002404:	08005e10 	.word	0x08005e10
 8002408:	20000008 	.word	0x20000008
 800240c:	08005e84 	.word	0x08005e84

08002410 <sw_dma_memset_init>:
 *      Author: simon
 */

#include "sw_mcu_conf.h"

void sw_dma_memset_init( uint32_t bits ) {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
#ifdef STM32F3
	RCC->AHBENR |= RCC_AHBENR_DMA2EN;			// DMA1 clock enabled
#elif defined STM32L4
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;			// DMA1 clock enabled
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <sw_dma_memset_init+0x64>)
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	4a15      	ldr	r2, [pc, #84]	; (8002474 <sw_dma_memset_init+0x64>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;			// Clear CCR_EN bit - ready to CMAR,CPAR,CNDTR modification
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <sw_dma_memset_init+0x68>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <sw_dma_memset_init+0x68>)
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR = DMA_CCR_MEM2MEM		// Copy memory to memory
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <sw_dma_memset_init+0x68>)
 8002432:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002436:	601a      	str	r2, [r3, #0]
						 |DMA_CCR_MINC 	 		// Memory increment mode enabled
//						 |DMA_CCR_PINC 	 		// Peripheral increment mode enabled
//						 |DMA_CCR_DIR			// Data transfer direction. CMAR -> CPAR (Memory to Peripheral)
						 ;
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <sw_dma_memset_init+0x68>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <sw_dma_memset_init+0x68>)
 800243e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002442:	6013      	str	r3, [r2, #0]
	bits = ( bits << DMA_CCR_PSIZE_Pos );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <sw_dma_memset_init+0x68>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	490a      	ldr	r1, [pc, #40]	; (8002478 <sw_dma_memset_init+0x68>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
	bits = ( bits << DMA_CCR_MSIZE_Pos );
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <sw_dma_memset_init+0x68>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4905      	ldr	r1, [pc, #20]	; (8002478 <sw_dma_memset_init+0x68>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]

}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40021000 	.word	0x40021000
 8002478:	40020444 	.word	0x40020444

0800247c <DMA1_Channel3_IRQHandler>:
}
/*************************************************************************************/

/* 11. *******************************************************************************/
#ifdef SPI_DMA
void SPI_DMA_ChannelTX_IRQHandler(void) {
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	while( (DMA1->ISR & SPI_DMATX_TC_FLAG) == 0 ) {}	//
 8002480:	bf00      	nop
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <DMA1_Channel3_IRQHandler+0x4c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f9      	beq.n	8002482 <DMA1_Channel3_IRQHandler+0x6>
	DMA1->IFCR = SPI_DMATX_TC_FLAG;			// DMA Channel Transfer Complete clear flag
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <DMA1_Channel3_IRQHandler+0x4c>)
 8002490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002494:	605a      	str	r2, [r3, #4]
}
 8002496:	bf00      	nop
	while ( (spi->SPI->SR & SPI_SR_BSY) == SPI_SR_BSY ) {}
 8002498:	bf00      	nop
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <DMA1_Channel3_IRQHandler+0x50>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d0f7      	beq.n	800249a <DMA1_Channel3_IRQHandler+0x1e>
}
 80024aa:	bf00      	nop
	spi_clear_tc_flag();
	spi_wait_until_busy();
	SPI_DMATX_Channel->CCR	&= ~DMA_CCR_EN;			//
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <DMA1_Channel3_IRQHandler+0x54>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <DMA1_Channel3_IRQHandler+0x54>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6013      	str	r3, [r2, #0]
	spiDmaStatus 			 = SPI_DMA_BUSY;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <DMA1_Channel3_IRQHandler+0x58>)
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40020000 	.word	0x40020000
 80024cc:	20000018 	.word	0x20000018
 80024d0:	40020030 	.word	0x40020030
 80024d4:	20000554 	.word	0x20000554

080024d8 <DWT_Delay_Init>:
#include "sw_soft_timers.h"

#include "../SW_BOARD/sw_led_blink_debug.h"

// https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/
uint32_t DWT_Delay_Init(void) {
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <DWT_Delay_Init+0x58>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <DWT_Delay_Init+0x58>)
 80024e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <DWT_Delay_Init+0x58>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a10      	ldr	r2, [pc, #64]	; (8002530 <DWT_Delay_Init+0x58>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <DWT_Delay_Init+0x5c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <DWT_Delay_Init+0x5c>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <DWT_Delay_Init+0x5c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <DWT_Delay_Init+0x5c>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <DWT_Delay_Init+0x5c>)
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8002512:	bf00      	nop
	__ASM volatile ("NOP");
 8002514:	bf00      	nop
	__ASM volatile ("NOP");
 8002516:	bf00      	nop

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT) {
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <DWT_Delay_Init+0x5c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <DWT_Delay_Init+0x4c>
		return 0; /*clock cycle counter started*/
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <DWT_Delay_Init+0x4e>
	} else {
		return 1; /*clock cycle counter not started*/
 8002524:	2301      	movs	r3, #1
	}
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000edf0 	.word	0xe000edf0
 8002534:	e0001000 	.word	0xe0001000

08002538 <sw_softTimers_init>:

/**** Inicjujemy SysTick pod timery programowe *****/
uint32_t sw_softTimers_init( uint32_t timeBase_ms, uint32_t type ) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]

//	if 		(type==MILI_SEC)	type = 1000;	// 1 ms
//	else if (type==MICRO_SEC) 	type = 1;		// 1 us
//	else return 0;								// błąd
//	SysTick_Config( SystemCoreClock/type/timeBase_ms );
	if ( type==MICRO_SEC ) {
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d101      	bne.n	800254c <sw_softTimers_init+0x14>
		DWT_Delay_Init();
 8002548:	f7ff ffc6 	bl	80024d8 <DWT_Delay_Init>
	}
	return 1;									// ok
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <SysTick_Handler>:
volatile uint16_t showMenuTimer;
volatile uint16_t softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	milis++;
 800255c:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <SysTick_Handler+0xf0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a39      	ldr	r2, [pc, #228]	; (8002648 <SysTick_Handler+0xf0>)
 8002564:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <SysTick_Handler+0xf4>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <SysTick_Handler+0x26>
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <SysTick_Handler+0xf4>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <SysTick_Handler+0xf4>)
 800257c:	801a      	strh	r2, [r3, #0]
	if (debounceTimer)	debounceTimer--;
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <SysTick_Handler+0xf8>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <SysTick_Handler+0x3e>
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <SysTick_Handler+0xf8>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <SysTick_Handler+0xf8>)
 8002594:	801a      	strh	r2, [r3, #0]
	if (repeatTimer)	repeatTimer--;
 8002596:	4b2f      	ldr	r3, [pc, #188]	; (8002654 <SysTick_Handler+0xfc>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <SysTick_Handler+0x56>
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <SysTick_Handler+0xfc>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <SysTick_Handler+0xfc>)
 80025ac:	801a      	strh	r2, [r3, #0]
	if (delayTimer)		delayTimer--;
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <SysTick_Handler+0x100>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <SysTick_Handler+0x6e>
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <SysTick_Handler+0x100>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <SysTick_Handler+0x100>)
 80025c4:	801a      	strh	r2, [r3, #0]
	if (showMenuTimer) 	showMenuTimer--;
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <SysTick_Handler+0x104>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <SysTick_Handler+0x86>
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <SysTick_Handler+0x104>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <SysTick_Handler+0x104>)
 80025dc:	801a      	strh	r2, [r3, #0]
	if (softTimer2) 	softTimer2--;
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <SysTick_Handler+0x108>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <SysTick_Handler+0x9e>
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <SysTick_Handler+0x108>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <SysTick_Handler+0x108>)
 80025f4:	801a      	strh	r2, [r3, #0]
	if (softTimer3) 	softTimer3--;
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <SysTick_Handler+0x10c>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <SysTick_Handler+0xb6>
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <SysTick_Handler+0x10c>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <SysTick_Handler+0x10c>)
 800260c:	801a      	strh	r2, [r3, #0]
	if (softTimer5) 	softTimer5--;
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <SysTick_Handler+0x110>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <SysTick_Handler+0xce>
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <SysTick_Handler+0x110>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <SysTick_Handler+0x110>)
 8002624:	801a      	strh	r2, [r3, #0]
	if (whileTimer) 	whileTimer--;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <SysTick_Handler+0x114>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <SysTick_Handler+0xe6>
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <SysTick_Handler+0x114>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <SysTick_Handler+0x114>)
 800263c:	801a      	strh	r2, [r3, #0]

	sw_led_blinking();
 800263e:	f7ff f93d 	bl	80018bc <sw_led_blinking>
//	SW_IR_DECODED_EVENT();
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000558 	.word	0x20000558
 800264c:	200005e0 	.word	0x200005e0
 8002650:	200005d4 	.word	0x200005d4
 8002654:	200005d6 	.word	0x200005d6
 8002658:	20000556 	.word	0x20000556
 800265c:	200005ec 	.word	0x200005ec
 8002660:	200005da 	.word	0x200005da
 8002664:	200005ee 	.word	0x200005ee
 8002668:	200005f0 	.word	0x200005f0
 800266c:	200005d8 	.word	0x200005d8

08002670 <delay_ms>:
uint32_t millis(void) {
	return milis;
}
/*********************************************************/
/*********************************************************/
void delay_ms( uint16_t ms ) {
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	80fb      	strh	r3, [r7, #6]
	delayTimer = ms;
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <delay_ms+0x2c>)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	8013      	strh	r3, [r2, #0]
	while ( delayTimer ) {}
 8002680:	bf00      	nop
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <delay_ms+0x2c>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1fa      	bne.n	8002682 <delay_ms+0x12>
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000556 	.word	0x20000556

080026a0 <delay_us>:
/*********************************************************/

void delay_us( uint16_t us ) {
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
	  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <delay_us+0x4c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
	  uint32_t au32_ticks = ( uint32_t ) SystemCoreClock / 1000000;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <delay_us+0x50>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <delay_us+0x54>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0c9b      	lsrs	r3, r3, #18
 80026bc:	60bb      	str	r3, [r7, #8]
	  us *= au32_ticks;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	fb12 f303 	smulbb	r3, r2, r3
 80026c8:	80fb      	strh	r3, [r7, #6]
	  while ( (DWT->CYCCNT - au32_initial_ticks) < us - au32_ticks );
 80026ca:	bf00      	nop
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <delay_us+0x4c>)
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	88f9      	ldrh	r1, [r7, #6]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1acb      	subs	r3, r1, r3
 80026da:	429a      	cmp	r2, r3
 80026dc:	d3f6      	bcc.n	80026cc <delay_us+0x2c>
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e0001000 	.word	0xe0001000
 80026f0:	20000000 	.word	0x20000000
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <sw_i2c_autoend_off>:




static inline void sw_i2c_autoend_on(void)  { hI2Cx->I2C->CR2 |=  I2C_CR2_AUTOEND; }
static inline void sw_i2c_autoend_off(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <sw_i2c_autoend_off+0x24>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <sw_i2c_autoend_off+0x24>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000001c 	.word	0x2000001c

08002720 <sw_i2c_write_buff>:
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
}
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }

static void sw_i2c_write_buff( uint16_t nBytes, const uint8_t * pBuff ) {
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 800272c:	2300      	movs	r3, #0
 800272e:	81fb      	strh	r3, [r7, #14]
 8002730:	e027      	b.n	8002782 <sw_i2c_write_buff+0x62>
		while( sw_is_TXIS_flag_ready() == false) {}
 8002732:	bf00      	nop
}
static INLINE bool sw_is_TCR_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
}
static INLINE bool sw_is_TXIS_flag_ready(void) {
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <sw_i2c_write_buff+0x78>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <sw_i2c_write_buff+0x28>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <sw_i2c_write_buff+0x2a>
 8002748:	2300      	movs	r3, #0
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ef      	bne.n	8002734 <sw_i2c_write_buff+0x14>
		sw_i2c_write( *pBuff++ );
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	603a      	str	r2, [r7, #0]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	737b      	strb	r3, [r7, #13]
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
//	hI2Cx->I2C->ICR = I2C_ICR_STOPCF;
}
static INLINE I2CSTATUS sw_i2c_write( uint8_t data ) {
	hI2Cx->I2C->TXDR = data;								// First write byte
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <sw_i2c_write_buff+0x78>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	7b7a      	ldrb	r2, [r7, #13]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8002768:	bf00      	nop
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <sw_i2c_write_buff+0x78>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f7      	beq.n	800276a <sw_i2c_write_buff+0x4a>

	return I2C_Ok;
 800277a:	bf00      	nop
	for ( uint16_t i=0; i< nBytes; i++ ) {
 800277c:	89fb      	ldrh	r3, [r7, #14]
 800277e:	3301      	adds	r3, #1
 8002780:	81fb      	strh	r3, [r7, #14]
 8002782:	89fa      	ldrh	r2, [r7, #14]
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	429a      	cmp	r2, r3
 8002788:	d3d3      	bcc.n	8002732 <sw_i2c_write_buff+0x12>
	}
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	2000001c 	.word	0x2000001c

0800279c <sw_i2c_read_buff>:
static void sw_i2c_read_buff( uint16_t nBytes, uint8_t * pBuff ) {
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 80027a8:	2300      	movs	r3, #0
 80027aa:	81fb      	strh	r3, [r7, #14]
 80027ac:	e027      	b.n	80027fe <sw_i2c_read_buff+0x62>
		while( sw_is_RXNE_flag_ready() == false) {}
 80027ae:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <sw_i2c_read_buff+0x78>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <sw_i2c_read_buff+0x28>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <sw_i2c_read_buff+0x2a>
 80027c4:	2300      	movs	r3, #0
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ef      	bne.n	80027b0 <sw_i2c_read_buff+0x14>
		*pBuff++ = sw_i2c_read(DUMMY);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	603a      	str	r2, [r7, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	737a      	strb	r2, [r7, #13]
}
static INLINE uint8_t	sw_i2c_read( uint8_t dummy ) {
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 80027da:	bf00      	nop
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <sw_i2c_read_buff+0x78>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6992      	ldr	r2, [r2, #24]
 80027e4:	f002 0204 	and.w	r2, r2, #4
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d0f7      	beq.n	80027dc <sw_i2c_read_buff+0x40>
	return (hI2Cx->I2C->RXDR & 0xFF);
 80027ec:	4a09      	ldr	r2, [pc, #36]	; (8002814 <sw_i2c_read_buff+0x78>)
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 80027f8:	89fb      	ldrh	r3, [r7, #14]
 80027fa:	3301      	adds	r3, #1
 80027fc:	81fb      	strh	r3, [r7, #14]
 80027fe:	89fa      	ldrh	r2, [r7, #14]
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3d3      	bcc.n	80027ae <sw_i2c_read_buff+0x12>
	}
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	2000001c 	.word	0x2000001c

08002818 <sw_i2c_write_byte>:

I2CSTATUS sw_i2c_write_byte( uint8_t byte ) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <sw_i2c_write_byte+0x12c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	bf00      	nop
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 8002838:	f7ff ff5e 	bl	80026f8 <sw_i2c_autoend_off>
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <sw_i2c_write_byte+0x130>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	0412      	lsls	r2, r2, #16
 800284c:	4611      	mov	r1, r2
 800284e:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <sw_i2c_write_byte+0x130>)
 8002850:	430b      	orrs	r3, r1
 8002852:	6053      	str	r3, [r2, #4]
}
 8002854:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002868:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 800286a:	bf00      	nop
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <sw_i2c_write_byte+0x12c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f7      	beq.n	800286c <sw_i2c_write_byte+0x54>
	whileTimer = 5;
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <sw_i2c_write_byte+0x134>)
 800287e:	2205      	movs	r2, #5
 8002880:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8002882:	e004      	b.n	800288e <sw_i2c_write_byte+0x76>
		if ( whileTimer == 0 ) {
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <sw_i2c_write_byte+0x134>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <sw_i2c_write_byte+0x92>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <sw_i2c_write_byte+0x8a>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <sw_i2c_write_byte+0x8c>
 80028a2:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ed      	bne.n	8002884 <sw_i2c_write_byte+0x6c>
	return I2C_Ok;
 80028a8:	e000      	b.n	80028ac <sw_i2c_write_byte+0x94>
			return I2C_Error;
 80028aa:	bf00      	nop

	sw_i2c_nBytes(1);
	sw_i2c_start();
	while( sw_is_TXIS_flag_ready() == false ) {}	// All bytes send nBytes = 1
 80028ac:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <sw_i2c_write_byte+0x12c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <sw_i2c_write_byte+0xaa>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <sw_i2c_write_byte+0xac>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <sw_i2c_write_byte+0x96>
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <sw_i2c_write_byte+0x12c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	7bba      	ldrb	r2, [r7, #14]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80028dc:	bf00      	nop
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <sw_i2c_write_byte+0x12c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f7      	beq.n	80028de <sw_i2c_write_byte+0xc6>
	sw_i2c_write( byte );
	while( sw_is_TC_flag_ready() == false ) {}		// All bytes send nBytes = 1
 80028ee:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <sw_i2c_write_byte+0x12c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <sw_i2c_write_byte+0xec>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <sw_i2c_write_byte+0xee>
 8002904:	2300      	movs	r3, #0
 8002906:	f083 0301 	eor.w	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ef      	bne.n	80028f0 <sw_i2c_write_byte+0xd8>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <sw_i2c_write_byte+0x12c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8002924:	bf00      	nop
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <sw_i2c_write_byte+0x12c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f7      	beq.n	8002926 <sw_i2c_write_byte+0x10e>
}
 8002936:	bf00      	nop
	sw_i2c_stop();

	return I2C_Ok;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000001c 	.word	0x2000001c
 8002948:	40005400 	.word	0x40005400
 800294c:	200005d8 	.word	0x200005d8

08002950 <sw_i2c_read_block>:
	sw_i2c_stop();

	return byte;
}
I2CSTATUS sw_i2c_read_block( uint8_t  devAddr, uint8_t regAddr,
						uint16_t nBytes,  uint8_t * pBuff ) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
 800295c:	460b      	mov	r3, r1
 800295e:	71bb      	strb	r3, [r7, #6]
 8002960:	4613      	mov	r3, r2
 8002962:	80bb      	strh	r3, [r7, #4]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	74fb      	strb	r3, [r7, #19]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <sw_i2c_read_block+0x214>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002974:	f023 0303 	bic.w	r3, r3, #3
 8002978:	7cf9      	ldrb	r1, [r7, #19]
 800297a:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <sw_i2c_read_block+0x214>)
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6053      	str	r3, [r2, #4]
}
 8002984:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_byte( regAddr );
 8002986:	79bb      	ldrb	r3, [r7, #6]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff45 	bl	8002818 <sw_i2c_write_byte>
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
 800298e:	4b75      	ldr	r3, [pc, #468]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	bf00      	nop
	sw_i2c_read_dir();

	if ( nBytes <= I2C_CR2_NBYTE_MAX ) {
 80029a4:	88bb      	ldrh	r3, [r7, #4]
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d817      	bhi.n	80029da <sw_i2c_read_block+0x8a>
		CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 80029aa:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <sw_i2c_read_block+0x214>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <sw_i2c_read_block+0x214>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029bc:	605a      	str	r2, [r3, #4]
		sw_i2c_nBytes( nBytes );
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	74bb      	strb	r3, [r7, #18]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80029c4:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <sw_i2c_read_block+0x218>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80029cc:	7cba      	ldrb	r2, [r7, #18]
 80029ce:	0412      	lsls	r2, r2, #16
 80029d0:	4611      	mov	r1, r2
 80029d2:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <sw_i2c_read_block+0x218>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6053      	str	r3, [r2, #4]
}
 80029d8:	e016      	b.n	8002a08 <sw_i2c_read_block+0xb8>
	} else {
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 80029da:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <sw_i2c_read_block+0x214>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <sw_i2c_read_block+0x214>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	23ff      	movs	r3, #255	; 0xff
 80029f0:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <sw_i2c_read_block+0x218>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80029fa:	7c7a      	ldrb	r2, [r7, #17]
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	4611      	mov	r1, r2
 8002a00:	4a59      	ldr	r2, [pc, #356]	; (8002b68 <sw_i2c_read_block+0x218>)
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]
}
 8002a06:	bf00      	nop
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
	}

	uint16_t nBlock = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;
 8002a0c:	23fe      	movs	r3, #254	; 0xfe
 8002a0e:	82bb      	strh	r3, [r7, #20]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8002a10:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4b52      	ldr	r3, [pc, #328]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a22:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8002a24:	bf00      	nop
 8002a26:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f7      	beq.n	8002a26 <sw_i2c_read_block+0xd6>
	whileTimer = 5;
 8002a36:	4b4d      	ldr	r3, [pc, #308]	; (8002b6c <sw_i2c_read_block+0x21c>)
 8002a38:	2205      	movs	r2, #5
 8002a3a:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8002a3c:	e004      	b.n	8002a48 <sw_i2c_read_block+0xf8>
		if ( whileTimer == 0 ) {
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <sw_i2c_read_block+0x21c>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <sw_i2c_read_block+0x114>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8002a48:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <sw_i2c_read_block+0x10c>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <sw_i2c_read_block+0x10e>
 8002a5c:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ed      	bne.n	8002a3e <sw_i2c_read_block+0xee>
	return I2C_Ok;
 8002a62:	e000      	b.n	8002a66 <sw_i2c_read_block+0x116>
			return I2C_Error;
 8002a64:	bf00      	nop
	sw_i2c_start();
	while ( nBytes ) {
 8002a66:	e061      	b.n	8002b2c <sw_i2c_read_block+0x1dc>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	2bfe      	cmp	r3, #254	; 0xfe
 8002a6c:	d950      	bls.n	8002b10 <sw_i2c_read_block+0x1c0>
			if ( nBlock != 0) n = I2C_CR2_NBYTE_MAX;
 8002a6e:	8afb      	ldrh	r3, [r7, #22]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <sw_i2c_read_block+0x128>
 8002a74:	23ff      	movs	r3, #255	; 0xff
 8002a76:	82bb      	strh	r3, [r7, #20]

			sw_i2c_read_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX  );
 8002a78:	8afb      	ldrh	r3, [r7, #22]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	82fa      	strh	r2, [r7, #22]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4613      	mov	r3, r2
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	8abb      	ldrh	r3, [r7, #20]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fe83 	bl	800279c <sw_i2c_read_buff>
			while( sw_is_TCR_flag_ready() == false ) {}
 8002a96:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <sw_i2c_read_block+0x15c>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <sw_i2c_read_block+0x15e>
 8002aac:	2300      	movs	r3, #0
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ef      	bne.n	8002a98 <sw_i2c_read_block+0x148>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	3bff      	subs	r3, #255	; 0xff
 8002abc:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8002abe:	88bb      	ldrh	r3, [r7, #4]
 8002ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8002ac2:	d818      	bhi.n	8002af6 <sw_i2c_read_block+0x1a6>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ad6:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );						// Last nBytes < 255
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <sw_i2c_read_block+0x218>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002ae6:	7c3a      	ldrb	r2, [r7, #16]
 8002ae8:	0412      	lsls	r2, r2, #16
 8002aea:	4611      	mov	r1, r2
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <sw_i2c_read_block+0x218>)
 8002aee:	430b      	orrs	r3, r1
 8002af0:	6053      	str	r3, [r2, #4]
}
 8002af2:	bf00      	nop
 8002af4:	e01a      	b.n	8002b2c <sw_i2c_read_block+0x1dc>
 8002af6:	23ff      	movs	r3, #255	; 0xff
 8002af8:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <sw_i2c_read_block+0x218>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	0412      	lsls	r2, r2, #16
 8002b06:	4611      	mov	r1, r2
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <sw_i2c_read_block+0x218>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6053      	str	r3, [r2, #4]
 8002b0e:	e00d      	b.n	8002b2c <sw_i2c_read_block+0x1dc>
			}
			else
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		} else {
			sw_i2c_read_buff( nBytes, (uint8_t *)pBuff +  nBlock*I2C_CR2_NBYTE_MAX );
 8002b10:	8afa      	ldrh	r2, [r7, #22]
 8002b12:	4613      	mov	r3, r2
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	441a      	add	r2, r3
 8002b1e:	88bb      	ldrh	r3, [r7, #4]
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe3a 	bl	800279c <sw_i2c_read_buff>
			nBytes = 0;									// End of while() loop
 8002b28:	2300      	movs	r3, #0
 8002b2a:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d19a      	bne.n	8002a68 <sw_i2c_read_block+0x118>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b44:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8002b46:	bf00      	nop
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <sw_i2c_read_block+0x214>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f7      	beq.n	8002b48 <sw_i2c_read_block+0x1f8>
}
 8002b58:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000001c 	.word	0x2000001c
 8002b68:	40005400 	.word	0x40005400
 8002b6c:	200005d8 	.word	0x200005d8

08002b70 <sw_i2c_write_block>:
I2CSTATUS sw_i2c_write_block( uint8_t devAddr, uint8_t regAddr,
						 uint16_t nBytes, const uint8_t * pBuff ) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	71bb      	strb	r3, [r7, #6]
 8002b80:	4613      	mov	r3, r2
 8002b82:	80bb      	strh	r3, [r7, #4]
	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
 8002b84:	4ba4      	ldr	r3, [pc, #656]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	4ba2      	ldr	r3, [pc, #648]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	61da      	str	r2, [r3, #28]
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002b9e:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	7c79      	ldrb	r1, [r7, #17]
 8002bb0:	4a99      	ldr	r2, [pc, #612]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6053      	str	r3, [r2, #4]
}
 8002bba:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_autoend_off();
 8002bbc:	f7ff fd9c 	bl	80026f8 <sw_i2c_autoend_off>
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8002bc0:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4b93      	ldr	r3, [pc, #588]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	bf00      	nop
	sw_i2c_write_dir();

	nBytes++;											// nBytes + 1 (regAddr byte)
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	80bb      	strh	r3, [r7, #4]
	if ( nBytes < I2C_CR2_NBYTE_MAX + 1) {
 8002bdc:	88bb      	ldrh	r3, [r7, #4]
 8002bde:	2bff      	cmp	r3, #255	; 0xff
 8002be0:	d811      	bhi.n	8002c06 <sw_i2c_write_block+0x96>
		sw_i2c_nBytes( nBytes );
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002be8:	4b8c      	ldr	r3, [pc, #560]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002bf0:	7c3a      	ldrb	r2, [r7, #16]
 8002bf2:	0412      	lsls	r2, r2, #16
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4a89      	ldr	r2, [pc, #548]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6053      	str	r3, [r2, #4]
}
 8002bfc:	bf00      	nop
		nBytes--;
 8002bfe:	88bb      	ldrh	r3, [r7, #4]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	80bb      	strh	r3, [r7, #4]
 8002c04:	e016      	b.n	8002c34 <sw_i2c_write_block+0xc4>
 8002c06:	23ff      	movs	r3, #255	; 0xff
 8002c08:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002c0a:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	0412      	lsls	r2, r2, #16
 8002c16:	4611      	mov	r1, r2
 8002c18:	4a80      	ldr	r2, [pc, #512]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]
}
 8002c1e:	bf00      	nop
	} else {
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8002c20:	4b7d      	ldr	r3, [pc, #500]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c32:	605a      	str	r2, [r3, #4]
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8002c34:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c46:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8002c48:	bf00      	nop
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f7      	beq.n	8002c4a <sw_i2c_write_block+0xda>
	whileTimer = 5;
 8002c5a:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <sw_i2c_write_block+0x2b0>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8002c60:	e004      	b.n	8002c6c <sw_i2c_write_block+0xfc>
		if ( whileTimer == 0 ) {
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <sw_i2c_write_block+0x2b0>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <sw_i2c_write_block+0x118>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <sw_i2c_write_block+0x110>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <sw_i2c_write_block+0x112>
 8002c80:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1ed      	bne.n	8002c62 <sw_i2c_write_block+0xf2>
	return I2C_Ok;
 8002c86:	e000      	b.n	8002c8a <sw_i2c_write_block+0x11a>
			return I2C_Error;
 8002c88:	bf00      	nop
	}

	sw_i2c_start();
	while ( sw_is_TXIS_flag_ready() == false ) {}
 8002c8a:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002c8c:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <sw_i2c_write_block+0x130>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <sw_i2c_write_block+0x132>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <sw_i2c_write_block+0x11c>
 8002cac:	79bb      	ldrb	r3, [r7, #6]
 8002cae:	73bb      	strb	r3, [r7, #14]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	7bba      	ldrb	r2, [r7, #14]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8002cba:	bf00      	nop
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f7      	beq.n	8002cbc <sw_i2c_write_block+0x14c>
	sw_i2c_write( regAddr ); 							// First byte, address
	while ( sw_is_TXIS_flag_ready() == false ) {}
 8002ccc:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002cce:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <sw_i2c_write_block+0x172>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <sw_i2c_write_block+0x174>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f083 0301 	eor.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ef      	bne.n	8002cce <sw_i2c_write_block+0x15e>

	uint16_t nBlock = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;			//
 8002cf2:	23fe      	movs	r3, #254	; 0xfe
 8002cf4:	827b      	strh	r3, [r7, #18]
	uint8_t shift	= 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	757b      	strb	r3, [r7, #21]
	while ( nBytes ) {
 8002cfa:	e070      	b.n	8002dde <sw_i2c_write_block+0x26e>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 8002cfc:	88bb      	ldrh	r3, [r7, #4]
 8002cfe:	2bfe      	cmp	r3, #254	; 0xfe
 8002d00:	d95d      	bls.n	8002dbe <sw_i2c_write_block+0x24e>
			if ( nBlock == 0) {
 8002d02:	8afb      	ldrh	r3, [r7, #22]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <sw_i2c_write_block+0x1ae>
				n = I2C_CR2_NBYTE_MAX - 1;
 8002d08:	23fe      	movs	r3, #254	; 0xfe
 8002d0a:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff );
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fd05 	bl	8002720 <sw_i2c_write_buff>
				nBlock++;
 8002d16:	8afb      	ldrh	r3, [r7, #22]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	82fb      	strh	r3, [r7, #22]
 8002d1c:	e010      	b.n	8002d40 <sw_i2c_write_block+0x1d0>
			} else {
				n = I2C_CR2_NBYTE_MAX;
 8002d1e:	23ff      	movs	r3, #255	; 0xff
 8002d20:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX - 1 );
 8002d22:	8afb      	ldrh	r3, [r7, #22]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	82fa      	strh	r2, [r7, #22]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	3b01      	subs	r3, #1
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	441a      	add	r2, r3
 8002d36:	8a7b      	ldrh	r3, [r7, #18]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fcf0 	bl	8002720 <sw_i2c_write_buff>
			}
			while( sw_is_TCR_flag_ready() == false ) {}
 8002d40:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 8002d42:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <sw_i2c_write_block+0x1e6>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <sw_i2c_write_block+0x1e8>
 8002d56:	2300      	movs	r3, #0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ef      	bne.n	8002d42 <sw_i2c_write_block+0x1d2>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	3bff      	subs	r3, #255	; 0xff
 8002d66:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8002d68:	88bb      	ldrh	r3, [r7, #4]
 8002d6a:	2bfe      	cmp	r3, #254	; 0xfe
 8002d6c:	d81a      	bhi.n	8002da4 <sw_i2c_write_block+0x234>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d80:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );
 8002d82:	88bb      	ldrh	r3, [r7, #4]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002d88:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002d90:	7b7a      	ldrb	r2, [r7, #13]
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	4611      	mov	r1, r2
 8002d96:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6053      	str	r3, [r2, #4]
}
 8002d9c:	bf00      	nop
				shift = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	757b      	strb	r3, [r7, #21]
 8002da2:	e01c      	b.n	8002dde <sw_i2c_write_block+0x26e>
 8002da4:	23ff      	movs	r3, #255	; 0xff
 8002da6:	733b      	strb	r3, [r7, #12]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002db0:	7b3a      	ldrb	r2, [r7, #12]
 8002db2:	0412      	lsls	r2, r2, #16
 8002db4:	4611      	mov	r1, r2
 8002db6:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <sw_i2c_write_block+0x2ac>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6053      	str	r3, [r2, #4]
 8002dbc:	e00f      	b.n	8002dde <sw_i2c_write_block+0x26e>
			} else {
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
			}
		} else {
			sw_i2c_write_buff( nBytes , (uint8_t *)pBuff + nBlock*I2C_CR2_NBYTE_MAX - shift );
 8002dbe:	8afa      	ldrh	r2, [r7, #22]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	7d7b      	ldrb	r3, [r7, #21]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	441a      	add	r2, r3
 8002dd0:	88bb      	ldrh	r3, [r7, #4]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fca3 	bl	8002720 <sw_i2c_write_buff>
			nBytes = 0;									// End of while() loop
 8002dda:	2300      	movs	r3, #0
 8002ddc:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d18b      	bne.n	8002cfc <sw_i2c_write_block+0x18c>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8002df8:	bf00      	nop
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <sw_i2c_write_block+0x2a8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f7      	beq.n	8002dfa <sw_i2c_write_block+0x28a>
}
 8002e0a:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000001c 	.word	0x2000001c
 8002e1c:	40005400 	.word	0x40005400
 8002e20:	200005d8 	.word	0x200005d8

08002e24 <sw_i2c_write_reg>:


I2CSTATUS sw_i2c_write_reg( uint8_t devAddr, uint8_t reg, uint8_t data ) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	71bb      	strb	r3, [r7, #6]
 8002e32:	4613      	mov	r3, r2
 8002e34:	717b      	strb	r3, [r7, #5]
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002e3a:	4b60      	ldr	r3, [pc, #384]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	7bb9      	ldrb	r1, [r7, #14]
 8002e4c:	4a5b      	ldr	r2, [pc, #364]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	6053      	str	r3, [r2, #4]
}
 8002e56:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	bf00      	nop
//	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 8002e6e:	f7ff fc43 	bl	80026f8 <sw_i2c_autoend_off>
 8002e72:	2302      	movs	r3, #2
 8002e74:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002e76:	4b52      	ldr	r3, [pc, #328]	; (8002fc0 <sw_i2c_write_reg+0x19c>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	0412      	lsls	r2, r2, #16
 8002e82:	4611      	mov	r1, r2
 8002e84:	4a4e      	ldr	r2, [pc, #312]	; (8002fc0 <sw_i2c_write_reg+0x19c>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6053      	str	r3, [r2, #4]
}
 8002e8a:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9e:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8002ea0:	bf00      	nop
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f7      	beq.n	8002ea2 <sw_i2c_write_reg+0x7e>
	whileTimer = 5;
 8002eb2:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <sw_i2c_write_reg+0x1a0>)
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8002eb8:	e004      	b.n	8002ec4 <sw_i2c_write_reg+0xa0>
		if ( whileTimer == 0 ) {
 8002eba:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <sw_i2c_write_reg+0x1a0>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <sw_i2c_write_reg+0xbc>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <sw_i2c_write_reg+0xb4>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <sw_i2c_write_reg+0xb6>
 8002ed8:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ed      	bne.n	8002eba <sw_i2c_write_reg+0x96>
	return I2C_Ok;
 8002ede:	e000      	b.n	8002ee2 <sw_i2c_write_reg+0xbe>
			return I2C_Error;
 8002ee0:	bf00      	nop

	sw_i2c_nBytes(2);
	sw_i2c_start(); 		while ( sw_is_TXIS_flag_ready() == false ) {}
 8002ee2:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <sw_i2c_write_reg+0xd4>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <sw_i2c_write_reg+0xd6>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f083 0301 	eor.w	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ef      	bne.n	8002ee4 <sw_i2c_write_reg+0xc0>
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	737b      	strb	r3, [r7, #13]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	7b7a      	ldrb	r2, [r7, #13]
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8002f12:	bf00      	nop
 8002f14:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f7      	beq.n	8002f14 <sw_i2c_write_reg+0xf0>
	sw_i2c_write( reg ); 	while ( sw_is_TXIS_flag_ready() == false );
 8002f24:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <sw_i2c_write_reg+0x116>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <sw_i2c_write_reg+0x118>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f083 0301 	eor.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ef      	bne.n	8002f26 <sw_i2c_write_reg+0x102>
 8002f46:	797b      	ldrb	r3, [r7, #5]
 8002f48:	733b      	strb	r3, [r7, #12]
	hI2Cx->I2C->TXDR = data;								// First write byte
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	7b3a      	ldrb	r2, [r7, #12]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8002f54:	bf00      	nop
 8002f56:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f7      	beq.n	8002f56 <sw_i2c_write_reg+0x132>
	sw_i2c_write( data ); 	while ( sw_is_TC_flag_ready() 	== false );
 8002f66:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <sw_i2c_write_reg+0x158>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <sw_i2c_write_reg+0x15a>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f083 0301 	eor.w	r3, r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ef      	bne.n	8002f68 <sw_i2c_write_reg+0x144>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9a:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8002f9c:	bf00      	nop
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <sw_i2c_write_reg+0x198>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f7      	beq.n	8002f9e <sw_i2c_write_reg+0x17a>
}
 8002fae:	bf00      	nop
	sw_i2c_stop();
	return I2C_Ok;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2000001c 	.word	0x2000001c
 8002fc0:	40005400 	.word	0x40005400
 8002fc4:	200005d8 	.word	0x200005d8

08002fc8 <sw_i2c_read_reg>:


I2CSTATUS sw_i2c_read_reg( uint8_t devAddr, uint8_t reg, uint8_t * data ) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	603a      	str	r2, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	71bb      	strb	r3, [r7, #6]
	I2CSTATUS status = I2C_Ok;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002fe0:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <sw_i2c_read_reg+0x248>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fec:	f023 0303 	bic.w	r3, r3, #3
 8002ff0:	7b79      	ldrb	r1, [r7, #13]
 8002ff2:	4a87      	ldr	r2, [pc, #540]	; (8003210 <sw_i2c_read_reg+0x248>)
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6053      	str	r3, [r2, #4]
}
 8002ffc:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { hI2Cx->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8002ffe:	4b84      	ldr	r3, [pc, #528]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4b82      	ldr	r3, [pc, #520]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	bf00      	nop

	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_dir();
	sw_i2c_autoend_off();
 8003014:	f7ff fb70 	bl	80026f8 <sw_i2c_autoend_off>
 8003018:	2301      	movs	r3, #1
 800301a:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 800301c:	4b7d      	ldr	r3, [pc, #500]	; (8003214 <sw_i2c_read_reg+0x24c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003024:	7bba      	ldrb	r2, [r7, #14]
 8003026:	0412      	lsls	r2, r2, #16
 8003028:	4611      	mov	r1, r2
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <sw_i2c_read_reg+0x24c>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6053      	str	r3, [r2, #4]
}
 8003030:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8003032:	4b77      	ldr	r3, [pc, #476]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <sw_i2c_read_reg+0x248>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003044:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8003046:	bf00      	nop
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <sw_i2c_read_reg+0x248>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f7      	beq.n	8003048 <sw_i2c_read_reg+0x80>
	whileTimer = 5;
 8003058:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <sw_i2c_read_reg+0x250>)
 800305a:	2205      	movs	r2, #5
 800305c:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 800305e:	e006      	b.n	800306e <sw_i2c_read_reg+0xa6>
		if ( whileTimer == 0 ) {
 8003060:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <sw_i2c_read_reg+0x250>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <sw_i2c_read_reg+0xa6>
			return I2C_Error;
 800306a:	2301      	movs	r3, #1
 800306c:	e00d      	b.n	800308a <sw_i2c_read_reg+0xc2>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800306e:	4b68      	ldr	r3, [pc, #416]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <sw_i2c_read_reg+0xba>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <sw_i2c_read_reg+0xbc>
 8003082:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1eb      	bne.n	8003060 <sw_i2c_read_reg+0x98>
	return I2C_Ok;
 8003088:	2300      	movs	r3, #0
	sw_i2c_nBytes(1);
	status = sw_i2c_start();
 800308a:	73fb      	strb	r3, [r7, #15]
	while ( sw_is_TXIS_flag_ready() == false );
 800308c:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800308e:	4b60      	ldr	r3, [pc, #384]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <sw_i2c_read_reg+0xda>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <sw_i2c_read_reg+0xdc>
 80030a2:	2300      	movs	r3, #0
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ef      	bne.n	800308e <sw_i2c_read_reg+0xc6>
 80030ae:	79bb      	ldrb	r3, [r7, #6]
 80030b0:	733b      	strb	r3, [r7, #12]
	hI2Cx->I2C->TXDR = data;								// First write byte
 80030b2:	4b57      	ldr	r3, [pc, #348]	; (8003210 <sw_i2c_read_reg+0x248>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	7b3a      	ldrb	r2, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80030bc:	bf00      	nop
 80030be:	4b54      	ldr	r3, [pc, #336]	; (8003210 <sw_i2c_read_reg+0x248>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f7      	beq.n	80030be <sw_i2c_read_reg+0xf6>
	sw_i2c_write( reg ); 	while ( sw_is_TC_flag_ready() 	== false );
 80030ce:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80030d0:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <sw_i2c_read_reg+0x248>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <sw_i2c_read_reg+0x11c>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <sw_i2c_read_reg+0x11e>
 80030e4:	2300      	movs	r3, #0
 80030e6:	f083 0301 	eor.w	r3, r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ef      	bne.n	80030d0 <sw_i2c_read_reg+0x108>
static INLINE void sw_i2c_read_dir (void) { hI2Cx->I2C->CR2 |= I2C_CR2_RD_WRN; }
 80030f0:	4b47      	ldr	r3, [pc, #284]	; (8003210 <sw_i2c_read_reg+0x248>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b45      	ldr	r3, [pc, #276]	; (8003210 <sw_i2c_read_reg+0x248>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	bf00      	nop
 8003106:	2301      	movs	r3, #1
 8003108:	72fb      	strb	r3, [r7, #11]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 800310a:	4b42      	ldr	r3, [pc, #264]	; (8003214 <sw_i2c_read_reg+0x24c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003112:	7afa      	ldrb	r2, [r7, #11]
 8003114:	0412      	lsls	r2, r2, #16
 8003116:	4611      	mov	r1, r2
 8003118:	4a3e      	ldr	r2, [pc, #248]	; (8003214 <sw_i2c_read_reg+0x24c>)
 800311a:	430b      	orrs	r3, r1
 800311c:	6053      	str	r3, [r2, #4]
}
 800311e:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <sw_i2c_read_reg+0x248>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003132:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8003134:	bf00      	nop
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <sw_i2c_read_reg+0x248>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f7      	beq.n	8003136 <sw_i2c_read_reg+0x16e>
	whileTimer = 5;
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <sw_i2c_read_reg+0x250>)
 8003148:	2205      	movs	r2, #5
 800314a:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 800314c:	e004      	b.n	8003158 <sw_i2c_read_reg+0x190>
		if ( whileTimer == 0 ) {
 800314e:	4b32      	ldr	r3, [pc, #200]	; (8003218 <sw_i2c_read_reg+0x250>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <sw_i2c_read_reg+0x1ac>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8003158:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <sw_i2c_read_reg+0x248>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <sw_i2c_read_reg+0x1a4>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <sw_i2c_read_reg+0x1a6>
 800316c:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ed      	bne.n	800314e <sw_i2c_read_reg+0x186>
	return I2C_Ok;
 8003172:	e000      	b.n	8003176 <sw_i2c_read_reg+0x1ae>
			return I2C_Error;
 8003174:	bf00      	nop

	sw_i2c_read_dir();
	sw_i2c_nBytes(1);
	sw_i2c_start();			while ( sw_is_RXNE_flag_ready() == false );
 8003176:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <sw_i2c_read_reg+0x248>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <sw_i2c_read_reg+0x1c4>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <sw_i2c_read_reg+0x1c6>
 800318c:	2300      	movs	r3, #0
 800318e:	f083 0301 	eor.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ef      	bne.n	8003178 <sw_i2c_read_reg+0x1b0>
 8003198:	2300      	movs	r3, #0
 800319a:	72bb      	strb	r3, [r7, #10]
	while ( ( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 800319c:	bf00      	nop
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f7      	beq.n	800319e <sw_i2c_read_reg+0x1d6>
	return (hI2Cx->I2C->RXDR & 0xFF);
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b2da      	uxtb	r2, r3

	*data = sw_i2c_read(DUMMY);	while ( sw_is_TC_flag_ready()	== false );
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	bf00      	nop
	if(hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <sw_i2c_read_reg+0x20a>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <sw_i2c_read_reg+0x20c>
 80031d2:	2300      	movs	r3, #0
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ef      	bne.n	80031be <sw_i2c_read_reg+0x1f6>
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80031f2:	bf00      	nop
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <sw_i2c_read_reg+0x248>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f7      	beq.n	80031f4 <sw_i2c_read_reg+0x22c>
}
 8003204:	bf00      	nop
	sw_i2c_stop();

	return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000001c 	.word	0x2000001c
 8003214:	40005400 	.word	0x40005400
 8003218:	200005d8 	.word	0x200005d8

0800321c <sw_i2c_simple_init>:

void sw_i2c_simple_init(void) {
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
#ifdef STM32L4
	RCC->APB1RSTR1 |=  RCC_APB1RSTR1_I2C1RST;
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 8003226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800322a:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_I2C1RST;
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 8003232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003236:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1ENR1  |= RCC_APB1ENR1_I2C1EN;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <sw_i2c_simple_init+0xc8>)
 800323e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1RSTR |=  RCC_APB1RSTR_I2C1RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
	RCC->APB1ENR  |= RCC_APB1ENR_I2C1EN;
#endif

	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 8003244:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
	while( (hI2Cx->I2C->CR1 & I2C_CR1_PE) );
 8003258:	bf00      	nop
 800325a:	4b23      	ldr	r3, [pc, #140]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f7      	bne.n	800325a <sw_i2c_simple_init+0x3e>

	gpio_pin_cfg( hI2Cx->scl_port,  hI2Cx->scl_pin,  hI2Cx->alternateFun );
 800326a:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6898      	ldr	r0, [r3, #8]
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	8a19      	ldrh	r1, [r3, #16]
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	889b      	ldrh	r3, [r3, #4]
 800327c:	461a      	mov	r2, r3
 800327e:	f7fe fa15 	bl	80016ac <gpio_pin_cfg>
	gpio_pin_cfg( hI2Cx->sda_port,  hI2Cx->sda_pin,  hI2Cx->alternateFun );
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68d8      	ldr	r0, [r3, #12]
 8003288:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	8a59      	ldrh	r1, [r3, #18]
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	889b      	ldrh	r3, [r3, #4]
 8003294:	461a      	mov	r2, r3
 8003296:	f7fe fa09 	bl	80016ac <gpio_pin_cfg>
	gpio_pin_HI ( hI2Cx->scl_port,  hI2Cx->scl_pin );
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	8a1b      	ldrh	r3, [r3, #16]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f7fe faa7 	bl	80017fc <gpio_pin_HI>
	gpio_pin_HI ( hI2Cx->sda_port,  hI2Cx->sda_pin );
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	8a5b      	ldrh	r3, [r3, #18]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f7fe fa9d 	bl	80017fc <gpio_pin_HI>

	hI2Cx->I2C->TIMINGR  = (uint32_t)I2C_TIMING_80MHz_100KHz;
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <sw_i2c_simple_init+0xd0>)
 80032ca:	611a      	str	r2, [r3, #16]
	SET_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <sw_i2c_simple_init+0xcc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	2000001c 	.word	0x2000001c
 80032ec:	10909cec 	.word	0x10909cec

080032f0 <sw_i2c_IsDeviceReady>:

I2CSTATUS sw_i2c_IsDeviceReady( uint8_t devAddr, uint32_t trials, uint16_t delay ) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80bb      	strh	r3, [r7, #4]
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( hI2Cx->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003310:	f023 0303 	bic.w	r3, r3, #3
 8003314:	7bf9      	ldrb	r1, [r7, #15]
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6053      	str	r3, [r2, #4]
}
 8003320:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	while (trials--) {
 8003322:	e042      	b.n	80033aa <sw_i2c_IsDeviceReady+0xba>
	hI2Cx->I2C->CR2 |= I2C_CR2_START;
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003336:	605a      	str	r2, [r3, #4]
	while( (hI2Cx->I2C->CR2 & I2C_CR2_START ) == 0 ) {}
 8003338:	bf00      	nop
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f7      	beq.n	800333a <sw_i2c_IsDeviceReady+0x4a>
	whileTimer = 5;
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <sw_i2c_IsDeviceReady+0xe8>)
 800334c:	2205      	movs	r2, #5
 800334e:	801a      	strh	r2, [r3, #0]
	while ( sw_is_NACK_flag_ready() ) {
 8003350:	e004      	b.n	800335c <sw_i2c_IsDeviceReady+0x6c>
		if ( whileTimer == 0 ) {
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <sw_i2c_IsDeviceReady+0xe8>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <sw_i2c_IsDeviceReady+0x88>
	if(hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <sw_i2c_IsDeviceReady+0x80>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <sw_i2c_IsDeviceReady+0x82>
 8003370:	2300      	movs	r3, #0
	while ( sw_is_NACK_flag_ready() ) {
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ed      	bne.n	8003352 <sw_i2c_IsDeviceReady+0x62>
	return I2C_Ok;
 8003376:	e000      	b.n	800337a <sw_i2c_IsDeviceReady+0x8a>
			return I2C_Error;
 8003378:	bf00      	nop
	hI2Cx->I2C->CR2 |= I2C_CR2_STOP;
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338c:	605a      	str	r2, [r3, #4]
	while ( (hI2Cx->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 800338e:	bf00      	nop
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f7      	beq.n	8003390 <sw_i2c_IsDeviceReady+0xa0>
}
 80033a0:	bf00      	nop
		sw_i2c_start();
		sw_i2c_stop();
		delay_ms( delay );
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f963 	bl	8002670 <delay_ms>
	while (trials--) {
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	603a      	str	r2, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1b7      	bne.n	8003324 <sw_i2c_IsDeviceReady+0x34>
	}
	if ( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) {
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <sw_i2c_IsDeviceReady+0xe4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <sw_i2c_IsDeviceReady+0xd8>
		return I2C_Error;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <sw_i2c_IsDeviceReady+0xda>
	}
	return I2C_Ok;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2000001c 	.word	0x2000001c
 80033d8:	200005d8 	.word	0x200005d8

080033dc <MPU6050__fastRegister8>:
static float	actualThreshold;
static bool		useCalibrate;

/***************************** Static functions ****************************/
// Fast read 8-bit from register
static uint8_t 	MPU6050__fastRegister8( uint8_t reg ) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]

	sw_i2c_read_reg( MPU6050_ADDRESS, reg, &value );
 80033ea:	f107 020f 	add.w	r2, r7, #15
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4619      	mov	r1, r3
 80033f2:	20d2      	movs	r0, #210	; 0xd2
 80033f4:	f7ff fde8 	bl	8002fc8 <sw_i2c_read_reg>

	return value;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <MPU6050__readRegister8>:
// Read 8-bit from register
static uint8_t 	MPU6050__readRegister8( uint8_t reg ) {
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]

	sw_i2c_read_reg( MPU6050_ADDRESS, reg, &value );
 8003410:	f107 020f 	add.w	r2, r7, #15
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4619      	mov	r1, r3
 8003418:	20d2      	movs	r0, #210	; 0xd2
 800341a:	f7ff fdd5 	bl	8002fc8 <sw_i2c_read_reg>

	return value;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <MPU6050__writeRegister8>:
// Write 8-bit to register
static void 	MPU6050__writeRegister8( uint8_t reg, uint8_t value ) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	460a      	mov	r2, r1
 8003432:	71fb      	strb	r3, [r7, #7]
 8003434:	4613      	mov	r3, r2
 8003436:	71bb      	strb	r3, [r7, #6]
	sw_i2c_write_reg( MPU6050_ADDRESS, reg, value );
 8003438:	79ba      	ldrb	r2, [r7, #6]
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	4619      	mov	r1, r3
 800343e:	20d2      	movs	r0, #210	; 0xd2
 8003440:	f7ff fcf0 	bl	8002e24 <sw_i2c_write_reg>
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <MPU6050__writeRegisterBit>:
	uint8_t value;
	value = MPU6050__readRegister8(reg);
	return ((value >> pos) & 1);
}
// Write register bit
static void	MPU6050__writeRegisterBit( uint8_t reg, uint8_t pos, bool state ) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
 8003456:	460b      	mov	r3, r1
 8003458:	71bb      	strb	r3, [r7, #6]
 800345a:	4613      	mov	r3, r2
 800345c:	717b      	strb	r3, [r7, #5]
	uint8_t value;
	value = MPU6050__readRegister8(reg);
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ffce 	bl	8003402 <MPU6050__readRegister8>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]

	if (state) {
 800346a:	797b      	ldrb	r3, [r7, #5]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <MPU6050__writeRegisterBit+0x3a>
		value |= (1 << pos);
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	2201      	movs	r2, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	b25a      	sxtb	r2, r3
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	4313      	orrs	r3, r2
 8003480:	b25b      	sxtb	r3, r3
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e00b      	b.n	800349e <MPU6050__writeRegisterBit+0x52>
	} else {
		value &= ~(1 << pos);
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	2201      	movs	r2, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	b25b      	sxtb	r3, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	b25a      	sxtb	r2, r3
 8003494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003498:	4013      	ands	r3, r2
 800349a:	b25b      	sxtb	r3, r3
 800349c:	73fb      	strb	r3, [r7, #15]
	}
	MPU6050__writeRegister8(reg, value );
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ffbf 	bl	8003428 <MPU6050__writeRegister8>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <MPU6050__setThreshold>:
/****************************************************************************/

// Set threshold value
void MPU6050__setThreshold( uint8_t multiple ) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
	if (multiple > 0) {
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <MPU6050__setThreshold+0x74>
// If not calibrated, need calibrate
		if (!useCalibrate) {
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <MPU6050__setThreshold+0xa4>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <MPU6050__setThreshold+0x24>
			MPU6050__calibrateGyro( 50 );
 80034d2:	2032      	movs	r0, #50	; 0x32
 80034d4:	f000 f848 	bl	8003568 <MPU6050__calibrateGyro>
		}
// Calculate threshold vectors
		tg.XAxis = th.XAxis * multiple;
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <MPU6050__setThreshold+0xa8>)
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ec:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <MPU6050__setThreshold+0xac>)
 80034ee:	edc3 7a00 	vstr	s15, [r3]
		tg.YAxis = th.YAxis * multiple;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <MPU6050__setThreshold+0xa8>)
 80034f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <MPU6050__setThreshold+0xac>)
 8003508:	edc3 7a01 	vstr	s15, [r3, #4]
		tg.ZAxis = th.ZAxis * multiple;
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <MPU6050__setThreshold+0xa8>)
 800350e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <MPU6050__setThreshold+0xac>)
 8003522:	edc3 7a02 	vstr	s15, [r3, #8]
 8003526:	e00b      	b.n	8003540 <MPU6050__setThreshold+0x8c>
	} else {
		// No threshold
		tg.XAxis = 0;
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <MPU6050__setThreshold+0xac>)
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
		tg.YAxis = 0;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <MPU6050__setThreshold+0xac>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
		tg.ZAxis = 0;
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <MPU6050__setThreshold+0xac>)
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
	}
// Remember old threshold value
	actualThreshold = multiple;
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MPU6050__setThreshold+0xb0>)
 800354c:	edc3 7a00 	vstr	s15, [r3]
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200005a4 	.word	0x200005a4
 800355c:	2000058c 	.word	0x2000058c
 8003560:	20000574 	.word	0x20000574
 8003564:	200005a0 	.word	0x200005a0

08003568 <MPU6050__calibrateGyro>:

// Calibrate algorithm
void MPU6050__calibrateGyro( uint8_t samples ) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
	// Set calibrate
	useCalibrate = true;
 8003572:	4b87      	ldr	r3, [pc, #540]	; (8003790 <MPU6050__calibrateGyro+0x228>)
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]

	// Reset values
	float sumX = 0;
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
	float sumY = 0;
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
	float sumZ = 0;
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
	float sigmaX = 0;
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
	float sigmaY = 0;
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
	float sigmaZ = 0;
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	613b      	str	r3, [r7, #16]

	// Read n-samples
	for ( uint8_t i = 0; i < samples; ++i) {
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	e04c      	b.n	800363c <MPU6050__calibrateGyro+0xd4>
		MPU6050__readRawGyro();
 80035a2:	f000 fa09 	bl	80039b8 <MPU6050__readRawGyro>
		sumX += rg.XAxis;
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		sumY += rg.YAxis;
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80035be:	ed97 7a08 	vldr	s14, [r7, #32]
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	edc7 7a08 	vstr	s15, [r7, #32]
		sumZ += rg.ZAxis;
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80035d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	edc7 7a07 	vstr	s15, [r7, #28]

		sigmaX += rg.XAxis * rg.XAxis;
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035de:	ed93 7a00 	vldr	s14, [r3]
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80035f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f4:	edc7 7a06 	vstr	s15, [r7, #24]
		sigmaY += rg.YAxis * rg.YAxis;
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 80035fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 8003600:	edd3 7a01 	vldr	s15, [r3, #4]
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	ed97 7a05 	vldr	s14, [r7, #20]
 800360c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003610:	edc7 7a05 	vstr	s15, [r7, #20]
		sigmaZ += rg.ZAxis * rg.ZAxis;
 8003614:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 8003616:	ed93 7a02 	vldr	s14, [r3, #8]
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <MPU6050__calibrateGyro+0x22c>)
 800361c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003624:	ed97 7a04 	vldr	s14, [r7, #16]
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	edc7 7a04 	vstr	s15, [r7, #16]

		delay_ms(5);
 8003630:	2005      	movs	r0, #5
 8003632:	f7ff f81d 	bl	8002670 <delay_ms>
	for ( uint8_t i = 0; i < samples; ++i) {
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d3ae      	bcc.n	80035a2 <MPU6050__calibrateGyro+0x3a>
	}

	// Calculate delta vectors
	dg.XAxis = sumX / samples;
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800364e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003656:	4b50      	ldr	r3, [pc, #320]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 8003658:	edc3 7a00 	vstr	s15, [r3]
	dg.YAxis = sumY / samples;
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003666:	edd7 6a08 	vldr	s13, [r7, #32]
 800366a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 8003670:	edc3 7a01 	vstr	s15, [r3, #4]
	dg.ZAxis = sumZ / samples;
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800367e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 8003688:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate threshold vectors
	th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
 800368c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003690:	eddf 6a42 	vldr	s13, [pc, #264]	; 800379c <MPU6050__calibrateGyro+0x234>
 8003694:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003698:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 800369a:	edd3 6a00 	vldr	s13, [r3]
 800369e:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ac:	ee17 0a90 	vmov	r0, s15
 80036b0:	f7fc fef2 	bl	8000498 <__aeabi_f2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	ec43 2b10 	vmov	d0, r2, r3
 80036bc:	f000 ff38 	bl	8004530 <sqrt>
 80036c0:	ec53 2b10 	vmov	r2, r3, d0
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd f9ee 	bl	8000aa8 <__aeabi_d2f>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4a34      	ldr	r2, [pc, #208]	; (80037a0 <MPU6050__calibrateGyro+0x238>)
 80036d0:	6013      	str	r3, [r2, #0]
	th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
 80036d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800379c <MPU6050__calibrateGyro+0x234>
 80036da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 80036e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80036e4:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 80036e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f2:	ee17 0a90 	vmov	r0, s15
 80036f6:	f7fc fecf 	bl	8000498 <__aeabi_f2d>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	ec43 2b10 	vmov	d0, r2, r3
 8003702:	f000 ff15 	bl	8004530 <sqrt>
 8003706:	ec53 2b10 	vmov	r2, r3, d0
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fd f9cb 	bl	8000aa8 <__aeabi_d2f>
 8003712:	4603      	mov	r3, r0
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <MPU6050__calibrateGyro+0x238>)
 8003716:	6053      	str	r3, [r2, #4]
	th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
 8003718:	edd7 7a04 	vldr	s15, [r7, #16]
 800371c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800379c <MPU6050__calibrateGyro+0x234>
 8003720:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003724:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 8003726:	edd3 6a02 	vldr	s13, [r3, #8]
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <MPU6050__calibrateGyro+0x230>)
 800372c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003738:	ee17 0a90 	vmov	r0, s15
 800373c:	f7fc feac 	bl	8000498 <__aeabi_f2d>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	ec43 2b10 	vmov	d0, r2, r3
 8003748:	f000 fef2 	bl	8004530 <sqrt>
 800374c:	ec53 2b10 	vmov	r2, r3, d0
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd f9a8 	bl	8000aa8 <__aeabi_d2f>
 8003758:	4603      	mov	r3, r0
 800375a:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <MPU6050__calibrateGyro+0x238>)
 800375c:	6093      	str	r3, [r2, #8]

	// If already set threshold, recalculate threshold vectors
	if (actualThreshold > 0) {
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <MPU6050__calibrateGyro+0x23c>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	dc00      	bgt.n	8003770 <MPU6050__calibrateGyro+0x208>
		MPU6050__setThreshold( actualThreshold );
	}
}
 800376e:	e00b      	b.n	8003788 <MPU6050__calibrateGyro+0x220>
		MPU6050__setThreshold( actualThreshold );
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <MPU6050__calibrateGyro+0x23c>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800377a:	edc7 7a00 	vstr	s15, [r7]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fe96 	bl	80034b4 <MPU6050__setThreshold>
}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200005a4 	.word	0x200005a4
 8003794:	2000055c 	.word	0x2000055c
 8003798:	20000580 	.word	0x20000580
 800379c:	42480000 	.word	0x42480000
 80037a0:	2000058c 	.word	0x2000058c
 80037a4:	200005a0 	.word	0x200005a0

080037a8 <MPU6050__init>:


bool MPU6050__init( mpu6050_dps_t scale, mpu6050_range_t range ) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	460a      	mov	r2, r1
 80037b2:	71fb      	strb	r3, [r7, #7]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71bb      	strb	r3, [r7, #6]
//	sw_i2c_simple_init();

	// Reset calibrate values
	dg.XAxis 		= 0;
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <MPU6050__init+0x84>)
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
	dg.YAxis 		= 0;
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <MPU6050__init+0x84>)
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
	dg.ZAxis 		= 0;
 80037c8:	4b18      	ldr	r3, [pc, #96]	; (800382c <MPU6050__init+0x84>)
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
	useCalibrate 	= false;
 80037d0:	4b17      	ldr	r3, [pc, #92]	; (8003830 <MPU6050__init+0x88>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]

	// Reset threshold values
	tg.XAxis 		= 0;
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <MPU6050__init+0x8c>)
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
	tg.YAxis 		= 0;
 80037de:	4b15      	ldr	r3, [pc, #84]	; (8003834 <MPU6050__init+0x8c>)
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
	tg.ZAxis 		= 0;
 80037e6:	4b13      	ldr	r3, [pc, #76]	; (8003834 <MPU6050__init+0x8c>)
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
	actualThreshold = 0;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <MPU6050__init+0x90>)
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

	// Check MPU6050 Who Am I Register
	if ( MPU6050__fastRegister8( MPU6050_REG_WHO_AM_I ) != 0x68 ) {
 80037f6:	2075      	movs	r0, #117	; 0x75
 80037f8:	f7ff fdf0 	bl	80033dc <MPU6050__fastRegister8>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b68      	cmp	r3, #104	; 0x68
 8003800:	d001      	beq.n	8003806 <MPU6050__init+0x5e>
		return false;
 8003802:	2300      	movs	r3, #0
 8003804:	e00e      	b.n	8003824 <MPU6050__init+0x7c>
	}

	// Set Clock Source
	MPU6050__setClockSource( MPU6050_CLOCK_PLL_XGYRO );
 8003806:	2001      	movs	r0, #1
 8003808:	f000 f8ac 	bl	8003964 <MPU6050__setClockSource>

	// Set Scale & Range
	MPU6050__setScale( scale );
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f814 	bl	800383c <MPU6050__setScale>
	MPU6050__setRange( range );
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f85a 	bl	80038d0 <MPU6050__setRange>

	// Disable Sleep Mode
	MPU6050__setSleepEnabled( false );
 800381c:	2000      	movs	r0, #0
 800381e:	f000 f8bc 	bl	800399a <MPU6050__setSleepEnabled>

	return true;
 8003822:	2301      	movs	r3, #1
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000580 	.word	0x20000580
 8003830:	200005a4 	.word	0x200005a4
 8003834:	20000574 	.word	0x20000574
 8003838:	200005a0 	.word	0x200005a0

0800383c <MPU6050__setScale>:

void MPU6050__setScale( mpu6050_dps_t scale ) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch (scale) {
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d81b      	bhi.n	8003884 <MPU6050__setScale+0x48>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <MPU6050__setScale+0x18>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	0800386d 	.word	0x0800386d
 800385c:	08003875 	.word	0x08003875
 8003860:	0800387d 	.word	0x0800387d
	case MPU6050_SCALE_250DPS:
		dpsPerDigit = 0.007633f;
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MPU6050__setScale+0x80>)
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <MPU6050__setScale+0x84>)
 8003868:	601a      	str	r2, [r3, #0]
		break;
 800386a:	e00c      	b.n	8003886 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_500DPS:
		dpsPerDigit = 0.015267f;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <MPU6050__setScale+0x80>)
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <MPU6050__setScale+0x88>)
 8003870:	601a      	str	r2, [r3, #0]
		break;
 8003872:	e008      	b.n	8003886 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_1000DPS:
		dpsPerDigit = 0.030487f;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MPU6050__setScale+0x80>)
 8003876:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <MPU6050__setScale+0x8c>)
 8003878:	601a      	str	r2, [r3, #0]
		break;
 800387a:	e004      	b.n	8003886 <MPU6050__setScale+0x4a>
	case MPU6050_SCALE_2000DPS:
		dpsPerDigit = 0.060975f;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MPU6050__setScale+0x80>)
 800387e:	4a13      	ldr	r2, [pc, #76]	; (80038cc <MPU6050__setScale+0x90>)
 8003880:	601a      	str	r2, [r3, #0]
		break;
 8003882:	e000      	b.n	8003886 <MPU6050__setScale+0x4a>
	default:
		break;
 8003884:	bf00      	nop
	}
	value = MPU6050__readRegister8( MPU6050_REG_GYRO_CONFIG);
 8003886:	201b      	movs	r0, #27
 8003888:	f7ff fdbb 	bl	8003402 <MPU6050__readRegister8>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	f023 0318 	bic.w	r3, r3, #24
 8003896:	73fb      	strb	r3, [r7, #15]
	value |= (scale << 3);
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	b25a      	sxtb	r2, r3
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_GYRO_CONFIG, value );
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4619      	mov	r1, r3
 80038ac:	201b      	movs	r0, #27
 80038ae:	f7ff fdbb 	bl	8003428 <MPU6050__writeRegister8>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000598 	.word	0x20000598
 80038c0:	3bfa1e3f 	.word	0x3bfa1e3f
 80038c4:	3c7a2270 	.word	0x3c7a2270
 80038c8:	3cf9bfdf 	.word	0x3cf9bfdf
 80038cc:	3d79c0ec 	.word	0x3d79c0ec

080038d0 <MPU6050__setRange>:
	value &= 0b00011000;
	value >>= 3;
	return ( mpu6050_dps_t) value;
}

void MPU6050__setRange( mpu6050_range_t range) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	switch (range) {
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d81b      	bhi.n	8003918 <MPU6050__setRange+0x48>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <MPU6050__setRange+0x18>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003901 	.word	0x08003901
 80038f0:	08003909 	.word	0x08003909
 80038f4:	08003911 	.word	0x08003911
	case MPU6050_RANGE_2G:
		rangePerDigit = 0.000061f;
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <MPU6050__setRange+0x80>)
 80038fa:	4a16      	ldr	r2, [pc, #88]	; (8003954 <MPU6050__setRange+0x84>)
 80038fc:	601a      	str	r2, [r3, #0]
		break;
 80038fe:	e00c      	b.n	800391a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_4G:
		rangePerDigit = 0.000122f;
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <MPU6050__setRange+0x80>)
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <MPU6050__setRange+0x88>)
 8003904:	601a      	str	r2, [r3, #0]
		break;
 8003906:	e008      	b.n	800391a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_8G:
		rangePerDigit = 0.000244f;
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <MPU6050__setRange+0x80>)
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <MPU6050__setRange+0x8c>)
 800390c:	601a      	str	r2, [r3, #0]
		break;
 800390e:	e004      	b.n	800391a <MPU6050__setRange+0x4a>
	case MPU6050_RANGE_16G:
		rangePerDigit = 0.0004882f;
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <MPU6050__setRange+0x80>)
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <MPU6050__setRange+0x90>)
 8003914:	601a      	str	r2, [r3, #0]
		break;
 8003916:	e000      	b.n	800391a <MPU6050__setRange+0x4a>
	default:
		break;
 8003918:	bf00      	nop
	}

	value = MPU6050__readRegister8( MPU6050_REG_ACCEL_CONFIG);
 800391a:	201c      	movs	r0, #28
 800391c:	f7ff fd71 	bl	8003402 <MPU6050__readRegister8>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	f023 0318 	bic.w	r3, r3, #24
 800392a:	73fb      	strb	r3, [r7, #15]
	value |= (range << 3);
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	b25a      	sxtb	r2, r3
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4313      	orrs	r3, r2
 8003938:	b25b      	sxtb	r3, r3
 800393a:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_ACCEL_CONFIG, value );
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4619      	mov	r1, r3
 8003940:	201c      	movs	r0, #28
 8003942:	f7ff fd71 	bl	8003428 <MPU6050__writeRegister8>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000059c 	.word	0x2000059c
 8003954:	387fda40 	.word	0x387fda40
 8003958:	38ffda40 	.word	0x38ffda40
 800395c:	397fda40 	.word	0x397fda40
 8003960:	39fff518 	.word	0x39fff518

08003964 <MPU6050__setClockSource>:
	value &= 0b11111000;
	value |= dlpf;
	MPU6050__writeRegister8( MPU6050_REG_CONFIG, value );
}

void MPU6050__setClockSource( mpu6050_clockSource_t source) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	value = MPU6050__readRegister8( MPU6050_REG_PWR_MGMT_1);
 800396e:	206b      	movs	r0, #107	; 0x6b
 8003970:	f7ff fd47 	bl	8003402 <MPU6050__readRegister8>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111000;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	73fb      	strb	r3, [r7, #15]
	value |= source;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	4313      	orrs	r3, r2
 8003986:	73fb      	strb	r3, [r7, #15]
	MPU6050__writeRegister8( MPU6050_REG_PWR_MGMT_1, value );
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	4619      	mov	r1, r3
 800398c:	206b      	movs	r0, #107	; 0x6b
 800398e:	f7ff fd4b 	bl	8003428 <MPU6050__writeRegister8>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <MPU6050__setSleepEnabled>:

bool MPU6050__getSleepEnabled(void) {
	return MPU6050__readRegisterBit( MPU6050_REG_PWR_MGMT_1, 6);
}

void MPU6050__setSleepEnabled( bool state) {
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	71fb      	strb	r3, [r7, #7]
	MPU6050__writeRegisterBit( MPU6050_REG_PWR_MGMT_1, 6, state);
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	461a      	mov	r2, r3
 80039a8:	2106      	movs	r1, #6
 80039aa:	206b      	movs	r0, #107	; 0x6b
 80039ac:	f7ff fd4e 	bl	800344c <MPU6050__writeRegisterBit>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <MPU6050__readRawGyro>:
	na.ZAxis = ra.ZAxis * rangePerDigit;

	return na;
}

struct Vector MPU6050__readRawGyro(void) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	; 0x30
 80039bc:	af00      	add	r7, sp, #0
	uint8_t buff[6];
	sw_i2c_read_block( MPU6050_ADDRESS, MPU6050_REG_GYRO_XOUT_H, 6, buff );
 80039be:	f107 0314 	add.w	r3, r7, #20
 80039c2:	2206      	movs	r2, #6
 80039c4:	2143      	movs	r1, #67	; 0x43
 80039c6:	20d2      	movs	r0, #210	; 0xd2
 80039c8:	f7fe ffc2 	bl	8002950 <sw_i2c_read_block>
	uint8_t xha = buff[0];
 80039cc:	7d3b      	ldrb	r3, [r7, #20]
 80039ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t xla = buff[1];
 80039d2:	7d7b      	ldrb	r3, [r7, #21]
 80039d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t yha = buff[2];
 80039d8:	7dbb      	ldrb	r3, [r7, #22]
 80039da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t yla = buff[3];
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t zha = buff[4];
 80039e4:	7e3b      	ldrb	r3, [r7, #24]
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t zla = buff[5];
 80039ea:	7e7b      	ldrb	r3, [r7, #25]
 80039ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	rg.XAxis = xha << 8 | xla;
 80039f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039f4:	021a      	lsls	r2, r3, #8
 80039f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039fa:	4313      	orrs	r3, r2
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <MPU6050__readRawGyro+0xb8>)
 8003a06:	edc3 7a00 	vstr	s15, [r3]
	rg.YAxis = yha << 8 | yla;
 8003a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a0e:	021a      	lsls	r2, r3, #8
 8003a10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a14:	4313      	orrs	r3, r2
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <MPU6050__readRawGyro+0xb8>)
 8003a20:	edc3 7a01 	vstr	s15, [r3, #4]
	rg.ZAxis = zha << 8 | zla;
 8003a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a28:	021a      	lsls	r2, r3, #8
 8003a2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <MPU6050__readRawGyro+0xb8>)
 8003a3a:	edc3 7a02 	vstr	s15, [r3, #8]

	return rg;
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <MPU6050__readRawGyro+0xb8>)
 8003a40:	f107 031c 	add.w	r3, r7, #28
 8003a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a4a:	69f9      	ldr	r1, [r7, #28]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	ee06 1a90 	vmov	s13, r1
 8003a54:	ee07 2a10 	vmov	s14, r2
 8003a58:	ee07 3a90 	vmov	s15, r3
}
 8003a5c:	eeb0 0a66 	vmov.f32	s0, s13
 8003a60:	eef0 0a47 	vmov.f32	s1, s14
 8003a64:	eeb0 1a67 	vmov.f32	s2, s15
 8003a68:	3730      	adds	r7, #48	; 0x30
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000055c 	.word	0x2000055c

08003a74 <MPU6050__readNormalizeGyro>:

struct Vector MPU6050__readNormalizeGyro(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
	MPU6050__readRawGyro();
 8003a7a:	f7ff ff9d 	bl	80039b8 <MPU6050__readRawGyro>

	if (useCalibrate) {
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <MPU6050__readNormalizeGyro+0x194>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d030      	beq.n	8003ae8 <MPU6050__readNormalizeGyro+0x74>
		ng.XAxis = (rg.XAxis - dg.XAxis) * dpsPerDigit;
 8003a86:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <MPU6050__readNormalizeGyro+0x19c>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
 8003a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa0:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003aa2:	edc3 7a00 	vstr	s15, [r3]
		ng.YAxis = (rg.YAxis - dg.YAxis) * dpsPerDigit;
 8003aa6:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003aac:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <MPU6050__readNormalizeGyro+0x19c>)
 8003aae:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003ac2:	edc3 7a01 	vstr	s15, [r3, #4]
		ng.ZAxis = (rg.ZAxis - dg.ZAxis) * dpsPerDigit;
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003ac8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <MPU6050__readNormalizeGyro+0x19c>)
 8003ace:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003ae2:	edc3 7a02 	vstr	s15, [r3, #8]
 8003ae6:	e020      	b.n	8003b2a <MPU6050__readNormalizeGyro+0xb6>
	} else {
		ng.XAxis = rg.XAxis * dpsPerDigit;
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003aea:	ed93 7a00 	vldr	s14, [r3]
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003afa:	edc3 7a00 	vstr	s15, [r3]
		ng.YAxis = rg.YAxis * dpsPerDigit;
 8003afe:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003b06:	edd3 7a00 	vldr	s15, [r3]
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b10:	edc3 7a01 	vstr	s15, [r3, #4]
		ng.ZAxis = rg.ZAxis * dpsPerDigit;
 8003b14:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <MPU6050__readNormalizeGyro+0x198>)
 8003b16:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <MPU6050__readNormalizeGyro+0x1a0>)
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b26:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	if (actualThreshold) {
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <MPU6050__readNormalizeGyro+0x1a8>)
 8003b2c:	edd3 7a00 	vldr	s15, [r3]
 8003b30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d04d      	beq.n	8003bd6 <MPU6050__readNormalizeGyro+0x162>
		if (abs(ng.XAxis) < tg.XAxis)
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b44:	ee17 3a90 	vmov	r3, s15
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bfb8      	it	lt
 8003b4c:	425b      	neglt	r3, r3
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b56:	4b32      	ldr	r3, [pc, #200]	; (8003c20 <MPU6050__readNormalizeGyro+0x1ac>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	d503      	bpl.n	8003b6e <MPU6050__readNormalizeGyro+0xfa>
			ng.XAxis = 0;
 8003b66:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
		if (abs(ng.YAxis) < tg.YAxis)
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b70:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b78:	ee17 3a90 	vmov	r3, s15
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	425b      	neglt	r3, r3
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b8a:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <MPU6050__readNormalizeGyro+0x1ac>)
 8003b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d503      	bpl.n	8003ba2 <MPU6050__readNormalizeGyro+0x12e>
			ng.YAxis = 0;
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	605a      	str	r2, [r3, #4]
		if (abs(ng.ZAxis) < tg.ZAxis)
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003ba4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bac:	ee17 3a90 	vmov	r3, s15
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bfb8      	it	lt
 8003bb4:	425b      	neglt	r3, r3
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <MPU6050__readNormalizeGyro+0x1ac>)
 8003bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d503      	bpl.n	8003bd6 <MPU6050__readNormalizeGyro+0x162>
			ng.ZAxis = 0;
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
	}
	return ng;
 8003bd6:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <MPU6050__readNormalizeGyro+0x1a4>)
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	ee06 1a90 	vmov	s13, r1
 8003bec:	ee07 2a10 	vmov	s14, r2
 8003bf0:	ee07 3a90 	vmov	s15, r3
}
 8003bf4:	eeb0 0a66 	vmov.f32	s0, s13
 8003bf8:	eef0 0a47 	vmov.f32	s1, s14
 8003bfc:	eeb0 1a67 	vmov.f32	s2, s15
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200005a4 	.word	0x200005a4
 8003c0c:	2000055c 	.word	0x2000055c
 8003c10:	20000580 	.word	0x20000580
 8003c14:	20000598 	.word	0x20000598
 8003c18:	20000568 	.word	0x20000568
 8003c1c:	200005a0 	.word	0x200005a0
 8003c20:	20000574 	.word	0x20000574

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db0a      	blt.n	8003c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	490c      	ldr	r1, [pc, #48]	; (8003c70 <__NVIC_SetPriority+0x4c>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c4c:	e00a      	b.n	8003c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4908      	ldr	r1, [pc, #32]	; (8003c74 <__NVIC_SetPriority+0x50>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	440b      	add	r3, r1
 8003c62:	761a      	strb	r2, [r3, #24]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c88:	d301      	bcc.n	8003c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00f      	b.n	8003cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <SysTick_Config+0x40>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c96:	210f      	movs	r1, #15
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	f7ff ffc2 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <SystemClock_Config>:
			 );
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	607b      	str	r3, [r7, #4]
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <SystemClock_Config+0x190>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	495f      	ldr	r1, [pc, #380]	; (8003e4c <SystemClock_Config+0x190>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 8003cd6:	bf00      	nop
 8003cd8:	4b5c      	ldr	r3, [pc, #368]	; (8003e4c <SystemClock_Config+0x190>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f9      	beq.n	8003cd8 <SystemClock_Config+0x1c>
}
 8003ce4:	bf00      	nop
	MODIFY_REG( PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS_0 );
 8003ce6:	4b5a      	ldr	r3, [pc, #360]	; (8003e50 <SystemClock_Config+0x194>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cee:	4a58      	ldr	r2, [pc, #352]	; (8003e50 <SystemClock_Config+0x194>)
 8003cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf4:	6013      	str	r3, [r2, #0]
	while ( (PWR->SR2 & PWR_SR2_VOSF) ) {}
 8003cf6:	bf00      	nop
 8003cf8:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <SystemClock_Config+0x194>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f9      	bne.n	8003cf8 <SystemClock_Config+0x3c>
}
 8003d04:	bf00      	nop
 8003d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d0a:	613b      	str	r3, [r7, #16]
	switch ( clock ) {
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d004      	beq.n	8003d1e <SystemClock_Config+0x62>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d006      	beq.n	8003d2a <SystemClock_Config+0x6e>
			break;
 8003d1c:	e00c      	b.n	8003d38 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSIRDY;
 8003d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d22:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSION;
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <SystemClock_Config+0x198>)
 8003d26:	60bb      	str	r3, [r7, #8]
			break;
 8003d28:	e006      	b.n	8003d38 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSERDY;
 8003d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d2e:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSEBYP | RCC_CR_HSEON;
 8003d30:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8003d34:	60bb      	str	r3, [r7, #8]
			break;
 8003d36:	bf00      	nop
	SET_BIT( RCC->CR, reg ) ;
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4946      	ldr	r1, [pc, #280]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 8003d44:	bf00      	nop
 8003d46:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f9      	beq.n	8003d46 <SystemClock_Config+0x8a>
}
 8003d52:	bf00      	nop
	uint16_t pllm = 1;			// 1, 2 - 8
 8003d54:	2301      	movs	r3, #1
 8003d56:	837b      	strh	r3, [r7, #26]
	uint16_t plln = 10;			// 8, 9 - 86
 8003d58:	230a      	movs	r3, #10
 8003d5a:	833b      	strh	r3, [r7, #24]
	uint16_t pllr = 2;			// 2, 4, 6, 8,
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	82fb      	strh	r3, [r7, #22]
	pllr = (uint8_t)pllr/2 - 1;
 8003d60:	8afb      	ldrh	r3, [r7, #22]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	82fb      	strh	r3, [r7, #22]
	MODIFY_REG( RCC->PLLCFGR,
 8003d6e:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <SystemClock_Config+0x1a0>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	8b7a      	ldrh	r2, [r7, #26]
 8003d78:	3a01      	subs	r2, #1
 8003d7a:	0111      	lsls	r1, r2, #4
 8003d7c:	8b3a      	ldrh	r2, [r7, #24]
 8003d7e:	0212      	lsls	r2, r2, #8
 8003d80:	4311      	orrs	r1, r2
 8003d82:	8afa      	ldrh	r2, [r7, #22]
 8003d84:	0652      	lsls	r2, r2, #25
 8003d86:	430a      	orrs	r2, r1
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4a33      	ldr	r2, [pc, #204]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	60d3      	str	r3, [r2, #12]
}
 8003d90:	bf00      	nop
 8003d92:	2302      	movs	r3, #2
 8003d94:	61fb      	str	r3, [r7, #28]
	SET_BIT( RCC->PLLCFGR, source );
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	492f      	ldr	r1, [pc, #188]	; (8003e58 <SystemClock_Config+0x19c>)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60cb      	str	r3, [r1, #12]
}
 8003da2:	bf00      	nop
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 8003da4:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <SystemClock_Config+0x19c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <SystemClock_Config+0x19c>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC->PLLCFGR, RCC_PLLCFGR_PLLREN );
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <SystemClock_Config+0x19c>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <SystemClock_Config+0x19c>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dba:	60d3      	str	r3, [r2, #12]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 8003dbc:	bf00      	nop
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <SystemClock_Config+0x19c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f9      	beq.n	8003dbe <SystemClock_Config+0x102>
}
 8003dca:	bf00      	nop
	MODIFY_REG( RCC->CFGR,
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <SystemClock_Config+0x19c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <SystemClock_Config+0x19c>)
 8003dd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dda:	6093      	str	r3, [r2, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	2303      	movs	r3, #3
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
	switch ( pllSource ) {
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d009      	beq.n	8003dfc <SystemClock_Config+0x140>
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d80f      	bhi.n	8003e0e <SystemClock_Config+0x152>
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d006      	beq.n	8003e02 <SystemClock_Config+0x146>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d006      	beq.n	8003e08 <SystemClock_Config+0x14c>
			break;
 8003dfa:	e008      	b.n	8003e0e <SystemClock_Config+0x152>
			sourceCheck = RCC_CFGR_SWS_PLL;
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	623b      	str	r3, [r7, #32]
			break;
 8003e00:	e006      	b.n	8003e10 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSI;
 8003e02:	2304      	movs	r3, #4
 8003e04:	623b      	str	r3, [r7, #32]
			break;
 8003e06:	e003      	b.n	8003e10 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSE;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	623b      	str	r3, [r7, #32]
			break;
 8003e0c:	e000      	b.n	8003e10 <SystemClock_Config+0x154>
			break;
 8003e0e:	bf00      	nop
	SET_BIT( RCC->CFGR, pllSource);
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <SystemClock_Config+0x19c>)
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4910      	ldr	r1, [pc, #64]	; (8003e58 <SystemClock_Config+0x19c>)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	608b      	str	r3, [r1, #8]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 8003e1c:	bf00      	nop
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <SystemClock_Config+0x19c>)
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f9      	beq.n	8003e1e <SystemClock_Config+0x162>
}
 8003e2a:	bf00      	nop

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 8003e2c:	f7fd f834 	bl	8000e98 <SystemCoreClockUpdate>
	SysTick_Config( SystemCoreClock / 1000 );	// Systick on 1 ms
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <SystemClock_Config+0x1a4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <SystemClock_Config+0x1a8>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff1b 	bl	8003c78 <SysTick_Config>
}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	; 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40007000 	.word	0x40007000
 8003e54:	00080100 	.word	0x00080100
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	f9ff808f 	.word	0xf9ff808f
 8003e60:	20000000 	.word	0x20000000
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <__NVIC_EnableIRQ>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	db0b      	blt.n	8003e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	f003 021f 	and.w	r2, r3, #31
 8003e80:	4907      	ldr	r1, [pc, #28]	; (8003ea0 <__NVIC_EnableIRQ+0x38>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2001      	movs	r0, #1
 8003e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <sw_hardware_TWI_write_buf>:

#include "sw_i2c_simple_v2.h"
#include "sw_vcnl4010.h"


static void sw_hardware_TWI_write_buf(uint8_t devAddr, uint8_t reg, uint16_t nBytes, uint8_t *pBuff ) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4603      	mov	r3, r0
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	71bb      	strb	r3, [r7, #6]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80bb      	strh	r3, [r7, #4]
	sw_i2c_write_block( devAddr, reg, nBytes, pBuff );
 8003eb8:	88ba      	ldrh	r2, [r7, #4]
 8003eba:	79b9      	ldrb	r1, [r7, #6]
 8003ebc:	79f8      	ldrb	r0, [r7, #7]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	f7fe fe56 	bl	8002b70 <sw_i2c_write_block>
	delay_us(100);
 8003ec4:	2064      	movs	r0, #100	; 0x64
 8003ec6:	f7fe fbeb 	bl	80026a0 <delay_us>
};
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <sw_hardware_TWI_read_buf>:
static void sw_hardware_TWI_read_buf( uint8_t devAddr, uint8_t reg, uint16_t nBytes, uint8_t *pBuff ) {
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	71bb      	strb	r3, [r7, #6]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80bb      	strh	r3, [r7, #4]
	sw_i2c_read_block ( devAddr, reg, nBytes, pBuff  );
 8003ee6:	88ba      	ldrh	r2, [r7, #4]
 8003ee8:	79b9      	ldrb	r1, [r7, #6]
 8003eea:	79f8      	ldrb	r0, [r7, #7]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f7fe fd2f 	bl	8002950 <sw_i2c_read_block>
	delay_us(100);
 8003ef2:	2064      	movs	r0, #100	; 0x64
 8003ef4:	f7fe fbd4 	bl	80026a0 <delay_us>
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <vcnl4010_write_reg>:

static void vcnl4010_write_reg( uint8_t devReg, uint8_t data ) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	460a      	mov	r2, r1
 8003f0a:	71fb      	strb	r3, [r7, #7]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71bb      	strb	r3, [r7, #6]
	sw_i2c_write_reg( VCNL4010_I2C_ADDR, devReg, data );
 8003f10:	79ba      	ldrb	r2, [r7, #6]
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4619      	mov	r1, r3
 8003f16:	2026      	movs	r0, #38	; 0x26
 8003f18:	f7fe ff84 	bl	8002e24 <sw_i2c_write_reg>
	delay_us(100);
 8003f1c:	2064      	movs	r0, #100	; 0x64
 8003f1e:	f7fe fbbf 	bl	80026a0 <delay_us>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <vcnl4010_read_reg>:
static void vcnl4010_read_reg( uint8_t devReg, uint8_t *data ) {
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	6039      	str	r1, [r7, #0]
 8003f34:	71fb      	strb	r3, [r7, #7]
	sw_i2c_read_reg( VCNL4010_I2C_ADDR, devReg, data );
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	2026      	movs	r0, #38	; 0x26
 8003f3e:	f7ff f843 	bl	8002fc8 <sw_i2c_read_reg>
	delay_us(100);
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f7fe fbac 	bl	80026a0 <delay_us>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <register_measure_callback>:
volatile static uint8_t measureDataReadyFlag	= 0;

static T_RESULTS results;				// Kontener na pomiary

static void ( *measure_callback )( T_RESULTS *results );
void register_measure_callback( void (*callback)( T_RESULTS *results) ) {
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	measure_callback = callback;
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <register_measure_callback+0x1c>)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	200005b0 	.word	0x200005b0

08003f70 <vcnl4010_set_led_current>:

void vcnl4010_set_led_current( uint8_t current ) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
	if (current > 20)
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	2b14      	cmp	r3, #20
 8003f7e:	d901      	bls.n	8003f84 <vcnl4010_set_led_current+0x14>
		current = 20;
 8003f80:	2314      	movs	r3, #20
 8003f82:	71fb      	strb	r3, [r7, #7]
	vcnl4010_write_reg( VCNL4010_IR_LED_CURRENT_REG, current );
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	4619      	mov	r1, r3
 8003f88:	2083      	movs	r0, #131	; 0x83
 8003f8a:	f7ff ffb9 	bl	8003f00 <vcnl4010_write_reg>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <vcnl4010_set_frequency>:

void vcnl4010_set_frequency( uint8_t freq ) {
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_reg = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]
	vcnl4010_read_reg( VCNL4010_MOD_TIMING, &temp_reg);
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	4619      	mov	r1, r3
 8003faa:	208f      	movs	r0, #143	; 0x8f
 8003fac:	f7ff ffbd 	bl	8003f2a <vcnl4010_read_reg>

	temp_reg = temp_reg & ~((1<<3)|(1<<4));		// Maskujemy 4 i 3 bit rejestru ~(b00011000)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	f023 0318 	bic.w	r3, r3, #24
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	73fb      	strb	r3, [r7, #15]
	freq = freq << 3;							// Ustawiamy freq na 3 i 4 bicie
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	71fb      	strb	r3, [r7, #7]
	temp_reg = temp_reg | freq;					// Ustawiamy bity freq w rejestrze
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	73fb      	strb	r3, [r7, #15]

	vcnl4010_write_reg( VCNL4010_MOD_TIMING, temp_reg );
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	208f      	movs	r0, #143	; 0x8f
 8003fd0:	f7ff ff96 	bl	8003f00 <vcnl4010_write_reg>
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <vcnl_set_threshold>:

static void vcnl_set_threshold( const uint8_t THRESHOLD, uint16_t threshold ) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	71fb      	strb	r3, [r7, #7]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80bb      	strh	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = (uint8_t)(threshold>>8)&0x00FF;
 8003fec:	88bb      	ldrh	r3, [r7, #4]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t)(threshold & 0x00FF);
 8003ff6:	88bb      	ldrh	r3, [r7, #4]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	737b      	strb	r3, [r7, #13]
	if ( !THRESHOLD )
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <vcnl_set_threshold+0x36>
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG, 	 2, buf );
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	2202      	movs	r2, #2
 8004008:	218a      	movs	r1, #138	; 0x8a
 800400a:	2026      	movs	r0, #38	; 0x26
 800400c:	f7ff ff4a 	bl	8003ea4 <sw_hardware_TWI_write_buf>
	else
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG + 2, 2, buf );

}
 8004010:	e006      	b.n	8004020 <vcnl_set_threshold+0x44>
		sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG + 2, 2, buf );
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	2202      	movs	r2, #2
 8004018:	218c      	movs	r1, #140	; 0x8c
 800401a:	2026      	movs	r0, #38	; 0x26
 800401c:	f7ff ff42 	bl	8003ea4 <sw_hardware_TWI_write_buf>
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <vcnl4010_init>:

uint8_t vcnl4010_init( void ) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	uint8_t revision, control = INT_PROXI_READY_ENABLE;
 800402e:	2308      	movs	r3, #8
 8004030:	71fb      	strb	r3, [r7, #7]

	vcnl4010_read_reg( VCNL4010_PROD_ID_REVISION_REG, &revision);
 8004032:	1dbb      	adds	r3, r7, #6
 8004034:	4619      	mov	r1, r3
 8004036:	2081      	movs	r0, #129	; 0x81
 8004038:	f7ff ff77 	bl	8003f2a <vcnl4010_read_reg>
	if ( (revision & 0xF0) != 0x20 ) {
 800403c:	79bb      	ldrb	r3, [r7, #6]
 800403e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004042:	2b20      	cmp	r3, #32
 8004044:	d001      	beq.n	800404a <vcnl4010_init+0x22>
		return 0;					// Error
 8004046:	2300      	movs	r3, #0
 8004048:	e034      	b.n	80040b4 <vcnl4010_init+0x8c>
	}
	vcnl4010_set_led_current( 20 );
 800404a:	2014      	movs	r0, #20
 800404c:	f7ff ff90 	bl	8003f70 <vcnl4010_set_led_current>
	vcnl4010_set_frequency( VCNL4010_3M125 );
 8004050:	2003      	movs	r0, #3
 8004052:	f7ff ffa0 	bl	8003f96 <vcnl4010_set_frequency>
	vcnl_set_threshold( VCNL4010_THRESHOLD_LOW,  0xaabb );
 8004056:	f64a 21bb 	movw	r1, #43707	; 0xaabb
 800405a:	2000      	movs	r0, #0
 800405c:	f7ff ffbe 	bl	8003fdc <vcnl_set_threshold>
	vcnl_set_threshold( VCNL4010_THRESHOLD_HIGH, 0xaabb );
 8004060:	f64a 21bb 	movw	r1, #43707	; 0xaabb
 8004064:	2001      	movs	r0, #1
 8004066:	f7ff ffb9 	bl	8003fdc <vcnl_set_threshold>

	vcnl4010_write_reg( VCNL4010_INT_CONTROL_REG, control );
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4619      	mov	r1, r3
 800406e:	2089      	movs	r0, #137	; 0x89
 8004070:	f7ff ff46 	bl	8003f00 <vcnl4010_write_reg>

	RCC->APB2ENR 		|= RCC_APB2ENR_SYSCFGEN;
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <vcnl4010_init+0x94>)
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <vcnl4010_init+0x94>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6613      	str	r3, [r2, #96]	; 0x60
	SYSCFG->EXTICR[0] 	|= SYSCFG_EXTICR1_EXTI3_PA;	// PB[3] pin
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <vcnl4010_init+0x98>)
 8004082:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <vcnl4010_init+0x98>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 		|= EXTI_FTSR1_FT3;			// Falling trigger event configuration bit of line 3
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <vcnl4010_init+0x9c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a0d      	ldr	r2, [pc, #52]	; (80040c4 <vcnl4010_init+0x9c>)
 800408e:	f043 0308 	orr.w	r3, r3, #8
 8004092:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR1 		|= EXTI_RTSR1_RT3;			// Rising trigger event configuration bit of line 3
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <vcnl4010_init+0x9c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <vcnl4010_init+0x9c>)
 800409a:	f043 0308 	orr.w	r3, r3, #8
 800409e:	6093      	str	r3, [r2, #8]
	EXTI->IMR1 			|= EXTI_IMR1_IM3;			// Interrupt Mask on line 3
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <vcnl4010_init+0x9c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <vcnl4010_init+0x9c>)
 80040a6:	f043 0308 	orr.w	r3, r3, #8
 80040aa:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( EXTI3_IRQn );
 80040ac:	2009      	movs	r0, #9
 80040ae:	f7ff fedb 	bl	8003e68 <__NVIC_EnableIRQ>
	return 1;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40010400 	.word	0x40010400

080040c8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF3) {				// Pending bit for line 3
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <EXTI3_IRQHandler+0x20>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <EXTI3_IRQHandler+0x16>
		EXTI->PR1 = EXTI_PR1_PIF3;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <EXTI3_IRQHandler+0x20>)
 80040da:	2208      	movs	r2, #8
 80040dc:	615a      	str	r2, [r3, #20]

	}
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40010400 	.word	0x40010400

080040ec <vcnl4010_GET_measure_flag>:
	sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, REGISTER, 1, &value);
}
*****************************************************************************/

/**************** USTAWIA i CZYTA flagi w rejestrach czujnika ************/
uint8_t vcnl4010_GET_measure_flag( const uint8_t REGISTER, const uint8_t FLAG ) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	460a      	mov	r2, r1
 80040f6:	71fb      	strb	r3, [r7, #7]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71bb      	strb	r3, [r7, #6]

	uint8_t result; //= vcnl4010_GET_register_value( REGISTER );
	vcnl4010_read_reg( REGISTER, &result);
 80040fc:	f107 020f 	add.w	r2, r7, #15
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff10 	bl	8003f2a <vcnl4010_read_reg>

	if ( result & FLAG )
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	79bb      	ldrb	r3, [r7, #6]
 800410e:	4013      	ands	r3, r2
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <vcnl4010_GET_measure_flag+0x2e>
		return 1;		// Flaga jest ustawiona na 1
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <vcnl4010_GET_measure_flag+0x30>
	else
		return 0;		// Niestety flaga ustawiona na 0...
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <vcnl4010_SET_measure_flag>:
static void vcnl4010_SET_measure_flag( const uint8_t REGISTER, const uint8_t FLAG ) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	460a      	mov	r2, r1
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	4613      	mov	r3, r2
 8004132:	71bb      	strb	r3, [r7, #6]
	uint8_t registry;

	// Pobieramy aktualną wartość rejestru REGISTER
	vcnl4010_read_reg( REGISTER, &registry);
 8004134:	f107 020f 	add.w	r2, r7, #15
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fef4 	bl	8003f2a <vcnl4010_read_reg>

	// Modyfikujemy (ustawiamy na 1) bit flagi
	registry = registry | FLAG;
 8004142:	7bfa      	ldrb	r2, [r7, #15]
 8004144:	79bb      	ldrb	r3, [r7, #6]
 8004146:	4313      	orrs	r3, r2
 8004148:	b2db      	uxtb	r3, r3
 800414a:	73fb      	strb	r3, [r7, #15]

	// Ładujemy zmodyfikowany rejestr
//	sw_hardware_TWI_write_buf( VCNL4010_I2C_ADDR, REGISTER, 1, &registry);
	vcnl4010_write_reg( REGISTER, registry );
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fed4 	bl	8003f00 <vcnl4010_write_reg>
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <vcnl4010_get_single_measure>:
/*************************************************************************/

static void vcnl4010_get_single_measure( T_RESULTS * results ) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	static uint8_t measureStartFlag = 0;
	uint8_t i, buf[4];

	if ( measureStartFlag == 0) {
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <vcnl4010_get_single_measure+0xb0>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <vcnl4010_get_single_measure+0x1e>
		vcnl4010_SET_measure_flag( VCNL4010_COMMAND_REG,
 8004170:	2118      	movs	r1, #24
 8004172:	2080      	movs	r0, #128	; 0x80
 8004174:	f7ff ffd6 	bl	8004124 <vcnl4010_SET_measure_flag>
								   VCNL4010_SINGLE_AMBIL_START |
								   VCNL4010_SINGLE_PROXI_START);
		measureStartFlag = 1;
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <vcnl4010_get_single_measure+0xb0>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
	}
	if ( vcnl4010_GET_measure_flag( VCNL4010_COMMAND_REG, VCNL4010_PROXI_DATAREADY_FLAG )
 800417e:	2120      	movs	r1, #32
 8004180:	2080      	movs	r0, #128	; 0x80
 8004182:	f7ff ffb3 	bl	80040ec <vcnl4010_GET_measure_flag>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03c      	beq.n	8004206 <vcnl4010_get_single_measure+0xa6>
								&&( measureStartFlag == 1 ) ) {
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <vcnl4010_get_single_measure+0xb0>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d138      	bne.n	8004206 <vcnl4010_get_single_measure+0xa6>
		sw_hardware_TWI_read_buf( VCNL4010_I2C_ADDR, VCNL4010_AMBLIGHT_RESULT_REG, 4, buf);
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	2204      	movs	r2, #4
 800419a:	2185      	movs	r1, #133	; 0x85
 800419c:	2026      	movs	r0, #38	; 0x26
 800419e:	f7ff fe98 	bl	8003ed2 <sw_hardware_TWI_read_buf>
		for (i=0; i<4; i++) {
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e00b      	b.n	80041c0 <vcnl4010_get_single_measure+0x60>
			results->bytes[i] = buf[i];
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	f107 0110 	add.w	r1, r7, #16
 80041b0:	440a      	add	r2, r1
 80041b2:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<4; i++) {
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	3301      	adds	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d9f0      	bls.n	80041a8 <vcnl4010_get_single_measure+0x48>
		}
		sw_hardware_TWI_read_buf( VCNL4010_I2C_ADDR, VCNL4010_THRESHOLD_RESULT_REG, 4, buf);
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	2204      	movs	r2, #4
 80041cc:	218a      	movs	r1, #138	; 0x8a
 80041ce:	2026      	movs	r0, #38	; 0x26
 80041d0:	f7ff fe7f 	bl	8003ed2 <sw_hardware_TWI_read_buf>
		for (i=0; i<4; i++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e00c      	b.n	80041f4 <vcnl4010_get_single_measure+0x94>
			results->bytes[i+4] = buf[i];
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	3304      	adds	r3, #4
 80041e0:	f107 0110 	add.w	r1, r7, #16
 80041e4:	440a      	add	r2, r1
 80041e6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<4; i++) {
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	3301      	adds	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d9ef      	bls.n	80041da <vcnl4010_get_single_measure+0x7a>
		}
		measureStartFlag = 0;
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <vcnl4010_get_single_measure+0xb0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
		measureDataReadyFlag = 1;
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <vcnl4010_get_single_measure+0xb4>)
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
	}
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200005b4 	.word	0x200005b4
 8004214:	200005a5 	.word	0x200005a5

08004218 <SW_VCNL4010_MEASURE_EVENT>:

void SW_VCNL4010_MEASURE_EVENT( void ) {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	if (softTimer5==0) {
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <SW_VCNL4010_MEASURE_EVENT+0x48>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <SW_VCNL4010_MEASURE_EVENT+0x1a>
		vcnl4010_get_single_measure( &results );
 8004226:	480f      	ldr	r0, [pc, #60]	; (8004264 <SW_VCNL4010_MEASURE_EVENT+0x4c>)
 8004228:	f7ff ff9a 	bl	8004160 <vcnl4010_get_single_measure>
		softTimer5=100;
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <SW_VCNL4010_MEASURE_EVENT+0x48>)
 800422e:	2264      	movs	r2, #100	; 0x64
 8004230:	801a      	strh	r2, [r3, #0]
	}

	if ( measure_callback && measureDataReadyFlag ) {
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <SW_VCNL4010_MEASURE_EVENT+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00f      	beq.n	800425a <SW_VCNL4010_MEASURE_EVENT+0x42>
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <SW_VCNL4010_MEASURE_EVENT+0x54>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <SW_VCNL4010_MEASURE_EVENT+0x42>
		if( measure_callback) {
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <SW_VCNL4010_MEASURE_EVENT+0x50>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <SW_VCNL4010_MEASURE_EVENT+0x3c>
			measure_callback( &results );
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <SW_VCNL4010_MEASURE_EVENT+0x50>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4804      	ldr	r0, [pc, #16]	; (8004264 <SW_VCNL4010_MEASURE_EVENT+0x4c>)
 8004252:	4798      	blx	r3
		}
		measureDataReadyFlag = 0;
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <SW_VCNL4010_MEASURE_EVENT+0x54>)
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
	}
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200005f0 	.word	0x200005f0
 8004264:	200005a8 	.word	0x200005a8
 8004268:	200005b0 	.word	0x200005b0
 800426c:	200005a5 	.word	0x200005a5

08004270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8004270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004274:	f7fc fdde 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004278:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800427a:	e003      	b.n	8004284 <LoopCopyDataInit>

0800427c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800427e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004280:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004282:	3104      	adds	r1, #4

08004284 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004284:	480a      	ldr	r0, [pc, #40]	; (80042b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004288:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800428a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800428c:	d3f6      	bcc.n	800427c <CopyDataInit>
	ldr	r2, =_sbss
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004290:	e002      	b.n	8004298 <LoopFillZerobss>

08004292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004292:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004294:	f842 3b04 	str.w	r3, [r2], #4

08004298 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <LoopForever+0x16>)
	cmp	r2, r3
 800429a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800429c:	d3f9      	bcc.n	8004292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800429e:	f000 f811 	bl	80042c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042a2:	f7fc fc51 	bl	8000b48 <main>

080042a6 <LoopForever>:

LoopForever:
    b LoopForever
 80042a6:	e7fe      	b.n	80042a6 <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 80042a8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80042ac:	08005f40 	.word	0x08005f40
	ldr	r0, =_sdata
 80042b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80042b4:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80042b8:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80042bc:	200005fc 	.word	0x200005fc

080042c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042c0:	e7fe      	b.n	80042c0 <ADC1_2_IRQHandler>
	...

080042c4 <__libc_init_array>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	4d0d      	ldr	r5, [pc, #52]	; (80042fc <__libc_init_array+0x38>)
 80042c8:	4c0d      	ldr	r4, [pc, #52]	; (8004300 <__libc_init_array+0x3c>)
 80042ca:	1b64      	subs	r4, r4, r5
 80042cc:	10a4      	asrs	r4, r4, #2
 80042ce:	2600      	movs	r6, #0
 80042d0:	42a6      	cmp	r6, r4
 80042d2:	d109      	bne.n	80042e8 <__libc_init_array+0x24>
 80042d4:	4d0b      	ldr	r5, [pc, #44]	; (8004304 <__libc_init_array+0x40>)
 80042d6:	4c0c      	ldr	r4, [pc, #48]	; (8004308 <__libc_init_array+0x44>)
 80042d8:	f001 f86a 	bl	80053b0 <_init>
 80042dc:	1b64      	subs	r4, r4, r5
 80042de:	10a4      	asrs	r4, r4, #2
 80042e0:	2600      	movs	r6, #0
 80042e2:	42a6      	cmp	r6, r4
 80042e4:	d105      	bne.n	80042f2 <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ec:	4798      	blx	r3
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7ee      	b.n	80042d0 <__libc_init_array+0xc>
 80042f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f6:	4798      	blx	r3
 80042f8:	3601      	adds	r6, #1
 80042fa:	e7f2      	b.n	80042e2 <__libc_init_array+0x1e>
 80042fc:	08005f30 	.word	0x08005f30
 8004300:	08005f30 	.word	0x08005f30
 8004304:	08005f30 	.word	0x08005f30
 8004308:	08005f34 	.word	0x08005f34

0800430c <__itoa>:
 800430c:	1e93      	subs	r3, r2, #2
 800430e:	2b22      	cmp	r3, #34	; 0x22
 8004310:	b510      	push	{r4, lr}
 8004312:	460c      	mov	r4, r1
 8004314:	d904      	bls.n	8004320 <__itoa+0x14>
 8004316:	2300      	movs	r3, #0
 8004318:	700b      	strb	r3, [r1, #0]
 800431a:	461c      	mov	r4, r3
 800431c:	4620      	mov	r0, r4
 800431e:	bd10      	pop	{r4, pc}
 8004320:	2a0a      	cmp	r2, #10
 8004322:	d109      	bne.n	8004338 <__itoa+0x2c>
 8004324:	2800      	cmp	r0, #0
 8004326:	da07      	bge.n	8004338 <__itoa+0x2c>
 8004328:	232d      	movs	r3, #45	; 0x2d
 800432a:	700b      	strb	r3, [r1, #0]
 800432c:	4240      	negs	r0, r0
 800432e:	2101      	movs	r1, #1
 8004330:	4421      	add	r1, r4
 8004332:	f000 f80d 	bl	8004350 <__utoa>
 8004336:	e7f1      	b.n	800431c <__itoa+0x10>
 8004338:	2100      	movs	r1, #0
 800433a:	e7f9      	b.n	8004330 <__itoa+0x24>

0800433c <itoa>:
 800433c:	f7ff bfe6 	b.w	800430c <__itoa>

08004340 <memset>:
 8004340:	4402      	add	r2, r0
 8004342:	4603      	mov	r3, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <__utoa>:
 8004350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004352:	4c1f      	ldr	r4, [pc, #124]	; (80043d0 <__utoa+0x80>)
 8004354:	b08b      	sub	sp, #44	; 0x2c
 8004356:	4605      	mov	r5, r0
 8004358:	460b      	mov	r3, r1
 800435a:	466e      	mov	r6, sp
 800435c:	f104 0c20 	add.w	ip, r4, #32
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	6861      	ldr	r1, [r4, #4]
 8004364:	4637      	mov	r7, r6
 8004366:	c703      	stmia	r7!, {r0, r1}
 8004368:	3408      	adds	r4, #8
 800436a:	4564      	cmp	r4, ip
 800436c:	463e      	mov	r6, r7
 800436e:	d1f7      	bne.n	8004360 <__utoa+0x10>
 8004370:	7921      	ldrb	r1, [r4, #4]
 8004372:	7139      	strb	r1, [r7, #4]
 8004374:	1e91      	subs	r1, r2, #2
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	6038      	str	r0, [r7, #0]
 800437a:	2922      	cmp	r1, #34	; 0x22
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	d904      	bls.n	800438c <__utoa+0x3c>
 8004382:	7019      	strb	r1, [r3, #0]
 8004384:	460b      	mov	r3, r1
 8004386:	4618      	mov	r0, r3
 8004388:	b00b      	add	sp, #44	; 0x2c
 800438a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438c:	1e58      	subs	r0, r3, #1
 800438e:	4684      	mov	ip, r0
 8004390:	fbb5 f7f2 	udiv	r7, r5, r2
 8004394:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004398:	fb02 5617 	mls	r6, r2, r7, r5
 800439c:	4476      	add	r6, lr
 800439e:	460c      	mov	r4, r1
 80043a0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80043a4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80043a8:	462e      	mov	r6, r5
 80043aa:	42b2      	cmp	r2, r6
 80043ac:	f101 0101 	add.w	r1, r1, #1
 80043b0:	463d      	mov	r5, r7
 80043b2:	d9ed      	bls.n	8004390 <__utoa+0x40>
 80043b4:	2200      	movs	r2, #0
 80043b6:	545a      	strb	r2, [r3, r1]
 80043b8:	1919      	adds	r1, r3, r4
 80043ba:	1aa5      	subs	r5, r4, r2
 80043bc:	42aa      	cmp	r2, r5
 80043be:	dae2      	bge.n	8004386 <__utoa+0x36>
 80043c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80043c4:	780e      	ldrb	r6, [r1, #0]
 80043c6:	7006      	strb	r6, [r0, #0]
 80043c8:	3201      	adds	r2, #1
 80043ca:	f801 5901 	strb.w	r5, [r1], #-1
 80043ce:	e7f4      	b.n	80043ba <__utoa+0x6a>
 80043d0:	08005ec4 	.word	0x08005ec4

080043d4 <pow>:
 80043d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d8:	ec59 8b10 	vmov	r8, r9, d0
 80043dc:	ec57 6b11 	vmov	r6, r7, d1
 80043e0:	f000 f8da 	bl	8004598 <__ieee754_pow>
 80043e4:	4b4e      	ldr	r3, [pc, #312]	; (8004520 <pow+0x14c>)
 80043e6:	f993 3000 	ldrsb.w	r3, [r3]
 80043ea:	3301      	adds	r3, #1
 80043ec:	ec55 4b10 	vmov	r4, r5, d0
 80043f0:	d015      	beq.n	800441e <pow+0x4a>
 80043f2:	4632      	mov	r2, r6
 80043f4:	463b      	mov	r3, r7
 80043f6:	4630      	mov	r0, r6
 80043f8:	4639      	mov	r1, r7
 80043fa:	f7fc fb3f 	bl	8000a7c <__aeabi_dcmpun>
 80043fe:	b970      	cbnz	r0, 800441e <pow+0x4a>
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fc fb38 	bl	8000a7c <__aeabi_dcmpun>
 800440c:	2200      	movs	r2, #0
 800440e:	2300      	movs	r3, #0
 8004410:	b148      	cbz	r0, 8004426 <pow+0x52>
 8004412:	4630      	mov	r0, r6
 8004414:	4639      	mov	r1, r7
 8004416:	f7fc faff 	bl	8000a18 <__aeabi_dcmpeq>
 800441a:	2800      	cmp	r0, #0
 800441c:	d17d      	bne.n	800451a <pow+0x146>
 800441e:	ec45 4b10 	vmov	d0, r4, r5
 8004422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004426:	4640      	mov	r0, r8
 8004428:	4649      	mov	r1, r9
 800442a:	f7fc faf5 	bl	8000a18 <__aeabi_dcmpeq>
 800442e:	b1e0      	cbz	r0, 800446a <pow+0x96>
 8004430:	2200      	movs	r2, #0
 8004432:	2300      	movs	r3, #0
 8004434:	4630      	mov	r0, r6
 8004436:	4639      	mov	r1, r7
 8004438:	f7fc faee 	bl	8000a18 <__aeabi_dcmpeq>
 800443c:	2800      	cmp	r0, #0
 800443e:	d16c      	bne.n	800451a <pow+0x146>
 8004440:	ec47 6b10 	vmov	d0, r6, r7
 8004444:	f000 fe87 	bl	8005156 <finite>
 8004448:	2800      	cmp	r0, #0
 800444a:	d0e8      	beq.n	800441e <pow+0x4a>
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	4630      	mov	r0, r6
 8004452:	4639      	mov	r1, r7
 8004454:	f7fc faea 	bl	8000a2c <__aeabi_dcmplt>
 8004458:	2800      	cmp	r0, #0
 800445a:	d0e0      	beq.n	800441e <pow+0x4a>
 800445c:	f000 ffa2 	bl	80053a4 <__errno>
 8004460:	2321      	movs	r3, #33	; 0x21
 8004462:	6003      	str	r3, [r0, #0]
 8004464:	2400      	movs	r4, #0
 8004466:	4d2f      	ldr	r5, [pc, #188]	; (8004524 <pow+0x150>)
 8004468:	e7d9      	b.n	800441e <pow+0x4a>
 800446a:	ec45 4b10 	vmov	d0, r4, r5
 800446e:	f000 fe72 	bl	8005156 <finite>
 8004472:	bbb8      	cbnz	r0, 80044e4 <pow+0x110>
 8004474:	ec49 8b10 	vmov	d0, r8, r9
 8004478:	f000 fe6d 	bl	8005156 <finite>
 800447c:	b390      	cbz	r0, 80044e4 <pow+0x110>
 800447e:	ec47 6b10 	vmov	d0, r6, r7
 8004482:	f000 fe68 	bl	8005156 <finite>
 8004486:	b368      	cbz	r0, 80044e4 <pow+0x110>
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fc faf4 	bl	8000a7c <__aeabi_dcmpun>
 8004494:	b160      	cbz	r0, 80044b0 <pow+0xdc>
 8004496:	f000 ff85 	bl	80053a4 <__errno>
 800449a:	2321      	movs	r3, #33	; 0x21
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	2300      	movs	r3, #0
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc f979 	bl	800079c <__aeabi_ddiv>
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	e7b6      	b.n	800441e <pow+0x4a>
 80044b0:	f000 ff78 	bl	80053a4 <__errno>
 80044b4:	2322      	movs	r3, #34	; 0x22
 80044b6:	6003      	str	r3, [r0, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	2300      	movs	r3, #0
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fc fab4 	bl	8000a2c <__aeabi_dcmplt>
 80044c4:	2400      	movs	r4, #0
 80044c6:	b158      	cbz	r0, 80044e0 <pow+0x10c>
 80044c8:	ec47 6b10 	vmov	d0, r6, r7
 80044cc:	f000 fe58 	bl	8005180 <rint>
 80044d0:	4632      	mov	r2, r6
 80044d2:	ec51 0b10 	vmov	r0, r1, d0
 80044d6:	463b      	mov	r3, r7
 80044d8:	f7fc fa9e 	bl	8000a18 <__aeabi_dcmpeq>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0c2      	beq.n	8004466 <pow+0x92>
 80044e0:	4d11      	ldr	r5, [pc, #68]	; (8004528 <pow+0x154>)
 80044e2:	e79c      	b.n	800441e <pow+0x4a>
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	4620      	mov	r0, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	f7fc fa94 	bl	8000a18 <__aeabi_dcmpeq>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d094      	beq.n	800441e <pow+0x4a>
 80044f4:	ec49 8b10 	vmov	d0, r8, r9
 80044f8:	f000 fe2d 	bl	8005156 <finite>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d08e      	beq.n	800441e <pow+0x4a>
 8004500:	ec47 6b10 	vmov	d0, r6, r7
 8004504:	f000 fe27 	bl	8005156 <finite>
 8004508:	2800      	cmp	r0, #0
 800450a:	d088      	beq.n	800441e <pow+0x4a>
 800450c:	f000 ff4a 	bl	80053a4 <__errno>
 8004510:	2322      	movs	r3, #34	; 0x22
 8004512:	6003      	str	r3, [r0, #0]
 8004514:	2400      	movs	r4, #0
 8004516:	2500      	movs	r5, #0
 8004518:	e781      	b.n	800441e <pow+0x4a>
 800451a:	4d04      	ldr	r5, [pc, #16]	; (800452c <pow+0x158>)
 800451c:	2400      	movs	r4, #0
 800451e:	e77e      	b.n	800441e <pow+0x4a>
 8004520:	20000084 	.word	0x20000084
 8004524:	fff00000 	.word	0xfff00000
 8004528:	7ff00000 	.word	0x7ff00000
 800452c:	3ff00000 	.word	0x3ff00000

08004530 <sqrt>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	ed2d 8b02 	vpush	{d8}
 8004536:	ec55 4b10 	vmov	r4, r5, d0
 800453a:	f000 fd4f 	bl	8004fdc <__ieee754_sqrt>
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <sqrt+0x64>)
 8004540:	eeb0 8a40 	vmov.f32	s16, s0
 8004544:	eef0 8a60 	vmov.f32	s17, s1
 8004548:	f993 3000 	ldrsb.w	r3, [r3]
 800454c:	3301      	adds	r3, #1
 800454e:	d019      	beq.n	8004584 <sqrt+0x54>
 8004550:	4622      	mov	r2, r4
 8004552:	462b      	mov	r3, r5
 8004554:	4620      	mov	r0, r4
 8004556:	4629      	mov	r1, r5
 8004558:	f7fc fa90 	bl	8000a7c <__aeabi_dcmpun>
 800455c:	b990      	cbnz	r0, 8004584 <sqrt+0x54>
 800455e:	2200      	movs	r2, #0
 8004560:	2300      	movs	r3, #0
 8004562:	4620      	mov	r0, r4
 8004564:	4629      	mov	r1, r5
 8004566:	f7fc fa61 	bl	8000a2c <__aeabi_dcmplt>
 800456a:	b158      	cbz	r0, 8004584 <sqrt+0x54>
 800456c:	f000 ff1a 	bl	80053a4 <__errno>
 8004570:	2321      	movs	r3, #33	; 0x21
 8004572:	6003      	str	r3, [r0, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2300      	movs	r3, #0
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	f7fc f90e 	bl	800079c <__aeabi_ddiv>
 8004580:	ec41 0b18 	vmov	d8, r0, r1
 8004584:	eeb0 0a48 	vmov.f32	s0, s16
 8004588:	eef0 0a68 	vmov.f32	s1, s17
 800458c:	ecbd 8b02 	vpop	{d8}
 8004590:	bd38      	pop	{r3, r4, r5, pc}
 8004592:	bf00      	nop
 8004594:	20000084 	.word	0x20000084

08004598 <__ieee754_pow>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	ed2d 8b06 	vpush	{d8-d10}
 80045a0:	b08d      	sub	sp, #52	; 0x34
 80045a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80045a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80045aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80045ae:	ea56 0100 	orrs.w	r1, r6, r0
 80045b2:	ec53 2b10 	vmov	r2, r3, d0
 80045b6:	f000 84d1 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 80045ba:	497f      	ldr	r1, [pc, #508]	; (80047b8 <__ieee754_pow+0x220>)
 80045bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80045c0:	428c      	cmp	r4, r1
 80045c2:	ee10 8a10 	vmov	r8, s0
 80045c6:	4699      	mov	r9, r3
 80045c8:	dc09      	bgt.n	80045de <__ieee754_pow+0x46>
 80045ca:	d103      	bne.n	80045d4 <__ieee754_pow+0x3c>
 80045cc:	b97a      	cbnz	r2, 80045ee <__ieee754_pow+0x56>
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	dd02      	ble.n	80045d8 <__ieee754_pow+0x40>
 80045d2:	e00c      	b.n	80045ee <__ieee754_pow+0x56>
 80045d4:	428e      	cmp	r6, r1
 80045d6:	dc02      	bgt.n	80045de <__ieee754_pow+0x46>
 80045d8:	428e      	cmp	r6, r1
 80045da:	d110      	bne.n	80045fe <__ieee754_pow+0x66>
 80045dc:	b178      	cbz	r0, 80045fe <__ieee754_pow+0x66>
 80045de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80045e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80045e6:	ea54 0308 	orrs.w	r3, r4, r8
 80045ea:	f000 84b7 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 80045ee:	4873      	ldr	r0, [pc, #460]	; (80047bc <__ieee754_pow+0x224>)
 80045f0:	b00d      	add	sp, #52	; 0x34
 80045f2:	ecbd 8b06 	vpop	{d8-d10}
 80045f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f000 bdb9 	b.w	8005170 <nan>
 80045fe:	f1b9 0f00 	cmp.w	r9, #0
 8004602:	da36      	bge.n	8004672 <__ieee754_pow+0xda>
 8004604:	496e      	ldr	r1, [pc, #440]	; (80047c0 <__ieee754_pow+0x228>)
 8004606:	428e      	cmp	r6, r1
 8004608:	dc51      	bgt.n	80046ae <__ieee754_pow+0x116>
 800460a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800460e:	428e      	cmp	r6, r1
 8004610:	f340 84af 	ble.w	8004f72 <__ieee754_pow+0x9da>
 8004614:	1531      	asrs	r1, r6, #20
 8004616:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800461a:	2914      	cmp	r1, #20
 800461c:	dd0f      	ble.n	800463e <__ieee754_pow+0xa6>
 800461e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004622:	fa20 fc01 	lsr.w	ip, r0, r1
 8004626:	fa0c f101 	lsl.w	r1, ip, r1
 800462a:	4281      	cmp	r1, r0
 800462c:	f040 84a1 	bne.w	8004f72 <__ieee754_pow+0x9da>
 8004630:	f00c 0c01 	and.w	ip, ip, #1
 8004634:	f1cc 0102 	rsb	r1, ip, #2
 8004638:	9100      	str	r1, [sp, #0]
 800463a:	b180      	cbz	r0, 800465e <__ieee754_pow+0xc6>
 800463c:	e059      	b.n	80046f2 <__ieee754_pow+0x15a>
 800463e:	2800      	cmp	r0, #0
 8004640:	d155      	bne.n	80046ee <__ieee754_pow+0x156>
 8004642:	f1c1 0114 	rsb	r1, r1, #20
 8004646:	fa46 fc01 	asr.w	ip, r6, r1
 800464a:	fa0c f101 	lsl.w	r1, ip, r1
 800464e:	42b1      	cmp	r1, r6
 8004650:	f040 848c 	bne.w	8004f6c <__ieee754_pow+0x9d4>
 8004654:	f00c 0c01 	and.w	ip, ip, #1
 8004658:	f1cc 0102 	rsb	r1, ip, #2
 800465c:	9100      	str	r1, [sp, #0]
 800465e:	4959      	ldr	r1, [pc, #356]	; (80047c4 <__ieee754_pow+0x22c>)
 8004660:	428e      	cmp	r6, r1
 8004662:	d12d      	bne.n	80046c0 <__ieee754_pow+0x128>
 8004664:	2f00      	cmp	r7, #0
 8004666:	da79      	bge.n	800475c <__ieee754_pow+0x1c4>
 8004668:	4956      	ldr	r1, [pc, #344]	; (80047c4 <__ieee754_pow+0x22c>)
 800466a:	2000      	movs	r0, #0
 800466c:	f7fc f896 	bl	800079c <__aeabi_ddiv>
 8004670:	e016      	b.n	80046a0 <__ieee754_pow+0x108>
 8004672:	2100      	movs	r1, #0
 8004674:	9100      	str	r1, [sp, #0]
 8004676:	2800      	cmp	r0, #0
 8004678:	d13b      	bne.n	80046f2 <__ieee754_pow+0x15a>
 800467a:	494f      	ldr	r1, [pc, #316]	; (80047b8 <__ieee754_pow+0x220>)
 800467c:	428e      	cmp	r6, r1
 800467e:	d1ee      	bne.n	800465e <__ieee754_pow+0xc6>
 8004680:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004684:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004688:	ea53 0308 	orrs.w	r3, r3, r8
 800468c:	f000 8466 	beq.w	8004f5c <__ieee754_pow+0x9c4>
 8004690:	4b4d      	ldr	r3, [pc, #308]	; (80047c8 <__ieee754_pow+0x230>)
 8004692:	429c      	cmp	r4, r3
 8004694:	dd0d      	ble.n	80046b2 <__ieee754_pow+0x11a>
 8004696:	2f00      	cmp	r7, #0
 8004698:	f280 8464 	bge.w	8004f64 <__ieee754_pow+0x9cc>
 800469c:	2000      	movs	r0, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	ec41 0b10 	vmov	d0, r0, r1
 80046a4:	b00d      	add	sp, #52	; 0x34
 80046a6:	ecbd 8b06 	vpop	{d8-d10}
 80046aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ae:	2102      	movs	r1, #2
 80046b0:	e7e0      	b.n	8004674 <__ieee754_pow+0xdc>
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	daf2      	bge.n	800469c <__ieee754_pow+0x104>
 80046b6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80046ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80046be:	e7ef      	b.n	80046a0 <__ieee754_pow+0x108>
 80046c0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80046c4:	d104      	bne.n	80046d0 <__ieee754_pow+0x138>
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fb ff3d 	bl	8000548 <__aeabi_dmul>
 80046ce:	e7e7      	b.n	80046a0 <__ieee754_pow+0x108>
 80046d0:	493e      	ldr	r1, [pc, #248]	; (80047cc <__ieee754_pow+0x234>)
 80046d2:	428f      	cmp	r7, r1
 80046d4:	d10d      	bne.n	80046f2 <__ieee754_pow+0x15a>
 80046d6:	f1b9 0f00 	cmp.w	r9, #0
 80046da:	db0a      	blt.n	80046f2 <__ieee754_pow+0x15a>
 80046dc:	ec43 2b10 	vmov	d0, r2, r3
 80046e0:	b00d      	add	sp, #52	; 0x34
 80046e2:	ecbd 8b06 	vpop	{d8-d10}
 80046e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f000 bc77 	b.w	8004fdc <__ieee754_sqrt>
 80046ee:	2100      	movs	r1, #0
 80046f0:	9100      	str	r1, [sp, #0]
 80046f2:	ec43 2b10 	vmov	d0, r2, r3
 80046f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046fa:	f000 fd23 	bl	8005144 <fabs>
 80046fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004702:	ec51 0b10 	vmov	r0, r1, d0
 8004706:	f1b8 0f00 	cmp.w	r8, #0
 800470a:	d12a      	bne.n	8004762 <__ieee754_pow+0x1ca>
 800470c:	b12c      	cbz	r4, 800471a <__ieee754_pow+0x182>
 800470e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80047c4 <__ieee754_pow+0x22c>
 8004712:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004716:	45e6      	cmp	lr, ip
 8004718:	d123      	bne.n	8004762 <__ieee754_pow+0x1ca>
 800471a:	2f00      	cmp	r7, #0
 800471c:	da05      	bge.n	800472a <__ieee754_pow+0x192>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	2000      	movs	r0, #0
 8004724:	4927      	ldr	r1, [pc, #156]	; (80047c4 <__ieee754_pow+0x22c>)
 8004726:	f7fc f839 	bl	800079c <__aeabi_ddiv>
 800472a:	f1b9 0f00 	cmp.w	r9, #0
 800472e:	dab7      	bge.n	80046a0 <__ieee754_pow+0x108>
 8004730:	9b00      	ldr	r3, [sp, #0]
 8004732:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004736:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800473a:	4323      	orrs	r3, r4
 800473c:	d108      	bne.n	8004750 <__ieee754_pow+0x1b8>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fb fd47 	bl	80001d8 <__aeabi_dsub>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	e78d      	b.n	800466c <__ieee754_pow+0xd4>
 8004750:	9b00      	ldr	r3, [sp, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d1a4      	bne.n	80046a0 <__ieee754_pow+0x108>
 8004756:	4602      	mov	r2, r0
 8004758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	e79e      	b.n	80046a0 <__ieee754_pow+0x108>
 8004762:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004766:	f10c 35ff 	add.w	r5, ip, #4294967295
 800476a:	950a      	str	r5, [sp, #40]	; 0x28
 800476c:	9d00      	ldr	r5, [sp, #0]
 800476e:	46ac      	mov	ip, r5
 8004770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004772:	ea5c 0505 	orrs.w	r5, ip, r5
 8004776:	d0e4      	beq.n	8004742 <__ieee754_pow+0x1aa>
 8004778:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <__ieee754_pow+0x238>)
 800477a:	429e      	cmp	r6, r3
 800477c:	f340 80fc 	ble.w	8004978 <__ieee754_pow+0x3e0>
 8004780:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004784:	429e      	cmp	r6, r3
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <__ieee754_pow+0x230>)
 8004788:	dd07      	ble.n	800479a <__ieee754_pow+0x202>
 800478a:	429c      	cmp	r4, r3
 800478c:	dc0a      	bgt.n	80047a4 <__ieee754_pow+0x20c>
 800478e:	2f00      	cmp	r7, #0
 8004790:	da84      	bge.n	800469c <__ieee754_pow+0x104>
 8004792:	a307      	add	r3, pc, #28	; (adr r3, 80047b0 <__ieee754_pow+0x218>)
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	e795      	b.n	80046c6 <__ieee754_pow+0x12e>
 800479a:	429c      	cmp	r4, r3
 800479c:	dbf7      	blt.n	800478e <__ieee754_pow+0x1f6>
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <__ieee754_pow+0x22c>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	dd17      	ble.n	80047d4 <__ieee754_pow+0x23c>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	dcf4      	bgt.n	8004792 <__ieee754_pow+0x1fa>
 80047a8:	e778      	b.n	800469c <__ieee754_pow+0x104>
 80047aa:	bf00      	nop
 80047ac:	f3af 8000 	nop.w
 80047b0:	8800759c 	.word	0x8800759c
 80047b4:	7e37e43c 	.word	0x7e37e43c
 80047b8:	7ff00000 	.word	0x7ff00000
 80047bc:	08005ee8 	.word	0x08005ee8
 80047c0:	433fffff 	.word	0x433fffff
 80047c4:	3ff00000 	.word	0x3ff00000
 80047c8:	3fefffff 	.word	0x3fefffff
 80047cc:	3fe00000 	.word	0x3fe00000
 80047d0:	41e00000 	.word	0x41e00000
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <__ieee754_pow+0x3d0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fb fcfe 	bl	80001d8 <__aeabi_dsub>
 80047dc:	a356      	add	r3, pc, #344	; (adr r3, 8004938 <__ieee754_pow+0x3a0>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	4604      	mov	r4, r0
 80047e4:	460d      	mov	r5, r1
 80047e6:	f7fb feaf 	bl	8000548 <__aeabi_dmul>
 80047ea:	a355      	add	r3, pc, #340	; (adr r3, 8004940 <__ieee754_pow+0x3a8>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	4620      	mov	r0, r4
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7fb fea6 	bl	8000548 <__aeabi_dmul>
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <__ieee754_pow+0x3d4>)
 80047fe:	4682      	mov	sl, r0
 8004800:	468b      	mov	fp, r1
 8004802:	2200      	movs	r2, #0
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fe9e 	bl	8000548 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	a14d      	add	r1, pc, #308	; (adr r1, 8004948 <__ieee754_pow+0x3b0>)
 8004812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004816:	f7fb fcdf 	bl	80001d8 <__aeabi_dsub>
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f7fb fe93 	bl	8000548 <__aeabi_dmul>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	2000      	movs	r0, #0
 8004828:	4951      	ldr	r1, [pc, #324]	; (8004970 <__ieee754_pow+0x3d8>)
 800482a:	f7fb fcd5 	bl	80001d8 <__aeabi_dsub>
 800482e:	4622      	mov	r2, r4
 8004830:	4680      	mov	r8, r0
 8004832:	4689      	mov	r9, r1
 8004834:	462b      	mov	r3, r5
 8004836:	4620      	mov	r0, r4
 8004838:	4629      	mov	r1, r5
 800483a:	f7fb fe85 	bl	8000548 <__aeabi_dmul>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f7fb fe7f 	bl	8000548 <__aeabi_dmul>
 800484a:	a341      	add	r3, pc, #260	; (adr r3, 8004950 <__ieee754_pow+0x3b8>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb fe7a 	bl	8000548 <__aeabi_dmul>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4650      	mov	r0, sl
 800485a:	4659      	mov	r1, fp
 800485c:	f7fb fcbc 	bl	80001d8 <__aeabi_dsub>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4680      	mov	r8, r0
 8004866:	4689      	mov	r9, r1
 8004868:	4630      	mov	r0, r6
 800486a:	4639      	mov	r1, r7
 800486c:	f7fb fcb6 	bl	80001dc <__adddf3>
 8004870:	2400      	movs	r4, #0
 8004872:	4632      	mov	r2, r6
 8004874:	463b      	mov	r3, r7
 8004876:	4620      	mov	r0, r4
 8004878:	460d      	mov	r5, r1
 800487a:	f7fb fcad 	bl	80001d8 <__aeabi_dsub>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb fca7 	bl	80001d8 <__aeabi_dsub>
 800488a:	9b00      	ldr	r3, [sp, #0]
 800488c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	4313      	orrs	r3, r2
 8004892:	4682      	mov	sl, r0
 8004894:	468b      	mov	fp, r1
 8004896:	f040 81f1 	bne.w	8004c7c <__ieee754_pow+0x6e4>
 800489a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004958 <__ieee754_pow+0x3c0>
 800489e:	eeb0 8a47 	vmov.f32	s16, s14
 80048a2:	eef0 8a67 	vmov.f32	s17, s15
 80048a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048aa:	2600      	movs	r6, #0
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b4:	f7fb fc90 	bl	80001d8 <__aeabi_dsub>
 80048b8:	4622      	mov	r2, r4
 80048ba:	462b      	mov	r3, r5
 80048bc:	f7fb fe44 	bl	8000548 <__aeabi_dmul>
 80048c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048c4:	4680      	mov	r8, r0
 80048c6:	4689      	mov	r9, r1
 80048c8:	4650      	mov	r0, sl
 80048ca:	4659      	mov	r1, fp
 80048cc:	f7fb fe3c 	bl	8000548 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fb fc80 	bl	80001dc <__adddf3>
 80048dc:	4632      	mov	r2, r6
 80048de:	463b      	mov	r3, r7
 80048e0:	4680      	mov	r8, r0
 80048e2:	4689      	mov	r9, r1
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fb fe2e 	bl	8000548 <__aeabi_dmul>
 80048ec:	460b      	mov	r3, r1
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	4602      	mov	r2, r0
 80048f4:	4649      	mov	r1, r9
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7fb fc70 	bl	80001dc <__adddf3>
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <__ieee754_pow+0x3dc>)
 80048fe:	4299      	cmp	r1, r3
 8004900:	ec45 4b19 	vmov	d9, r4, r5
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
 8004908:	468b      	mov	fp, r1
 800490a:	f340 82fe 	ble.w	8004f0a <__ieee754_pow+0x972>
 800490e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004916:	4303      	orrs	r3, r0
 8004918:	f000 81f0 	beq.w	8004cfc <__ieee754_pow+0x764>
 800491c:	a310      	add	r3, pc, #64	; (adr r3, 8004960 <__ieee754_pow+0x3c8>)
 800491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004922:	ec51 0b18 	vmov	r0, r1, d8
 8004926:	f7fb fe0f 	bl	8000548 <__aeabi_dmul>
 800492a:	a30d      	add	r3, pc, #52	; (adr r3, 8004960 <__ieee754_pow+0x3c8>)
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	e6cb      	b.n	80046ca <__ieee754_pow+0x132>
 8004932:	bf00      	nop
 8004934:	f3af 8000 	nop.w
 8004938:	60000000 	.word	0x60000000
 800493c:	3ff71547 	.word	0x3ff71547
 8004940:	f85ddf44 	.word	0xf85ddf44
 8004944:	3e54ae0b 	.word	0x3e54ae0b
 8004948:	55555555 	.word	0x55555555
 800494c:	3fd55555 	.word	0x3fd55555
 8004950:	652b82fe 	.word	0x652b82fe
 8004954:	3ff71547 	.word	0x3ff71547
 8004958:	00000000 	.word	0x00000000
 800495c:	bff00000 	.word	0xbff00000
 8004960:	8800759c 	.word	0x8800759c
 8004964:	7e37e43c 	.word	0x7e37e43c
 8004968:	3ff00000 	.word	0x3ff00000
 800496c:	3fd00000 	.word	0x3fd00000
 8004970:	3fe00000 	.word	0x3fe00000
 8004974:	408fffff 	.word	0x408fffff
 8004978:	4bd7      	ldr	r3, [pc, #860]	; (8004cd8 <__ieee754_pow+0x740>)
 800497a:	ea03 0309 	and.w	r3, r3, r9
 800497e:	2200      	movs	r2, #0
 8004980:	b92b      	cbnz	r3, 800498e <__ieee754_pow+0x3f6>
 8004982:	4bd6      	ldr	r3, [pc, #856]	; (8004cdc <__ieee754_pow+0x744>)
 8004984:	f7fb fde0 	bl	8000548 <__aeabi_dmul>
 8004988:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800498c:	460c      	mov	r4, r1
 800498e:	1523      	asrs	r3, r4, #20
 8004990:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004994:	4413      	add	r3, r2
 8004996:	9309      	str	r3, [sp, #36]	; 0x24
 8004998:	4bd1      	ldr	r3, [pc, #836]	; (8004ce0 <__ieee754_pow+0x748>)
 800499a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800499e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80049a2:	429c      	cmp	r4, r3
 80049a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80049a8:	dd08      	ble.n	80049bc <__ieee754_pow+0x424>
 80049aa:	4bce      	ldr	r3, [pc, #824]	; (8004ce4 <__ieee754_pow+0x74c>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	f340 8163 	ble.w	8004c78 <__ieee754_pow+0x6e0>
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	3301      	adds	r3, #1
 80049b6:	9309      	str	r3, [sp, #36]	; 0x24
 80049b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80049bc:	2400      	movs	r4, #0
 80049be:	00e3      	lsls	r3, r4, #3
 80049c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049c2:	4bc9      	ldr	r3, [pc, #804]	; (8004ce8 <__ieee754_pow+0x750>)
 80049c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c8:	ed93 7b00 	vldr	d7, [r3]
 80049cc:	4629      	mov	r1, r5
 80049ce:	ec53 2b17 	vmov	r2, r3, d7
 80049d2:	eeb0 8a47 	vmov.f32	s16, s14
 80049d6:	eef0 8a67 	vmov.f32	s17, s15
 80049da:	4682      	mov	sl, r0
 80049dc:	f7fb fbfc 	bl	80001d8 <__aeabi_dsub>
 80049e0:	4652      	mov	r2, sl
 80049e2:	4606      	mov	r6, r0
 80049e4:	460f      	mov	r7, r1
 80049e6:	462b      	mov	r3, r5
 80049e8:	ec51 0b18 	vmov	r0, r1, d8
 80049ec:	f7fb fbf6 	bl	80001dc <__adddf3>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	2000      	movs	r0, #0
 80049f6:	49bd      	ldr	r1, [pc, #756]	; (8004cec <__ieee754_pow+0x754>)
 80049f8:	f7fb fed0 	bl	800079c <__aeabi_ddiv>
 80049fc:	ec41 0b19 	vmov	d9, r0, r1
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fb fd9e 	bl	8000548 <__aeabi_dmul>
 8004a0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004a20:	46ab      	mov	fp, r5
 8004a22:	106d      	asrs	r5, r5, #1
 8004a24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004a28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004a2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004a30:	2200      	movs	r2, #0
 8004a32:	4640      	mov	r0, r8
 8004a34:	4649      	mov	r1, r9
 8004a36:	4614      	mov	r4, r2
 8004a38:	461d      	mov	r5, r3
 8004a3a:	f7fb fd85 	bl	8000548 <__aeabi_dmul>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4630      	mov	r0, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	f7fb fbc7 	bl	80001d8 <__aeabi_dsub>
 8004a4a:	ec53 2b18 	vmov	r2, r3, d8
 8004a4e:	4606      	mov	r6, r0
 8004a50:	460f      	mov	r7, r1
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fbbf 	bl	80001d8 <__aeabi_dsub>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4650      	mov	r0, sl
 8004a60:	4659      	mov	r1, fp
 8004a62:	f7fb fbb9 	bl	80001d8 <__aeabi_dsub>
 8004a66:	4642      	mov	r2, r8
 8004a68:	464b      	mov	r3, r9
 8004a6a:	f7fb fd6d 	bl	8000548 <__aeabi_dmul>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fbaf 	bl	80001d8 <__aeabi_dsub>
 8004a7a:	ec53 2b19 	vmov	r2, r3, d9
 8004a7e:	f7fb fd63 	bl	8000548 <__aeabi_dmul>
 8004a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a86:	ec41 0b18 	vmov	d8, r0, r1
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fb fd5b 	bl	8000548 <__aeabi_dmul>
 8004a92:	a37d      	add	r3, pc, #500	; (adr r3, 8004c88 <__ieee754_pow+0x6f0>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	f7fb fd54 	bl	8000548 <__aeabi_dmul>
 8004aa0:	a37b      	add	r3, pc, #492	; (adr r3, 8004c90 <__ieee754_pow+0x6f8>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb99 	bl	80001dc <__adddf3>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f7fb fd4b 	bl	8000548 <__aeabi_dmul>
 8004ab2:	a379      	add	r3, pc, #484	; (adr r3, 8004c98 <__ieee754_pow+0x700>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fb90 	bl	80001dc <__adddf3>
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f7fb fd42 	bl	8000548 <__aeabi_dmul>
 8004ac4:	a376      	add	r3, pc, #472	; (adr r3, 8004ca0 <__ieee754_pow+0x708>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fb87 	bl	80001dc <__adddf3>
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	f7fb fd39 	bl	8000548 <__aeabi_dmul>
 8004ad6:	a374      	add	r3, pc, #464	; (adr r3, 8004ca8 <__ieee754_pow+0x710>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb fb7e 	bl	80001dc <__adddf3>
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f7fb fd30 	bl	8000548 <__aeabi_dmul>
 8004ae8:	a371      	add	r3, pc, #452	; (adr r3, 8004cb0 <__ieee754_pow+0x718>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb fb75 	bl	80001dc <__adddf3>
 8004af2:	4622      	mov	r2, r4
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	462b      	mov	r3, r5
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7fb fd23 	bl	8000548 <__aeabi_dmul>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4630      	mov	r0, r6
 8004b08:	4639      	mov	r1, r7
 8004b0a:	f7fb fd1d 	bl	8000548 <__aeabi_dmul>
 8004b0e:	4642      	mov	r2, r8
 8004b10:	4604      	mov	r4, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	464b      	mov	r3, r9
 8004b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1a:	f7fb fb5f 	bl	80001dc <__adddf3>
 8004b1e:	ec53 2b18 	vmov	r2, r3, d8
 8004b22:	f7fb fd11 	bl	8000548 <__aeabi_dmul>
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f7fb fb57 	bl	80001dc <__adddf3>
 8004b2e:	4642      	mov	r2, r8
 8004b30:	4682      	mov	sl, r0
 8004b32:	468b      	mov	fp, r1
 8004b34:	464b      	mov	r3, r9
 8004b36:	4640      	mov	r0, r8
 8004b38:	4649      	mov	r1, r9
 8004b3a:	f7fb fd05 	bl	8000548 <__aeabi_dmul>
 8004b3e:	4b6c      	ldr	r3, [pc, #432]	; (8004cf0 <__ieee754_pow+0x758>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	4606      	mov	r6, r0
 8004b44:	460f      	mov	r7, r1
 8004b46:	f7fb fb49 	bl	80001dc <__adddf3>
 8004b4a:	4652      	mov	r2, sl
 8004b4c:	465b      	mov	r3, fp
 8004b4e:	f7fb fb45 	bl	80001dc <__adddf3>
 8004b52:	9c04      	ldr	r4, [sp, #16]
 8004b54:	460d      	mov	r5, r1
 8004b56:	4622      	mov	r2, r4
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	f7fb fcf3 	bl	8000548 <__aeabi_dmul>
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <__ieee754_pow+0x758>)
 8004b64:	4680      	mov	r8, r0
 8004b66:	4689      	mov	r9, r1
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	f7fb fb33 	bl	80001d8 <__aeabi_dsub>
 8004b72:	4632      	mov	r2, r6
 8004b74:	463b      	mov	r3, r7
 8004b76:	f7fb fb2f 	bl	80001d8 <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4650      	mov	r0, sl
 8004b80:	4659      	mov	r1, fp
 8004b82:	f7fb fb29 	bl	80001d8 <__aeabi_dsub>
 8004b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b8a:	f7fb fcdd 	bl	8000548 <__aeabi_dmul>
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4606      	mov	r6, r0
 8004b92:	460f      	mov	r7, r1
 8004b94:	462b      	mov	r3, r5
 8004b96:	ec51 0b18 	vmov	r0, r1, d8
 8004b9a:	f7fb fcd5 	bl	8000548 <__aeabi_dmul>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	f7fb fb19 	bl	80001dc <__adddf3>
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fb11 	bl	80001dc <__adddf3>
 8004bba:	9c04      	ldr	r4, [sp, #16]
 8004bbc:	a33e      	add	r3, pc, #248	; (adr r3, 8004cb8 <__ieee754_pow+0x720>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	f7fb fcbf 	bl	8000548 <__aeabi_dmul>
 8004bca:	4642      	mov	r2, r8
 8004bcc:	ec41 0b18 	vmov	d8, r0, r1
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb faff 	bl	80001d8 <__aeabi_dsub>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb faf9 	bl	80001d8 <__aeabi_dsub>
 8004be6:	a336      	add	r3, pc, #216	; (adr r3, 8004cc0 <__ieee754_pow+0x728>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	f7fb fcac 	bl	8000548 <__aeabi_dmul>
 8004bf0:	a335      	add	r3, pc, #212	; (adr r3, 8004cc8 <__ieee754_pow+0x730>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	f7fb fca3 	bl	8000548 <__aeabi_dmul>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb fae7 	bl	80001dc <__adddf3>
 8004c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <__ieee754_pow+0x75c>)
 8004c12:	4413      	add	r3, r2
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f7fb fae0 	bl	80001dc <__adddf3>
 8004c1c:	4682      	mov	sl, r0
 8004c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c20:	468b      	mov	fp, r1
 8004c22:	f7fb fc27 	bl	8000474 <__aeabi_i2d>
 8004c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c28:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <__ieee754_pow+0x760>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	4652      	mov	r2, sl
 8004c36:	465b      	mov	r3, fp
 8004c38:	ec51 0b18 	vmov	r0, r1, d8
 8004c3c:	f7fb face 	bl	80001dc <__adddf3>
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	f7fb faca 	bl	80001dc <__adddf3>
 8004c48:	4632      	mov	r2, r6
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	f7fb fac6 	bl	80001dc <__adddf3>
 8004c50:	9c04      	ldr	r4, [sp, #16]
 8004c52:	4632      	mov	r2, r6
 8004c54:	463b      	mov	r3, r7
 8004c56:	4620      	mov	r0, r4
 8004c58:	460d      	mov	r5, r1
 8004c5a:	f7fb fabd 	bl	80001d8 <__aeabi_dsub>
 8004c5e:	4642      	mov	r2, r8
 8004c60:	464b      	mov	r3, r9
 8004c62:	f7fb fab9 	bl	80001d8 <__aeabi_dsub>
 8004c66:	ec53 2b18 	vmov	r2, r3, d8
 8004c6a:	f7fb fab5 	bl	80001d8 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4650      	mov	r0, sl
 8004c74:	4659      	mov	r1, fp
 8004c76:	e606      	b.n	8004886 <__ieee754_pow+0x2ee>
 8004c78:	2401      	movs	r4, #1
 8004c7a:	e6a0      	b.n	80049be <__ieee754_pow+0x426>
 8004c7c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004cd0 <__ieee754_pow+0x738>
 8004c80:	e60d      	b.n	800489e <__ieee754_pow+0x306>
 8004c82:	bf00      	nop
 8004c84:	f3af 8000 	nop.w
 8004c88:	4a454eef 	.word	0x4a454eef
 8004c8c:	3fca7e28 	.word	0x3fca7e28
 8004c90:	93c9db65 	.word	0x93c9db65
 8004c94:	3fcd864a 	.word	0x3fcd864a
 8004c98:	a91d4101 	.word	0xa91d4101
 8004c9c:	3fd17460 	.word	0x3fd17460
 8004ca0:	518f264d 	.word	0x518f264d
 8004ca4:	3fd55555 	.word	0x3fd55555
 8004ca8:	db6fabff 	.word	0xdb6fabff
 8004cac:	3fdb6db6 	.word	0x3fdb6db6
 8004cb0:	33333303 	.word	0x33333303
 8004cb4:	3fe33333 	.word	0x3fe33333
 8004cb8:	e0000000 	.word	0xe0000000
 8004cbc:	3feec709 	.word	0x3feec709
 8004cc0:	dc3a03fd 	.word	0xdc3a03fd
 8004cc4:	3feec709 	.word	0x3feec709
 8004cc8:	145b01f5 	.word	0x145b01f5
 8004ccc:	be3e2fe0 	.word	0xbe3e2fe0
 8004cd0:	00000000 	.word	0x00000000
 8004cd4:	3ff00000 	.word	0x3ff00000
 8004cd8:	7ff00000 	.word	0x7ff00000
 8004cdc:	43400000 	.word	0x43400000
 8004ce0:	0003988e 	.word	0x0003988e
 8004ce4:	000bb679 	.word	0x000bb679
 8004ce8:	08005ef0 	.word	0x08005ef0
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	40080000 	.word	0x40080000
 8004cf4:	08005f10 	.word	0x08005f10
 8004cf8:	08005f00 	.word	0x08005f00
 8004cfc:	a3b5      	add	r3, pc, #724	; (adr r3, 8004fd4 <__ieee754_pow+0xa3c>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fa69 	bl	80001dc <__adddf3>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	ec41 0b1a 	vmov	d10, r0, r1
 8004d10:	462b      	mov	r3, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fa5f 	bl	80001d8 <__aeabi_dsub>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	ec51 0b1a 	vmov	r0, r1, d10
 8004d22:	f7fb fea1 	bl	8000a68 <__aeabi_dcmpgt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f47f adf8 	bne.w	800491c <__ieee754_pow+0x384>
 8004d2c:	4aa4      	ldr	r2, [pc, #656]	; (8004fc0 <__ieee754_pow+0xa28>)
 8004d2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f340 810b 	ble.w	8004f4e <__ieee754_pow+0x9b6>
 8004d38:	151b      	asrs	r3, r3, #20
 8004d3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004d3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004d42:	fa4a f303 	asr.w	r3, sl, r3
 8004d46:	445b      	add	r3, fp
 8004d48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004d4c:	4e9d      	ldr	r6, [pc, #628]	; (8004fc4 <__ieee754_pow+0xa2c>)
 8004d4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004d52:	4116      	asrs	r6, r2
 8004d54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004d58:	2000      	movs	r0, #0
 8004d5a:	ea23 0106 	bic.w	r1, r3, r6
 8004d5e:	f1c2 0214 	rsb	r2, r2, #20
 8004d62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004d66:	fa4a fa02 	asr.w	sl, sl, r2
 8004d6a:	f1bb 0f00 	cmp.w	fp, #0
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	bfb8      	it	lt
 8004d78:	f1ca 0a00 	rsblt	sl, sl, #0
 8004d7c:	f7fb fa2c 	bl	80001d8 <__aeabi_dsub>
 8004d80:	ec41 0b19 	vmov	d9, r0, r1
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	ec51 0b19 	vmov	r0, r1, d9
 8004d8c:	f7fb fa26 	bl	80001dc <__adddf3>
 8004d90:	2400      	movs	r4, #0
 8004d92:	a379      	add	r3, pc, #484	; (adr r3, 8004f78 <__ieee754_pow+0x9e0>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	4620      	mov	r0, r4
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	f7fb fbd4 	bl	8000548 <__aeabi_dmul>
 8004da0:	ec53 2b19 	vmov	r2, r3, d9
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb fa14 	bl	80001d8 <__aeabi_dsub>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	f7fb fa0e 	bl	80001d8 <__aeabi_dsub>
 8004dbc:	a370      	add	r3, pc, #448	; (adr r3, 8004f80 <__ieee754_pow+0x9e8>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fbc1 	bl	8000548 <__aeabi_dmul>
 8004dc6:	a370      	add	r3, pc, #448	; (adr r3, 8004f88 <__ieee754_pow+0x9f0>)
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	4680      	mov	r8, r0
 8004dce:	4689      	mov	r9, r1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb fbb8 	bl	8000548 <__aeabi_dmul>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4640      	mov	r0, r8
 8004dde:	4649      	mov	r1, r9
 8004de0:	f7fb f9fc 	bl	80001dc <__adddf3>
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb f9f4 	bl	80001dc <__adddf3>
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	4680      	mov	r8, r0
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	f7fb f9ec 	bl	80001d8 <__aeabi_dsub>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4620      	mov	r0, r4
 8004e06:	4629      	mov	r1, r5
 8004e08:	f7fb f9e6 	bl	80001d8 <__aeabi_dsub>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	464b      	mov	r3, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fb96 	bl	8000548 <__aeabi_dmul>
 8004e1c:	a35c      	add	r3, pc, #368	; (adr r3, 8004f90 <__ieee754_pow+0x9f8>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	4604      	mov	r4, r0
 8004e24:	460d      	mov	r5, r1
 8004e26:	f7fb fb8f 	bl	8000548 <__aeabi_dmul>
 8004e2a:	a35b      	add	r3, pc, #364	; (adr r3, 8004f98 <__ieee754_pow+0xa00>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fb f9d2 	bl	80001d8 <__aeabi_dsub>
 8004e34:	4622      	mov	r2, r4
 8004e36:	462b      	mov	r3, r5
 8004e38:	f7fb fb86 	bl	8000548 <__aeabi_dmul>
 8004e3c:	a358      	add	r3, pc, #352	; (adr r3, 8004fa0 <__ieee754_pow+0xa08>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	f7fb f9cb 	bl	80001dc <__adddf3>
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f7fb fb7d 	bl	8000548 <__aeabi_dmul>
 8004e4e:	a356      	add	r3, pc, #344	; (adr r3, 8004fa8 <__ieee754_pow+0xa10>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f9c0 	bl	80001d8 <__aeabi_dsub>
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	f7fb fb74 	bl	8000548 <__aeabi_dmul>
 8004e60:	a353      	add	r3, pc, #332	; (adr r3, 8004fb0 <__ieee754_pow+0xa18>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f9b9 	bl	80001dc <__adddf3>
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	f7fb fb6b 	bl	8000548 <__aeabi_dmul>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4640      	mov	r0, r8
 8004e78:	4649      	mov	r1, r9
 8004e7a:	f7fb f9ad 	bl	80001d8 <__aeabi_dsub>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb fb5d 	bl	8000548 <__aeabi_dmul>
 8004e8e:	2200      	movs	r2, #0
 8004e90:	ec41 0b19 	vmov	d9, r0, r1
 8004e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb f99c 	bl	80001d8 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	ec51 0b19 	vmov	r0, r1, d9
 8004ea8:	f7fb fc78 	bl	800079c <__aeabi_ddiv>
 8004eac:	4632      	mov	r2, r6
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb fb46 	bl	8000548 <__aeabi_dmul>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	f7fb f98c 	bl	80001dc <__adddf3>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4620      	mov	r0, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	f7fb f984 	bl	80001d8 <__aeabi_dsub>
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f7fb f980 	bl	80001d8 <__aeabi_dsub>
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4602      	mov	r2, r0
 8004edc:	493a      	ldr	r1, [pc, #232]	; (8004fc8 <__ieee754_pow+0xa30>)
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f7fb f97a 	bl	80001d8 <__aeabi_dsub>
 8004ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef2:	da2f      	bge.n	8004f54 <__ieee754_pow+0x9bc>
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	ed9d 0b00 	vldr	d0, [sp]
 8004efa:	f000 f9cd 	bl	8005298 <scalbn>
 8004efe:	ec51 0b10 	vmov	r0, r1, d0
 8004f02:	ec53 2b18 	vmov	r2, r3, d8
 8004f06:	f7ff bbe0 	b.w	80046ca <__ieee754_pow+0x132>
 8004f0a:	4b30      	ldr	r3, [pc, #192]	; (8004fcc <__ieee754_pow+0xa34>)
 8004f0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004f10:	429e      	cmp	r6, r3
 8004f12:	f77f af0b 	ble.w	8004d2c <__ieee754_pow+0x794>
 8004f16:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <__ieee754_pow+0xa38>)
 8004f18:	440b      	add	r3, r1
 8004f1a:	4303      	orrs	r3, r0
 8004f1c:	d00b      	beq.n	8004f36 <__ieee754_pow+0x99e>
 8004f1e:	a326      	add	r3, pc, #152	; (adr r3, 8004fb8 <__ieee754_pow+0xa20>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	ec51 0b18 	vmov	r0, r1, d8
 8004f28:	f7fb fb0e 	bl	8000548 <__aeabi_dmul>
 8004f2c:	a322      	add	r3, pc, #136	; (adr r3, 8004fb8 <__ieee754_pow+0xa20>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f7ff bbca 	b.w	80046ca <__ieee754_pow+0x132>
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f7fb f94d 	bl	80001d8 <__aeabi_dsub>
 8004f3e:	4642      	mov	r2, r8
 8004f40:	464b      	mov	r3, r9
 8004f42:	f7fb fd87 	bl	8000a54 <__aeabi_dcmpge>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f aef0 	beq.w	8004d2c <__ieee754_pow+0x794>
 8004f4c:	e7e7      	b.n	8004f1e <__ieee754_pow+0x986>
 8004f4e:	f04f 0a00 	mov.w	sl, #0
 8004f52:	e717      	b.n	8004d84 <__ieee754_pow+0x7ec>
 8004f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	e7d2      	b.n	8004f02 <__ieee754_pow+0x96a>
 8004f5c:	491a      	ldr	r1, [pc, #104]	; (8004fc8 <__ieee754_pow+0xa30>)
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7ff bb9e 	b.w	80046a0 <__ieee754_pow+0x108>
 8004f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f68:	f7ff bb9a 	b.w	80046a0 <__ieee754_pow+0x108>
 8004f6c:	9000      	str	r0, [sp, #0]
 8004f6e:	f7ff bb76 	b.w	800465e <__ieee754_pow+0xc6>
 8004f72:	2100      	movs	r1, #0
 8004f74:	f7ff bb60 	b.w	8004638 <__ieee754_pow+0xa0>
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	3fe62e43 	.word	0x3fe62e43
 8004f80:	fefa39ef 	.word	0xfefa39ef
 8004f84:	3fe62e42 	.word	0x3fe62e42
 8004f88:	0ca86c39 	.word	0x0ca86c39
 8004f8c:	be205c61 	.word	0xbe205c61
 8004f90:	72bea4d0 	.word	0x72bea4d0
 8004f94:	3e663769 	.word	0x3e663769
 8004f98:	c5d26bf1 	.word	0xc5d26bf1
 8004f9c:	3ebbbd41 	.word	0x3ebbbd41
 8004fa0:	af25de2c 	.word	0xaf25de2c
 8004fa4:	3f11566a 	.word	0x3f11566a
 8004fa8:	16bebd93 	.word	0x16bebd93
 8004fac:	3f66c16c 	.word	0x3f66c16c
 8004fb0:	5555553e 	.word	0x5555553e
 8004fb4:	3fc55555 	.word	0x3fc55555
 8004fb8:	c2f8f359 	.word	0xc2f8f359
 8004fbc:	01a56e1f 	.word	0x01a56e1f
 8004fc0:	3fe00000 	.word	0x3fe00000
 8004fc4:	000fffff 	.word	0x000fffff
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	4090cbff 	.word	0x4090cbff
 8004fd0:	3f6f3400 	.word	0x3f6f3400
 8004fd4:	652b82fe 	.word	0x652b82fe
 8004fd8:	3c971547 	.word	0x3c971547

08004fdc <__ieee754_sqrt>:
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	ec55 4b10 	vmov	r4, r5, d0
 8004fe4:	4e56      	ldr	r6, [pc, #344]	; (8005140 <__ieee754_sqrt+0x164>)
 8004fe6:	43ae      	bics	r6, r5
 8004fe8:	ee10 0a10 	vmov	r0, s0
 8004fec:	ee10 3a10 	vmov	r3, s0
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	462a      	mov	r2, r5
 8004ff4:	d110      	bne.n	8005018 <__ieee754_sqrt+0x3c>
 8004ff6:	ee10 2a10 	vmov	r2, s0
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	f7fb faa4 	bl	8000548 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4620      	mov	r0, r4
 8005006:	4629      	mov	r1, r5
 8005008:	f7fb f8e8 	bl	80001dc <__adddf3>
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	ec45 4b10 	vmov	d0, r4, r5
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	2d00      	cmp	r5, #0
 800501a:	dc10      	bgt.n	800503e <__ieee754_sqrt+0x62>
 800501c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005020:	4330      	orrs	r0, r6
 8005022:	d0f5      	beq.n	8005010 <__ieee754_sqrt+0x34>
 8005024:	b15d      	cbz	r5, 800503e <__ieee754_sqrt+0x62>
 8005026:	ee10 2a10 	vmov	r2, s0
 800502a:	462b      	mov	r3, r5
 800502c:	ee10 0a10 	vmov	r0, s0
 8005030:	f7fb f8d2 	bl	80001d8 <__aeabi_dsub>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	f7fb fbb0 	bl	800079c <__aeabi_ddiv>
 800503c:	e7e6      	b.n	800500c <__ieee754_sqrt+0x30>
 800503e:	1509      	asrs	r1, r1, #20
 8005040:	d076      	beq.n	8005130 <__ieee754_sqrt+0x154>
 8005042:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005046:	07ce      	lsls	r6, r1, #31
 8005048:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800504c:	bf5e      	ittt	pl
 800504e:	0fda      	lsrpl	r2, r3, #31
 8005050:	005b      	lslpl	r3, r3, #1
 8005052:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005056:	0fda      	lsrs	r2, r3, #31
 8005058:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800505c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005060:	2000      	movs	r0, #0
 8005062:	106d      	asrs	r5, r5, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	f04f 0e16 	mov.w	lr, #22
 800506a:	4684      	mov	ip, r0
 800506c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005070:	eb0c 0401 	add.w	r4, ip, r1
 8005074:	4294      	cmp	r4, r2
 8005076:	bfde      	ittt	le
 8005078:	1b12      	suble	r2, r2, r4
 800507a:	eb04 0c01 	addle.w	ip, r4, r1
 800507e:	1840      	addle	r0, r0, r1
 8005080:	0052      	lsls	r2, r2, #1
 8005082:	f1be 0e01 	subs.w	lr, lr, #1
 8005086:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800508a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800508e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005092:	d1ed      	bne.n	8005070 <__ieee754_sqrt+0x94>
 8005094:	4671      	mov	r1, lr
 8005096:	2720      	movs	r7, #32
 8005098:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800509c:	4562      	cmp	r2, ip
 800509e:	eb04 060e 	add.w	r6, r4, lr
 80050a2:	dc02      	bgt.n	80050aa <__ieee754_sqrt+0xce>
 80050a4:	d113      	bne.n	80050ce <__ieee754_sqrt+0xf2>
 80050a6:	429e      	cmp	r6, r3
 80050a8:	d811      	bhi.n	80050ce <__ieee754_sqrt+0xf2>
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	eb06 0e04 	add.w	lr, r6, r4
 80050b0:	da43      	bge.n	800513a <__ieee754_sqrt+0x15e>
 80050b2:	f1be 0f00 	cmp.w	lr, #0
 80050b6:	db40      	blt.n	800513a <__ieee754_sqrt+0x15e>
 80050b8:	f10c 0801 	add.w	r8, ip, #1
 80050bc:	eba2 020c 	sub.w	r2, r2, ip
 80050c0:	429e      	cmp	r6, r3
 80050c2:	bf88      	it	hi
 80050c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80050c8:	1b9b      	subs	r3, r3, r6
 80050ca:	4421      	add	r1, r4
 80050cc:	46c4      	mov	ip, r8
 80050ce:	0052      	lsls	r2, r2, #1
 80050d0:	3f01      	subs	r7, #1
 80050d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80050d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80050da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050de:	d1dd      	bne.n	800509c <__ieee754_sqrt+0xc0>
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d006      	beq.n	80050f2 <__ieee754_sqrt+0x116>
 80050e4:	1c4c      	adds	r4, r1, #1
 80050e6:	bf13      	iteet	ne
 80050e8:	3101      	addne	r1, #1
 80050ea:	3001      	addeq	r0, #1
 80050ec:	4639      	moveq	r1, r7
 80050ee:	f021 0101 	bicne.w	r1, r1, #1
 80050f2:	1043      	asrs	r3, r0, #1
 80050f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80050f8:	0849      	lsrs	r1, r1, #1
 80050fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80050fe:	07c2      	lsls	r2, r0, #31
 8005100:	bf48      	it	mi
 8005102:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005106:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800510a:	460c      	mov	r4, r1
 800510c:	463d      	mov	r5, r7
 800510e:	e77f      	b.n	8005010 <__ieee754_sqrt+0x34>
 8005110:	0ada      	lsrs	r2, r3, #11
 8005112:	3815      	subs	r0, #21
 8005114:	055b      	lsls	r3, r3, #21
 8005116:	2a00      	cmp	r2, #0
 8005118:	d0fa      	beq.n	8005110 <__ieee754_sqrt+0x134>
 800511a:	02d7      	lsls	r7, r2, #11
 800511c:	d50a      	bpl.n	8005134 <__ieee754_sqrt+0x158>
 800511e:	f1c1 0420 	rsb	r4, r1, #32
 8005122:	fa23 f404 	lsr.w	r4, r3, r4
 8005126:	1e4d      	subs	r5, r1, #1
 8005128:	408b      	lsls	r3, r1
 800512a:	4322      	orrs	r2, r4
 800512c:	1b41      	subs	r1, r0, r5
 800512e:	e788      	b.n	8005042 <__ieee754_sqrt+0x66>
 8005130:	4608      	mov	r0, r1
 8005132:	e7f0      	b.n	8005116 <__ieee754_sqrt+0x13a>
 8005134:	0052      	lsls	r2, r2, #1
 8005136:	3101      	adds	r1, #1
 8005138:	e7ef      	b.n	800511a <__ieee754_sqrt+0x13e>
 800513a:	46e0      	mov	r8, ip
 800513c:	e7be      	b.n	80050bc <__ieee754_sqrt+0xe0>
 800513e:	bf00      	nop
 8005140:	7ff00000 	.word	0x7ff00000

08005144 <fabs>:
 8005144:	ec51 0b10 	vmov	r0, r1, d0
 8005148:	ee10 2a10 	vmov	r2, s0
 800514c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005150:	ec43 2b10 	vmov	d0, r2, r3
 8005154:	4770      	bx	lr

08005156 <finite>:
 8005156:	b082      	sub	sp, #8
 8005158:	ed8d 0b00 	vstr	d0, [sp]
 800515c:	9801      	ldr	r0, [sp, #4]
 800515e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005162:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005166:	0fc0      	lsrs	r0, r0, #31
 8005168:	b002      	add	sp, #8
 800516a:	4770      	bx	lr
 800516c:	0000      	movs	r0, r0
	...

08005170 <nan>:
 8005170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005178 <nan+0x8>
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	00000000 	.word	0x00000000
 800517c:	7ff80000 	.word	0x7ff80000

08005180 <rint>:
 8005180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005182:	ec51 0b10 	vmov	r0, r1, d0
 8005186:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800518a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800518e:	2e13      	cmp	r6, #19
 8005190:	ee10 4a10 	vmov	r4, s0
 8005194:	460b      	mov	r3, r1
 8005196:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800519a:	dc58      	bgt.n	800524e <rint+0xce>
 800519c:	2e00      	cmp	r6, #0
 800519e:	da2b      	bge.n	80051f8 <rint+0x78>
 80051a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80051a4:	4302      	orrs	r2, r0
 80051a6:	d023      	beq.n	80051f0 <rint+0x70>
 80051a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80051ac:	4302      	orrs	r2, r0
 80051ae:	4254      	negs	r4, r2
 80051b0:	4314      	orrs	r4, r2
 80051b2:	0c4b      	lsrs	r3, r1, #17
 80051b4:	0b24      	lsrs	r4, r4, #12
 80051b6:	045b      	lsls	r3, r3, #17
 80051b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80051bc:	ea44 0103 	orr.w	r1, r4, r3
 80051c0:	4b32      	ldr	r3, [pc, #200]	; (800528c <rint+0x10c>)
 80051c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80051c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb f803 	bl	80001dc <__adddf3>
 80051d6:	e9cd 0100 	strd	r0, r1, [sp]
 80051da:	463b      	mov	r3, r7
 80051dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e0:	4632      	mov	r2, r6
 80051e2:	f7fa fff9 	bl	80001d8 <__aeabi_dsub>
 80051e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80051ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80051ee:	4639      	mov	r1, r7
 80051f0:	ec41 0b10 	vmov	d0, r0, r1
 80051f4:	b003      	add	sp, #12
 80051f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <rint+0x110>)
 80051fa:	4132      	asrs	r2, r6
 80051fc:	ea01 0702 	and.w	r7, r1, r2
 8005200:	4307      	orrs	r7, r0
 8005202:	d0f5      	beq.n	80051f0 <rint+0x70>
 8005204:	0851      	lsrs	r1, r2, #1
 8005206:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800520a:	4314      	orrs	r4, r2
 800520c:	d00c      	beq.n	8005228 <rint+0xa8>
 800520e:	ea23 0201 	bic.w	r2, r3, r1
 8005212:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005216:	2e13      	cmp	r6, #19
 8005218:	fa43 f606 	asr.w	r6, r3, r6
 800521c:	bf0c      	ite	eq
 800521e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005222:	2400      	movne	r4, #0
 8005224:	ea42 0306 	orr.w	r3, r2, r6
 8005228:	4918      	ldr	r1, [pc, #96]	; (800528c <rint+0x10c>)
 800522a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800522e:	4622      	mov	r2, r4
 8005230:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fa ffd0 	bl	80001dc <__adddf3>
 800523c:	e9cd 0100 	strd	r0, r1, [sp]
 8005240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	f7fa ffc6 	bl	80001d8 <__aeabi_dsub>
 800524c:	e7d0      	b.n	80051f0 <rint+0x70>
 800524e:	2e33      	cmp	r6, #51	; 0x33
 8005250:	dd07      	ble.n	8005262 <rint+0xe2>
 8005252:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005256:	d1cb      	bne.n	80051f0 <rint+0x70>
 8005258:	ee10 2a10 	vmov	r2, s0
 800525c:	f7fa ffbe 	bl	80001dc <__adddf3>
 8005260:	e7c6      	b.n	80051f0 <rint+0x70>
 8005262:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005266:	f04f 36ff 	mov.w	r6, #4294967295
 800526a:	40d6      	lsrs	r6, r2
 800526c:	4230      	tst	r0, r6
 800526e:	d0bf      	beq.n	80051f0 <rint+0x70>
 8005270:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005274:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005278:	bf1f      	itttt	ne
 800527a:	ea24 0101 	bicne.w	r1, r4, r1
 800527e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005282:	fa44 f202 	asrne.w	r2, r4, r2
 8005286:	ea41 0402 	orrne.w	r4, r1, r2
 800528a:	e7cd      	b.n	8005228 <rint+0xa8>
 800528c:	08005f20 	.word	0x08005f20
 8005290:	000fffff 	.word	0x000fffff
 8005294:	00000000 	.word	0x00000000

08005298 <scalbn>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	ec55 4b10 	vmov	r4, r5, d0
 800529e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052a2:	4606      	mov	r6, r0
 80052a4:	462b      	mov	r3, r5
 80052a6:	b99a      	cbnz	r2, 80052d0 <scalbn+0x38>
 80052a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052ac:	4323      	orrs	r3, r4
 80052ae:	d036      	beq.n	800531e <scalbn+0x86>
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <scalbn+0x100>)
 80052b2:	4629      	mov	r1, r5
 80052b4:	ee10 0a10 	vmov	r0, s0
 80052b8:	2200      	movs	r2, #0
 80052ba:	f7fb f945 	bl	8000548 <__aeabi_dmul>
 80052be:	4b37      	ldr	r3, [pc, #220]	; (800539c <scalbn+0x104>)
 80052c0:	429e      	cmp	r6, r3
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	da10      	bge.n	80052ea <scalbn+0x52>
 80052c8:	a32b      	add	r3, pc, #172	; (adr r3, 8005378 <scalbn+0xe0>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	e03a      	b.n	8005346 <scalbn+0xae>
 80052d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d10c      	bne.n	80052f2 <scalbn+0x5a>
 80052d8:	ee10 2a10 	vmov	r2, s0
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fa ff7c 	bl	80001dc <__adddf3>
 80052e4:	4604      	mov	r4, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	e019      	b.n	800531e <scalbn+0x86>
 80052ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80052ee:	460b      	mov	r3, r1
 80052f0:	3a36      	subs	r2, #54	; 0x36
 80052f2:	4432      	add	r2, r6
 80052f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80052f8:	428a      	cmp	r2, r1
 80052fa:	dd08      	ble.n	800530e <scalbn+0x76>
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	a120      	add	r1, pc, #128	; (adr r1, 8005380 <scalbn+0xe8>)
 8005300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005304:	da1c      	bge.n	8005340 <scalbn+0xa8>
 8005306:	a120      	add	r1, pc, #128	; (adr r1, 8005388 <scalbn+0xf0>)
 8005308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800530c:	e018      	b.n	8005340 <scalbn+0xa8>
 800530e:	2a00      	cmp	r2, #0
 8005310:	dd08      	ble.n	8005324 <scalbn+0x8c>
 8005312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800531a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800531e:	ec45 4b10 	vmov	d0, r4, r5
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005328:	da19      	bge.n	800535e <scalbn+0xc6>
 800532a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800532e:	429e      	cmp	r6, r3
 8005330:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005334:	dd0a      	ble.n	800534c <scalbn+0xb4>
 8005336:	a112      	add	r1, pc, #72	; (adr r1, 8005380 <scalbn+0xe8>)
 8005338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e2      	bne.n	8005306 <scalbn+0x6e>
 8005340:	a30f      	add	r3, pc, #60	; (adr r3, 8005380 <scalbn+0xe8>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f7fb f8ff 	bl	8000548 <__aeabi_dmul>
 800534a:	e7cb      	b.n	80052e4 <scalbn+0x4c>
 800534c:	a10a      	add	r1, pc, #40	; (adr r1, 8005378 <scalbn+0xe0>)
 800534e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0b8      	beq.n	80052c8 <scalbn+0x30>
 8005356:	a10e      	add	r1, pc, #56	; (adr r1, 8005390 <scalbn+0xf8>)
 8005358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800535c:	e7b4      	b.n	80052c8 <scalbn+0x30>
 800535e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005362:	3236      	adds	r2, #54	; 0x36
 8005364:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005368:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800536c:	4620      	mov	r0, r4
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <scalbn+0x108>)
 8005370:	2200      	movs	r2, #0
 8005372:	e7e8      	b.n	8005346 <scalbn+0xae>
 8005374:	f3af 8000 	nop.w
 8005378:	c2f8f359 	.word	0xc2f8f359
 800537c:	01a56e1f 	.word	0x01a56e1f
 8005380:	8800759c 	.word	0x8800759c
 8005384:	7e37e43c 	.word	0x7e37e43c
 8005388:	8800759c 	.word	0x8800759c
 800538c:	fe37e43c 	.word	0xfe37e43c
 8005390:	c2f8f359 	.word	0xc2f8f359
 8005394:	81a56e1f 	.word	0x81a56e1f
 8005398:	43500000 	.word	0x43500000
 800539c:	ffff3cb0 	.word	0xffff3cb0
 80053a0:	3c900000 	.word	0x3c900000

080053a4 <__errno>:
 80053a4:	4b01      	ldr	r3, [pc, #4]	; (80053ac <__errno+0x8>)
 80053a6:	6818      	ldr	r0, [r3, #0]
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000020 	.word	0x20000020

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

Disassembly of section ccmram:

080053c8 <graphic_set_pixel_RAM>:
}
/***************************************************************************************/

/*************************************************************************************************/
// Funkcje oparte na rysowaniu pojedynczego piksela
void graphic_set_pixel_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, const T_COLOR *color ) {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	817b      	strh	r3, [r7, #10]
 80053d6:	4613      	mov	r3, r2
 80053d8:	813b      	strh	r3, [r7, #8]
	  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 80053da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db79      	blt.n	80054d6 <graphic_set_pixel_RAM+0x10e>
 80053e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80053e6:	4a3f      	ldr	r2, [pc, #252]	; (80054e4 <graphic_set_pixel_RAM+0x11c>)
 80053e8:	8812      	ldrh	r2, [r2, #0]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	da73      	bge.n	80054d6 <graphic_set_pixel_RAM+0x10e>
 80053ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	db6f      	blt.n	80054d6 <graphic_set_pixel_RAM+0x10e>
 80053f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80053fa:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <graphic_set_pixel_RAM+0x120>)
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	4293      	cmp	r3, r2
 8005400:	da69      	bge.n	80054d6 <graphic_set_pixel_RAM+0x10e>
	    return;
	  if ( *color )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d031      	beq.n	800546e <graphic_set_pixel_RAM+0xa6>
		  buffer[ x + (y/8)*_width ] |=  (1<<(y%8)); // zapal pixel
 800540a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800540e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	da00      	bge.n	8005418 <graphic_set_pixel_RAM+0x50>
 8005416:	3307      	adds	r3, #7
 8005418:	10db      	asrs	r3, r3, #3
 800541a:	b218      	sxth	r0, r3
 800541c:	4601      	mov	r1, r0
 800541e:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <graphic_set_pixel_RAM+0x11c>)
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	fb03 f301 	mul.w	r3, r3, r1
 8005426:	4413      	add	r3, r2
 8005428:	461a      	mov	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	b25a      	sxtb	r2, r3
 8005434:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005438:	4259      	negs	r1, r3
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	f001 0107 	and.w	r1, r1, #7
 8005442:	bf58      	it	pl
 8005444:	424b      	negpl	r3, r1
 8005446:	b21b      	sxth	r3, r3
 8005448:	4619      	mov	r1, r3
 800544a:	2301      	movs	r3, #1
 800544c:	408b      	lsls	r3, r1
 800544e:	b25b      	sxtb	r3, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	b259      	sxtb	r1, r3
 8005454:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <graphic_set_pixel_RAM+0x11c>)
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	fb03 f300 	mul.w	r3, r3, r0
 8005460:	4413      	add	r3, r2
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	b2ca      	uxtb	r2, r1
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	e034      	b.n	80054d8 <graphic_set_pixel_RAM+0x110>
	  else
		  buffer[ x + (y/8)*_width ] &= ~(1<<(y%8)); // zgaś pixel
 800546e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005472:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	da00      	bge.n	800547c <graphic_set_pixel_RAM+0xb4>
 800547a:	3307      	adds	r3, #7
 800547c:	10db      	asrs	r3, r3, #3
 800547e:	b218      	sxth	r0, r3
 8005480:	4601      	mov	r1, r0
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <graphic_set_pixel_RAM+0x11c>)
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	fb03 f301 	mul.w	r3, r3, r1
 800548a:	4413      	add	r3, r2
 800548c:	461a      	mov	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	b25a      	sxtb	r2, r3
 8005498:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800549c:	4259      	negs	r1, r3
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	f001 0107 	and.w	r1, r1, #7
 80054a6:	bf58      	it	pl
 80054a8:	424b      	negpl	r3, r1
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	2301      	movs	r3, #1
 80054b0:	408b      	lsls	r3, r1
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	4013      	ands	r3, r2
 80054ba:	b259      	sxtb	r1, r3
 80054bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <graphic_set_pixel_RAM+0x11c>)
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	fb03 f300 	mul.w	r3, r3, r0
 80054c8:	4413      	add	r3, r2
 80054ca:	461a      	mov	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	b2ca      	uxtb	r2, r1
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e000      	b.n	80054d8 <graphic_set_pixel_RAM+0x110>
	    return;
 80054d6:	bf00      	nop
}
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000010 	.word	0x20000010
 80054e8:	20000012 	.word	0x20000012

080054ec <TIM1_UP_TIM16_IRQHandler>:
INTERRUPT CCMRAM void TIM1_UP_TIM16_IRQHandler(void) {	// Timer2 Interrupt Handler
 80054ec:	4668      	mov	r0, sp
 80054ee:	f020 0107 	bic.w	r1, r0, #7
 80054f2:	468d      	mov	sp, r1
 80054f4:	b589      	push	{r0, r3, r7, lr}
 80054f6:	af00      	add	r7, sp, #0
	if ( TIM16->SR & TIM_SR_UIF ) {
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01a      	beq.n	800553a <TIM1_UP_TIM16_IRQHandler+0x4e>
		TIM16->SR &= ~TIM_SR_UIF;						// Update interrupt Flag
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <TIM1_UP_TIM16_IRQHandler+0x58>)
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	4a0e      	ldr	r2, [pc, #56]	; (8005544 <TIM1_UP_TIM16_IRQHandler+0x58>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	6113      	str	r3, [r2, #16]
		if (refreshScreen == 0) return;
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <TIM1_UP_TIM16_IRQHandler+0x4c>
		ActualDMABuffer = TextBuffer;
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <TIM1_UP_TIM16_IRQHandler+0x60>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a0c      	ldr	r2, [pc, #48]	; (8005550 <TIM1_UP_TIM16_IRQHandler+0x64>)
 8005520:	6013      	str	r3, [r2, #0]
		sw_ssd1306_display();
 8005522:	f7fc fa4b 	bl	80019bc <sw_ssd1306_display>
		refreshScreen = 0;
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]
		gpio_pin_XOR( DEBUG_PORT1, DEBUG_PIN1 );
 800552c:	2102      	movs	r1, #2
 800552e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005532:	f7fc f972 	bl	800181a <gpio_pin_XOR>
 8005536:	e000      	b.n	800553a <TIM1_UP_TIM16_IRQHandler+0x4e>
		if (refreshScreen == 0) return;
 8005538:	bf00      	nop
}
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8005540:	4685      	mov	sp, r0
 8005542:	4770      	bx	lr
 8005544:	40014400 	.word	0x40014400
 8005548:	20000504 	.word	0x20000504
 800554c:	20000008 	.word	0x20000008
 8005550:	20000508 	.word	0x20000508
