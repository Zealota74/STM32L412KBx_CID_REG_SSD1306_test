
STM32L412KBx_CID_REG_SSD1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  08000190  08000190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 ccmram        0000018c  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008dc  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08004010  08004010  00020080  2**0
                  CONTENTS
  5 .ARM          00000000  08004010  08004010  00020080  2**0
                  CONTENTS
  6 .preinit_array 00000000  08004010  08004010  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000080  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000560  20000080  080040a0  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e0  080040a0  000205e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b4f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d89  00000000  00000000  00039bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0003c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000790  00000000  00000000  0003d260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d1e  00000000  00000000  0003d9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ccc8  00000000  00000000  0005170e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006aba9  00000000  00000000  0005e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c8f7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c8  00000000  00000000  000c8fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800358c 	.word	0x0800358c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800358c 	.word	0x0800358c

080001d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	6039      	str	r1, [r7, #0]
 80001da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	db0a      	blt.n	80001fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	490c      	ldr	r1, [pc, #48]	; (800021c <__NVIC_SetPriority+0x4c>)
 80001ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ee:	0112      	lsls	r2, r2, #4
 80001f0:	b2d2      	uxtb	r2, r2
 80001f2:	440b      	add	r3, r1
 80001f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f8:	e00a      	b.n	8000210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4908      	ldr	r1, [pc, #32]	; (8000220 <__NVIC_SetPriority+0x50>)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f003 030f 	and.w	r3, r3, #15
 8000206:	3b04      	subs	r3, #4
 8000208:	0112      	lsls	r2, r2, #4
 800020a:	b2d2      	uxtb	r2, r2
 800020c:	440b      	add	r3, r1
 800020e:	761a      	strb	r2, [r3, #24]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	e000e100 	.word	0xe000e100
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3b01      	subs	r3, #1
 8000230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000234:	d301      	bcc.n	800023a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000236:	2301      	movs	r3, #1
 8000238:	e00f      	b.n	800025a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <SysTick_Config+0x40>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3b01      	subs	r3, #1
 8000240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000242:	210f      	movs	r1, #15
 8000244:	f04f 30ff 	mov.w	r0, #4294967295
 8000248:	f7ff ffc2 	bl	80001d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SysTick_Config+0x40>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <SysTick_Config+0x40>)
 8000254:	2207      	movs	r2, #7
 8000256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	e000e010 	.word	0xe000e010

08000268 <main>:
FONT_INFO CurrentFont;

uint8_t zmienna1, zmienna2, zmienna3;
void key_proc1(void);

int main(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800026c:	f000 fd3a 	bl	8000ce4 <SystemClock_Config>
	RCC_gpio_init();
 8000270:	f000 feb4 	bl	8000fdc <RCC_gpio_init>
	sw_softTimers_init( 1, MICRO_SEC );
 8000274:	2102      	movs	r1, #2
 8000276:	2001      	movs	r0, #1
 8000278:	f002 fb9d 	bl	80029b6 <sw_softTimers_init>

	sw_i2c_simple_init();
 800027c:	f002 f9c8 	bl	8002610 <sw_i2c_simple_init>
	sw_led_debug_init();
 8000280:	f000 ff2e 	bl	80010e0 <sw_led_debug_init>
	sw_keyboard_init();
 8000284:	f000 fc7c 	bl	8000b80 <sw_keyboard_init>

	SysTick_Config( SystemCoreClock / 1000 );	// Systick on 1 ms
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <main+0x90>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <main+0x94>)
 800028e:	fba2 2303 	umull	r2, r3, r2, r3
 8000292:	099b      	lsrs	r3, r3, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffc5 	bl	8000224 <SysTick_Config>

	delay_ms(100);
 800029a:	2064      	movs	r0, #100	; 0x64
 800029c:	f002 fc3e 	bl	8002b1c <delay_ms>

	ADXL345__init();
 80002a0:	f000 fcaa 	bl	8000bf8 <ADXL345__init>

	sw_ssd1306_init();
 80002a4:	f001 f852 	bl	800134c <sw_ssd1306_init>
	delay_ms(100);
 80002a8:	2064      	movs	r0, #100	; 0x64
 80002aa:	f002 fc37 	bl	8002b1c <delay_ms>

//	VL53L0X__setup();
	delay_ms(100);
 80002ae:	2064      	movs	r0, #100	; 0x64
 80002b0:	f002 fc34 	bl	8002b1c <delay_ms>

	delay_ms(100);
 80002b4:	2064      	movs	r0, #100	; 0x64
 80002b6:	f002 fc31 	bl	8002b1c <delay_ms>
//	MPU6050__calibrateGyro(50);

//	I2CSTATUS status = sw_i2c_IsDeviceReady( ADDRESS_DEFAULT << 1, 3, 3 );
//	sw_i2c_slave_test( ADDRESS_DEFAULT << 1 );

	softTimer3 = 200;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <main+0x98>)
 80002bc:	22c8      	movs	r2, #200	; 0xc8
 80002be:	801a      	strh	r2, [r3, #0]
	register_measure_callback( pomiar );
 80002c0:	4810      	ldr	r0, [pc, #64]	; (8000304 <main+0x9c>)
 80002c2:	f000 fdd7 	bl	8000e74 <register_measure_callback>

//	paj7620_init( fps_120 );
	delay_ms(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f002 fc28 	bl	8002b1c <delay_ms>

//    register_gesture_callback( my_gesture, NULL );


	softTimer3 = 500;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <main+0x98>)
 80002ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002d2:	801a      	strh	r2, [r3, #0]
	while(1) {

//		SW_VCNL4010_MEASURE_EVENT();
//		PAJ7620_EVENT();

		if (softTimer2 == 0) {
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <main+0xa0>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d102      	bne.n	80002e4 <main+0x7c>
			softTimer2 = 200;
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <main+0xa0>)
 80002e0:	22c8      	movs	r2, #200	; 0xc8
 80002e2:	801a      	strh	r2, [r3, #0]
//			sw_led_xor();

//			mpu6050_test_loop();
//			VL53L0X__loop();
		}
		if ( !softTimer3 ) {
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <main+0x98>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f2      	bne.n	80002d4 <main+0x6c>
			softTimer3 = 100;
 80002ee:	4b04      	ldr	r3, [pc, #16]	; (8000300 <main+0x98>)
 80002f0:	2264      	movs	r2, #100	; 0x64
 80002f2:	801a      	strh	r2, [r3, #0]
		if (softTimer2 == 0) {
 80002f4:	e7ee      	b.n	80002d4 <main+0x6c>
 80002f6:	bf00      	nop
 80002f8:	20000000 	.word	0x20000000
 80002fc:	10624dd3 	.word	0x10624dd3
 8000300:	200005d2 	.word	0x200005d2
 8000304:	080005c5 	.word	0x080005c5
 8000308:	200005be 	.word	0x200005be

0800030c <key1_decoded>:
		}
	}
}


void key1_decoded(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	static int8_t counter1, counter2, counter3;
	if ( keyboard_ptr()->keyEvent == SHORT_PRESS ) {
 8000310:	f000 fc2c 	bl	8000b6c <keyboard_ptr>
 8000314:	4603      	mov	r3, r0
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b01      	cmp	r3, #1
 800031a:	d119      	bne.n	8000350 <key1_decoded+0x44>
//		sw_led_on();
//		sw_led_start_blinking( 2, 100 );
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
 800031c:	4b5d      	ldr	r3, [pc, #372]	; (8000494 <key1_decoded+0x188>)
 800031e:	f993 3000 	ldrsb.w	r3, [r3]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	3301      	adds	r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	b25a      	sxtb	r2, r3
 800032a:	4b5a      	ldr	r3, [pc, #360]	; (8000494 <key1_decoded+0x188>)
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	4b59      	ldr	r3, [pc, #356]	; (8000494 <key1_decoded+0x188>)
 8000330:	f993 3000 	ldrsb.w	r3, [r3]
 8000334:	ee07 3a90 	vmov	s15, r3
 8000338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <key1_decoded+0x18c>)
 800033e:	eeb0 0a67 	vmov.f32	s0, s15
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f001 fb99 	bl	8001a7c <TEXT_display_float>
		sw_ssd1306_display();
 800034a:	f000 ff87 	bl	800125c <sw_ssd1306_display>
	} else
	if ( keyboard_ptr()->keyEvent == KEY_REPEAT ) {
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
		sw_ssd1306_display();
	}
}
 800034e:	e09e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == MEDIUM_PRESS ) {
 8000350:	f000 fc0c 	bl	8000b6c <keyboard_ptr>
 8000354:	4603      	mov	r3, r0
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b02      	cmp	r3, #2
 800035a:	d119      	bne.n	8000390 <key1_decoded+0x84>
		TEXT_display_float( 0, 16,  ++counter2,  	&TextY );
 800035c:	4b4f      	ldr	r3, [pc, #316]	; (800049c <key1_decoded+0x190>)
 800035e:	f993 3000 	ldrsb.w	r3, [r3]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	b25a      	sxtb	r2, r3
 800036a:	4b4c      	ldr	r3, [pc, #304]	; (800049c <key1_decoded+0x190>)
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	4b4b      	ldr	r3, [pc, #300]	; (800049c <key1_decoded+0x190>)
 8000370:	f993 3000 	ldrsb.w	r3, [r3]
 8000374:	ee07 3a90 	vmov	s15, r3
 8000378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800037c:	4a48      	ldr	r2, [pc, #288]	; (80004a0 <key1_decoded+0x194>)
 800037e:	eeb0 0a67 	vmov.f32	s0, s15
 8000382:	2110      	movs	r1, #16
 8000384:	2000      	movs	r0, #0
 8000386:	f001 fb79 	bl	8001a7c <TEXT_display_float>
		sw_ssd1306_display();
 800038a:	f000 ff67 	bl	800125c <sw_ssd1306_display>
}
 800038e:	e07e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == DOUBLE_PRESS ) {
 8000390:	f000 fbec 	bl	8000b6c <keyboard_ptr>
 8000394:	4603      	mov	r3, r0
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b05      	cmp	r3, #5
 800039a:	d119      	bne.n	80003d0 <key1_decoded+0xc4>
		TEXT_display_float( 0, 32,  ++counter3,  	&TextZ );
 800039c:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <key1_decoded+0x198>)
 800039e:	f993 3000 	ldrsb.w	r3, [r3]
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	3301      	adds	r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	b25a      	sxtb	r2, r3
 80003aa:	4b3e      	ldr	r3, [pc, #248]	; (80004a4 <key1_decoded+0x198>)
 80003ac:	701a      	strb	r2, [r3, #0]
 80003ae:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <key1_decoded+0x198>)
 80003b0:	f993 3000 	ldrsb.w	r3, [r3]
 80003b4:	ee07 3a90 	vmov	s15, r3
 80003b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003bc:	4a3a      	ldr	r2, [pc, #232]	; (80004a8 <key1_decoded+0x19c>)
 80003be:	eeb0 0a67 	vmov.f32	s0, s15
 80003c2:	2120      	movs	r1, #32
 80003c4:	2000      	movs	r0, #0
 80003c6:	f001 fb59 	bl	8001a7c <TEXT_display_float>
		sw_ssd1306_display();
 80003ca:	f000 ff47 	bl	800125c <sw_ssd1306_display>
}
 80003ce:	e05e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == VLONG_PRESS ) {
 80003d0:	f000 fbcc 	bl	8000b6c <keyboard_ptr>
 80003d4:	4603      	mov	r3, r0
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b04      	cmp	r3, #4
 80003da:	d139      	bne.n	8000450 <key1_decoded+0x144>
		counter3 = 0; counter2 = 0; counter1 = 0;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <key1_decoded+0x198>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <key1_decoded+0x190>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <key1_decoded+0x188>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
		TEXT_display_float( 0,  0,  counter1,  	&TextX );
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <key1_decoded+0x188>)
 80003f0:	f993 3000 	ldrsb.w	r3, [r3]
 80003f4:	ee07 3a90 	vmov	s15, r3
 80003f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fc:	4a26      	ldr	r2, [pc, #152]	; (8000498 <key1_decoded+0x18c>)
 80003fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000402:	2100      	movs	r1, #0
 8000404:	2000      	movs	r0, #0
 8000406:	f001 fb39 	bl	8001a7c <TEXT_display_float>
		TEXT_display_float( 0, 16,  counter2,  	&TextY );
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <key1_decoded+0x190>)
 800040c:	f993 3000 	ldrsb.w	r3, [r3]
 8000410:	ee07 3a90 	vmov	s15, r3
 8000414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000418:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <key1_decoded+0x194>)
 800041a:	eeb0 0a67 	vmov.f32	s0, s15
 800041e:	2110      	movs	r1, #16
 8000420:	2000      	movs	r0, #0
 8000422:	f001 fb2b 	bl	8001a7c <TEXT_display_float>
		TEXT_display_float( 0, 32,  counter3,  	&TextZ );
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <key1_decoded+0x198>)
 8000428:	f993 3000 	ldrsb.w	r3, [r3]
 800042c:	ee07 3a90 	vmov	s15, r3
 8000430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <key1_decoded+0x19c>)
 8000436:	eeb0 0a67 	vmov.f32	s0, s15
 800043a:	2120      	movs	r1, #32
 800043c:	2000      	movs	r0, #0
 800043e:	f001 fb1d 	bl	8001a7c <TEXT_display_float>
		sw_led_start_blinking( 3, 100 );
 8000442:	2164      	movs	r1, #100	; 0x64
 8000444:	2003      	movs	r0, #3
 8000446:	f000 fe6d 	bl	8001124 <sw_led_start_blinking>
		sw_ssd1306_display();
 800044a:	f000 ff07 	bl	800125c <sw_ssd1306_display>
}
 800044e:	e01e      	b.n	800048e <key1_decoded+0x182>
	if ( keyboard_ptr()->keyEvent == KEY_REPEAT ) {
 8000450:	f000 fb8c 	bl	8000b6c <keyboard_ptr>
 8000454:	4603      	mov	r3, r0
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b06      	cmp	r3, #6
 800045a:	d118      	bne.n	800048e <key1_decoded+0x182>
		TEXT_display_float( 0, 0,  ++counter1,  	&TextX );
 800045c:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <key1_decoded+0x188>)
 800045e:	f993 3000 	ldrsb.w	r3, [r3]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	3301      	adds	r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	b25a      	sxtb	r2, r3
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <key1_decoded+0x188>)
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <key1_decoded+0x188>)
 8000470:	f993 3000 	ldrsb.w	r3, [r3]
 8000474:	ee07 3a90 	vmov	s15, r3
 8000478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800047c:	4a06      	ldr	r2, [pc, #24]	; (8000498 <key1_decoded+0x18c>)
 800047e:	eeb0 0a67 	vmov.f32	s0, s15
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f001 faf9 	bl	8001a7c <TEXT_display_float>
		sw_ssd1306_display();
 800048a:	f000 fee7 	bl	800125c <sw_ssd1306_display>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000009c 	.word	0x2000009c
 8000498:	2000059c 	.word	0x2000059c
 800049c:	2000009d 	.word	0x2000009d
 80004a0:	2000057c 	.word	0x2000057c
 80004a4:	2000009e 	.word	0x2000009e
 80004a8:	20000530 	.word	0x20000530

080004ac <key2_decoded>:
void key2_decoded(void) { sw_led_xor(); }
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	f000 fe00 	bl	80010b4 <sw_led_xor>
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <srednia1>:


#define MEDIAL	20
static float32_t srednia1( float32_t wartosc ) {
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	ed87 0a01 	vstr	s0, [r7, #4]
	static float32_t bufor1[MEDIAL] 		= {0};
	static uint16_t kolejny_pomiar = 0;
	bufor1[ kolejny_pomiar++ ] = wartosc;
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <srednia1+0x84>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	b291      	uxth	r1, r2
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <srednia1+0x84>)
 80004cc:	8011      	strh	r1, [r2, #0]
 80004ce:	4a1c      	ldr	r2, [pc, #112]	; (8000540 <srednia1+0x88>)
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	601a      	str	r2, [r3, #0]
	if (kolejny_pomiar == MEDIAL) {
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <srednia1+0x84>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	2b14      	cmp	r3, #20
 80004de:	d102      	bne.n	80004e6 <srednia1+0x2e>
		kolejny_pomiar = 0;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <srednia1+0x84>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
	}

	float32_t wynik = 0;
 80004e6:	f04f 0300 	mov.w	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<MEDIAL; i++ ) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	e00e      	b.n	8000510 <srednia1+0x58>
		wynik = wynik + bufor1[i];
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <srednia1+0x88>)
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	edd3 7a00 	vldr	s15, [r3]
 80004fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000506:	edc7 7a03 	vstr	s15, [r7, #12]
	for ( uint8_t i=0; i<MEDIAL; i++ ) {
 800050a:	7afb      	ldrb	r3, [r7, #11]
 800050c:	3301      	adds	r3, #1
 800050e:	72fb      	strb	r3, [r7, #11]
 8000510:	7afb      	ldrb	r3, [r7, #11]
 8000512:	2b13      	cmp	r3, #19
 8000514:	d9ed      	bls.n	80004f2 <srednia1+0x3a>
	}
	wynik = (float32_t)wynik / MEDIAL;
 8000516:	ed97 7a03 	vldr	s14, [r7, #12]
 800051a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800051e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000522:	edc7 7a03 	vstr	s15, [r7, #12]
	return wynik;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	ee07 3a90 	vmov	s15, r3
}
 800052c:	eeb0 0a67 	vmov.f32	s0, s15
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200000a0 	.word	0x200000a0
 8000540:	200000a4 	.word	0x200000a4

08000544 <srednia2>:

}

// ------------ Definicje funkcji --------------

static uint16_t srednia2( uint16_t wartosc ) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	static uint16_t bufor2[5] = {0,0,0,0,0};
	static uint8_t kolejny_pomiar = 0;
	bufor2 [ kolejny_pomiar++ ] = wartosc;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <srednia2+0x74>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	b2d1      	uxtb	r1, r2
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <srednia2+0x74>)
 8000558:	7011      	strb	r1, [r2, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <srednia2+0x78>)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if (kolejny_pomiar == 5) {
 8000564:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <srednia2+0x74>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d102      	bne.n	8000572 <srednia2+0x2e>
		kolejny_pomiar = 0;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <srednia2+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	uint32_t wynik = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 8000576:	2300      	movs	r3, #0
 8000578:	72fb      	strb	r3, [r7, #11]
 800057a:	e00a      	b.n	8000592 <srednia2+0x4e>
		wynik = wynik + bufor2[i];
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <srednia2+0x78>)
 8000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
	for ( uint8_t i=0; i<5; i++ ) {
 800058c:	7afb      	ldrb	r3, [r7, #11]
 800058e:	3301      	adds	r3, #1
 8000590:	72fb      	strb	r3, [r7, #11]
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d9f1      	bls.n	800057c <srednia2+0x38>
	}
	wynik = (uint16_t)wynik / 5;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	b29b      	uxth	r3, r3
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <srednia2+0x7c>)
 800059e:	fba2 2303 	umull	r2, r3, r2, r3
 80005a2:	089b      	lsrs	r3, r3, #2
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	return wynik;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	b29b      	uxth	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	200000f4 	.word	0x200000f4
 80005bc:	200000f8 	.word	0x200000f8
 80005c0:	cccccccd 	.word	0xcccccccd

080005c4 <pomiar>:


void pomiar( T_RESULTS *pomiar1 ) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint16_t result;

	// Składamy wynik 16 bitowy z 8 bitowych
	result = ( (uint16_t)pomiar1->proximityHigh<<8 ) | pomiar1->proximityLow;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	78db      	ldrb	r3, [r3, #3]
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b21b      	sxth	r3, r3
 80005de:	81fb      	strh	r3, [r7, #14]
	proximityAverage = srednia1(result ),
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	ee07 3a90 	vmov	s15, r3
 80005e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	f7ff ff63 	bl	80004b8 <srednia1>
 80005f2:	eef0 7a40 	vmov.f32	s15, s0
 80005f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005fa:	ee17 3a90 	vmov	r3, s15
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <pomiar+0x78>)
 8000602:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 0, result, 1 );

	result = ( (uint16_t)pomiar1->ambientHigh<<8 )   | pomiar1->ambientLow;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	b21b      	sxth	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b21b      	sxth	r3, r3
 8000616:	81fb      	strh	r3, [r7, #14]
	ambilightAverage = srednia2(result);
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff92 	bl	8000544 <srednia2>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <pomiar+0x7c>)
 8000626:	801a      	strh	r2, [r3, #0]
//	glcd_int( 0, 36, result, 1 );

	gpio_pin_XOR( DEBUG_PORT0, DEBUG_PIN0 );
 8000628:	2108      	movs	r1, #8
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f000 fcfa 	bl	8001026 <gpio_pin_XOR>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000598 	.word	0x20000598
 8000640:	20000596 	.word	0x20000596

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <SystemInit+0x5c>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x60>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <SystemInit+0x60>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <SystemInit+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <SystemInit+0x60>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <SystemInit+0x60>)
 80006b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80006bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80006c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <SystemInit+0x60>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <SystemInit+0x60>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <SystemInit+0x60>)
 80006d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SystemInit+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	40021000 	.word	0x40021000

080006f0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80006f6:	4b4f      	ldr	r3, [pc, #316]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d107      	bne.n	8000712 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000702:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	e005      	b.n	800071e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <SystemCoreClockUpdate+0x148>)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000728:	4b42      	ldr	r3, [pc, #264]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	f003 030c 	and.w	r3, r3, #12
 8000730:	2b0c      	cmp	r3, #12
 8000732:	d866      	bhi.n	8000802 <SystemCoreClockUpdate+0x112>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <SystemCoreClockUpdate+0x4c>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	08000771 	.word	0x08000771
 8000740:	08000803 	.word	0x08000803
 8000744:	08000803 	.word	0x08000803
 8000748:	08000803 	.word	0x08000803
 800074c:	08000779 	.word	0x08000779
 8000750:	08000803 	.word	0x08000803
 8000754:	08000803 	.word	0x08000803
 8000758:	08000803 	.word	0x08000803
 800075c:	08000781 	.word	0x08000781
 8000760:	08000803 	.word	0x08000803
 8000764:	08000803 	.word	0x08000803
 8000768:	08000803 	.word	0x08000803
 800076c:	08000789 	.word	0x08000789
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	6013      	str	r3, [r2, #0]
      break;
 8000776:	e048      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <SystemCoreClockUpdate+0x14c>)
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <SystemCoreClockUpdate+0x150>)
 800077c:	601a      	str	r2, [r3, #0]
      break;
 800077e:	e044      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <SystemCoreClockUpdate+0x154>)
 8000784:	601a      	str	r2, [r3, #0]
      break;
 8000786:	e040      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <SystemCoreClockUpdate+0x144>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	3301      	adds	r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d003      	beq.n	80007ae <SystemCoreClockUpdate+0xbe>
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d006      	beq.n	80007ba <SystemCoreClockUpdate+0xca>
 80007ac:	e00b      	b.n	80007c6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <SystemCoreClockUpdate+0x150>)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	613b      	str	r3, [r7, #16]
          break;
 80007b8:	e00b      	b.n	80007d2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <SystemCoreClockUpdate+0x154>)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	613b      	str	r3, [r7, #16]
          break;
 80007c4:	e005      	b.n	80007d2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	613b      	str	r3, [r7, #16]
          break;
 80007d0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <SystemCoreClockUpdate+0x144>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0e5b      	lsrs	r3, r3, #25
 80007ea:	f003 0303 	and.w	r3, r3, #3
 80007ee:	3301      	adds	r3, #1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <SystemCoreClockUpdate+0x14c>)
 80007fe:	6013      	str	r3, [r2, #0]
      break;
 8000800:	e003      	b.n	800080a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	6013      	str	r3, [r2, #0]
      break;
 8000808:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <SystemCoreClockUpdate+0x144>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	091b      	lsrs	r3, r3, #4
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <SystemCoreClockUpdate+0x158>)
 8000816:	5cd3      	ldrb	r3, [r2, r3]
 8000818:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <SystemCoreClockUpdate+0x14c>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	fa22 f303 	lsr.w	r3, r2, r3
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <SystemCoreClockUpdate+0x14c>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	371c      	adds	r7, #28
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	08003748 	.word	0x08003748
 800083c:	20000000 	.word	0x20000000
 8000840:	00f42400 	.word	0x00f42400
 8000844:	007a1200 	.word	0x007a1200
 8000848:	08003738 	.word	0x08003738

0800084c <sw_get_keys_simple>:
#	define BTN2_PIN				PB5
#	define learn_key1_pressed()	gpio_pin_READ( BTN1_PORT, BTN1_PIN )
#	define learn_key2_pressed()	gpio_pin_READ( BTN2_PORT, BTN2_PIN )

	/********************************* Obsługa kilku klawiszy  *******************************/
	static inline uint8_t sw_get_keys_simple( void ) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	2310      	movs	r3, #16
 8000854:	80fb      	strh	r3, [r7, #6]
extern void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin );
extern void RCC_gpio_init( void );
extern void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num );

static INLINE uint8_t gpio_pin_READ( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
	if ( !(port->IDR & pin) ) return 1;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <sw_get_keys_simple+0x50>)
 8000858:	691a      	ldr	r2, [r3, #16]
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <sw_get_keys_simple+0x1a>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <sw_get_keys_simple+0x1c>
	else return 0;
 8000866:	2300      	movs	r3, #0
		if ( learn_key1_pressed() )
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <sw_get_keys_simple+0x24>
			return 1;									// Przycisk 1 wciśnięty
 800086c:	2301      	movs	r3, #1
 800086e:	e00f      	b.n	8000890 <sw_get_keys_simple+0x44>
 8000870:	2320      	movs	r3, #32
 8000872:	80bb      	strh	r3, [r7, #4]
	if ( !(port->IDR & pin) ) return 1;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <sw_get_keys_simple+0x50>)
 8000876:	691a      	ldr	r2, [r3, #16]
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <sw_get_keys_simple+0x38>
 8000880:	2301      	movs	r3, #1
 8000882:	e000      	b.n	8000886 <sw_get_keys_simple+0x3a>
	else return 0;
 8000884:	2300      	movs	r3, #0
		else
		if ( learn_key2_pressed() )
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <sw_get_keys_simple+0x42>
			return 2;
 800088a:	2302      	movs	r3, #2
 800088c:	e000      	b.n	8000890 <sw_get_keys_simple+0x44>
		return 0;
 800088e:	2300      	movs	r3, #0
	}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	48000400 	.word	0x48000400

080008a0 <key_pressed>:
	return keyEvent;
}
/************************************************************************/

/********************** Main machine state analyzing ********************/
static KEY_EVENT_t key_pressed( void ) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	static  uint8_t  	lastState = keyRELEASED;
			KEY_EVENT_t keyEvent  = false;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]

	uint8_t pressKeyCheck = sw_get_keys_simple();
 80008aa:	f7ff ffcf 	bl	800084c <sw_get_keys_simple>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]

	if (pressKeyCheck) {
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d005      	beq.n	80008c4 <key_pressed+0x24>
		keyboard.keyCoded = pressKeyCheck;
 80008b8:	4aa4      	ldr	r2, [pc, #656]	; (8000b4c <key_pressed+0x2ac>)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	7053      	strb	r3, [r2, #1]
		pressKeyCheck = keyPRESSED;
 80008be:	2301      	movs	r3, #1
 80008c0:	71bb      	strb	r3, [r7, #6]
 80008c2:	e001      	b.n	80008c8 <key_pressed+0x28>
	} else {
		pressKeyCheck = keyRELEASED;
 80008c4:	2300      	movs	r3, #0
 80008c6:	71bb      	strb	r3, [r7, #6]
	}

	uint8_t slope = analyze_slope( pressKeyCheck, lastState );
 80008c8:	4ba1      	ldr	r3, [pc, #644]	; (8000b50 <key_pressed+0x2b0>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	713b      	strb	r3, [r7, #4]
 80008d0:	4613      	mov	r3, r2
 80008d2:	70fb      	strb	r3, [r7, #3]
	if 		(state == keyPRESSED  && lastState == keyRELEASED)
 80008d4:	793b      	ldrb	r3, [r7, #4]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <key_pressed+0x46>
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <key_pressed+0x46>
		state = stateFALL;
 80008e0:	2301      	movs	r3, #1
 80008e2:	713b      	strb	r3, [r7, #4]
 80008e4:	e019      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyPRESSED  && lastState == keyPRESSED)
 80008e6:	793b      	ldrb	r3, [r7, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <key_pressed+0x58>
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d102      	bne.n	80008f8 <key_pressed+0x58>
		state = stateLOW;
 80008f2:	2303      	movs	r3, #3
 80008f4:	713b      	strb	r3, [r7, #4]
 80008f6:	e010      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyRELEASED && lastState == keyPRESSED)
 80008f8:	793b      	ldrb	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d105      	bne.n	800090a <key_pressed+0x6a>
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d102      	bne.n	800090a <key_pressed+0x6a>
		state = stateRISE;
 8000904:	2302      	movs	r3, #2
 8000906:	713b      	strb	r3, [r7, #4]
 8000908:	e007      	b.n	800091a <key_pressed+0x7a>
	else if (state == keyRELEASED && lastState == keyRELEASED)
 800090a:	793b      	ldrb	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <key_pressed+0x7a>
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <key_pressed+0x7a>
		state = stateHIGH;
 8000916:	2304      	movs	r3, #4
 8000918:	713b      	strb	r3, [r7, #4]
	switch ( state ) {
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d002      	beq.n	8000926 <key_pressed+0x86>
 8000920:	2b02      	cmp	r3, #2
 8000922:	d015      	beq.n	8000950 <key_pressed+0xb0>
		default: break;
 8000924:	e034      	b.n	8000990 <key_pressed+0xf0>
			timeFallRise = millis();
 8000926:	f002 f8ed 	bl	8002b04 <millis>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b89      	ldr	r3, [pc, #548]	; (8000b54 <key_pressed+0x2b4>)
 8000930:	801a      	strh	r2, [r3, #0]
			if (speedPressCounter++ == 0) {
 8000932:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <key_pressed+0x2b8>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	b2d1      	uxtb	r1, r2
 800093a:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <key_pressed+0x2b8>)
 800093c:	7011      	strb	r1, [r2, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d123      	bne.n	800098a <key_pressed+0xea>
				timeFall2Rise = millis();
 8000942:	f002 f8df 	bl	8002b04 <millis>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b84      	ldr	r3, [pc, #528]	; (8000b5c <key_pressed+0x2bc>)
 800094c:	801a      	strh	r2, [r3, #0]
			break;
 800094e:	e01c      	b.n	800098a <key_pressed+0xea>
			timeFallRise = millis() - timeFallRise;
 8000950:	f002 f8d8 	bl	8002b04 <millis>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b7e      	ldr	r3, [pc, #504]	; (8000b54 <key_pressed+0x2b4>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b7c      	ldr	r3, [pc, #496]	; (8000b54 <key_pressed+0x2b4>)
 8000962:	801a      	strh	r2, [r3, #0]
			if ( speedPressCounter++ == (EDGE_COUNTER - 1) ) {
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <key_pressed+0x2b8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	b2d1      	uxtb	r1, r2
 800096c:	4a7a      	ldr	r2, [pc, #488]	; (8000b58 <key_pressed+0x2b8>)
 800096e:	7011      	strb	r1, [r2, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d10c      	bne.n	800098e <key_pressed+0xee>
				timeFall2Rise = millis() - timeFall2Rise;
 8000974:	f002 f8c6 	bl	8002b04 <millis>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b77      	ldr	r3, [pc, #476]	; (8000b5c <key_pressed+0x2bc>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b75      	ldr	r3, [pc, #468]	; (8000b5c <key_pressed+0x2bc>)
 8000986:	801a      	strh	r2, [r3, #0]
			break;
 8000988:	e001      	b.n	800098e <key_pressed+0xee>
			break;
 800098a:	bf00      	nop
 800098c:	e000      	b.n	8000990 <key_pressed+0xf0>
			break;
 800098e:	bf00      	nop
	return state;
 8000990:	793b      	ldrb	r3, [r7, #4]
	uint8_t slope = analyze_slope( pressKeyCheck, lastState );
 8000992:	717b      	strb	r3, [r7, #5]
	switch ( slope ) {
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	3b01      	subs	r3, #1
 8000998:	2b03      	cmp	r3, #3
 800099a:	f200 80c7 	bhi.w	8000b2c <key_pressed+0x28c>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <key_pressed+0x104>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	08000a7d 	.word	0x08000a7d
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	08000a97 	.word	0x08000a97
	if ( keyAction == action_idle ) {
 80009b4:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <key_pressed+0x2c0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d105      	bne.n	80009c8 <key_pressed+0x128>
		keyAction 	  = action_debounce;
 80009bc:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <key_pressed+0x2c0>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
		debounceTimer = DEBOUNCE_TIME;
 80009c2:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <key_pressed+0x2c4>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	801a      	strh	r2, [r3, #0]
}
 80009c8:	bf00      	nop
		case stateFALL:
			analyze_state_fall();
			break;
 80009ca:	e0b0      	b.n	8000b2e <key_pressed+0x28e>
	KEY_EVENT_t keyEvent = NO_EVENT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	70bb      	strb	r3, [r7, #2]
	switch ( keyAction ) {
 80009d0:	4b63      	ldr	r3, [pc, #396]	; (8000b60 <key_pressed+0x2c0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d02f      	beq.n	8000a38 <key_pressed+0x198>
 80009d8:	2b04      	cmp	r3, #4
 80009da:	dc4b      	bgt.n	8000a74 <key_pressed+0x1d4>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d002      	beq.n	80009e6 <key_pressed+0x146>
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d013      	beq.n	8000a0c <key_pressed+0x16c>
		default:break;
 80009e4:	e046      	b.n	8000a74 <key_pressed+0x1d4>
			if ( debounceTimer == 0 ) {
 80009e6:	4b5f      	ldr	r3, [pc, #380]	; (8000b64 <key_pressed+0x2c4>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d106      	bne.n	80009fe <key_pressed+0x15e>
				keyAction 	  = action_check;
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <key_pressed+0x2c0>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]
				debounceTimer = SHORT_MAX_TIME;
 80009f6:	4b5b      	ldr	r3, [pc, #364]	; (8000b64 <key_pressed+0x2c4>)
 80009f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009fc:	801a      	strh	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 1 );
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fb20 	bl	800104a <gpio_pin_IMPULSES>
			break;
 8000a0a:	e034      	b.n	8000a76 <key_pressed+0x1d6>
			if ( debounceTimer == 0 ) {
 8000a0c:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <key_pressed+0x2c4>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d109      	bne.n	8000a2a <key_pressed+0x18a>
				keyAction 	  = action_repeat;
 8000a16:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <key_pressed+0x2c0>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	701a      	strb	r2, [r3, #0]
				debounceTimer = MEDIUM_MAX_TIME;
 8000a1c:	4b51      	ldr	r3, [pc, #324]	; (8000b64 <key_pressed+0x2c4>)
 8000a1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a22:	801a      	strh	r2, [r3, #0]
				repeatCounter = 0;
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <key_pressed+0x2c8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 2 );
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fb0a 	bl	800104a <gpio_pin_IMPULSES>
			break;
 8000a36:	e01e      	b.n	8000a76 <key_pressed+0x1d6>
			if ( debounceTimer == 0 ) {
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <key_pressed+0x2c4>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <key_pressed+0x1c6>
				debounceTimer = REPEAT_TIME;
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <key_pressed+0x2c4>)
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	801a      	strh	r2, [r3, #0]
				repeatCounter++;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <key_pressed+0x2c8>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <key_pressed+0x2c8>)
 8000a52:	701a      	strb	r2, [r3, #0]
				if ( repeatCounter == VLONG_TIME_CNT ) {
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <key_pressed+0x2c8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b14      	cmp	r3, #20
 8000a5a:	d102      	bne.n	8000a62 <key_pressed+0x1c2>
					keyEvent = VLONG_PRESS;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	70bb      	strb	r3, [r7, #2]
 8000a60:	e001      	b.n	8000a66 <key_pressed+0x1c6>
					keyEvent = KEY_REPEAT;
 8000a62:	2306      	movs	r3, #6
 8000a64:	70bb      	strb	r3, [r7, #2]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 3 );
 8000a66:	2203      	movs	r2, #3
 8000a68:	2108      	movs	r1, #8
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 faec 	bl	800104a <gpio_pin_IMPULSES>
			break;
 8000a72:	e000      	b.n	8000a76 <key_pressed+0x1d6>
		default:break;
 8000a74:	bf00      	nop
	return keyEvent;
 8000a76:	78bb      	ldrb	r3, [r7, #2]
		case stateLOW:
			keyEvent = analyze_state_low();
 8000a78:	71fb      	strb	r3, [r7, #7]
			break;
 8000a7a:	e058      	b.n	8000b2e <key_pressed+0x28e>
	if ( keyAction == action_check || keyAction == action_repeat ) {
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <key_pressed+0x2c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d003      	beq.n	8000a8c <key_pressed+0x1ec>
 8000a84:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <key_pressed+0x2c0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d102      	bne.n	8000a92 <key_pressed+0x1f2>
		debounceTimer = DEBOUNCE_TIME;
 8000a8c:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <key_pressed+0x2c4>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	801a      	strh	r2, [r3, #0]
}
 8000a92:	bf00      	nop
		case stateRISE:
			analyze_state_rise();
			break;
 8000a94:	e04b      	b.n	8000b2e <key_pressed+0x28e>
	KEY_EVENT_t keyEvent = NO_EVENT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	707b      	strb	r3, [r7, #1]
	switch ( keyAction ) {
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <key_pressed+0x2c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d002      	beq.n	8000aa8 <key_pressed+0x208>
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d027      	beq.n	8000af6 <key_pressed+0x256>
		default: break;
 8000aa6:	e03e      	b.n	8000b26 <key_pressed+0x286>
			if ( debounceTimer == 0 ) {
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <key_pressed+0x2c4>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11a      	bne.n	8000ae8 <key_pressed+0x248>
				if ( timeFallRise > SHORT_MIN_TIME ) {
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <key_pressed+0x2b4>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d905      	bls.n	8000ac6 <key_pressed+0x226>
					speedPressCounter = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <key_pressed+0x2b8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
					keyEvent = SHORT_PRESS;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	707b      	strb	r3, [r7, #1]
 8000ac4:	e00d      	b.n	8000ae2 <key_pressed+0x242>
					if ( speedPressCounter == EDGE_COUNTER ) {
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <key_pressed+0x2b8>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d109      	bne.n	8000ae2 <key_pressed+0x242>
						if ( timeFall2Rise < MULTI_PRESS_TIME ) {
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <key_pressed+0x2bc>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad6:	d201      	bcs.n	8000adc <key_pressed+0x23c>
							keyEvent = DOUBLE_PRESS;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	707b      	strb	r3, [r7, #1]
						speedPressCounter = 0;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <key_pressed+0x2b8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
				keyAction = action_idle;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <key_pressed+0x2c0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 4 );
 8000ae8:	2204      	movs	r2, #4
 8000aea:	2108      	movs	r1, #8
 8000aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af0:	f000 faab 	bl	800104a <gpio_pin_IMPULSES>
			break;
 8000af4:	e017      	b.n	8000b26 <key_pressed+0x286>
			if ( debounceTimer == 0 ) {
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <key_pressed+0x2c4>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10b      	bne.n	8000b18 <key_pressed+0x278>
				if ( repeatCounter == 0 ) {
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <key_pressed+0x2c8>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <key_pressed+0x26c>
					keyEvent = MEDIUM_PRESS;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	707b      	strb	r3, [r7, #1]
				speedPressCounter = 0;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <key_pressed+0x2b8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
				keyAction = action_idle;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <key_pressed+0x2c0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
			gpio_pin_IMPULSES( DEBUG_PORT0, DEBUG_PIN0, 5 );
 8000b18:	2205      	movs	r2, #5
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fa93 	bl	800104a <gpio_pin_IMPULSES>
			break;
 8000b24:	bf00      	nop
	return keyEvent;
 8000b26:	787b      	ldrb	r3, [r7, #1]
		case stateHIGH:
			keyEvent = analyze_state_high();
 8000b28:	71fb      	strb	r3, [r7, #7]
			break;
 8000b2a:	e000      	b.n	8000b2e <key_pressed+0x28e>
		default:
			break;
 8000b2c:	bf00      	nop
	}
	lastState = pressKeyCheck;
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <key_pressed+0x2b0>)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	7013      	strb	r3, [r2, #0]
	if (keyboard.keyCoded)return keyEvent;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <key_pressed+0x2ac>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <key_pressed+0x2a0>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	e000      	b.n	8000b42 <key_pressed+0x2a2>
	else  		 		  return NO_EVENT;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000104 	.word	0x20000104
 8000b50:	2000010e 	.word	0x2000010e
 8000b54:	2000010a 	.word	0x2000010a
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	20000106 	.word	0x20000106
 8000b64:	200005b8 	.word	0x200005b8
 8000b68:	20000107 	.word	0x20000107

08000b6c <keyboard_ptr>:
/************************************************************************/

/************************ Public functions ******************************/
KEYB_t * keyboard_ptr(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return &keyboard;
 8000b70:	4b02      	ldr	r3, [pc, #8]	; (8000b7c <keyboard_ptr+0x10>)
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20000104 	.word	0x20000104

08000b80 <sw_keyboard_init>:

// ---------------------- Main init function -----------------------------
void sw_keyboard_init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
#ifdef BTN1_PORT
	gpio_pin_cfg( BTN1_PORT, BTN1_PIN, gpio_mode_in_PU );
 8000b84:	2210      	movs	r2, #16
 8000b86:	2110      	movs	r1, #16
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <sw_keyboard_init+0x1c>)
 8000b8a:	f000 f995 	bl	8000eb8 <gpio_pin_cfg>
#endif
#ifdef BTN2_PORT
	gpio_pin_cfg( BTN2_PORT, BTN2_PIN, gpio_mode_in_PU );
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2120      	movs	r1, #32
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <sw_keyboard_init+0x1c>)
 8000b94:	f000 f990 	bl	8000eb8 <gpio_pin_cfg>
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <SW_KEYBOARD_EVENT>:
// -----------------------------------------------------------------------

void SW_KEYBOARD_EVENT( void ) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	keyboard.keyEvent = key_pressed();
 8000ba4:	f7ff fe7c 	bl	80008a0 <key_pressed>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bae:	701a      	strb	r2, [r3, #0]

	if ( keyboard.keyEvent != NO_EVENT ) {
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d019      	beq.n	8000bec <SW_KEYBOARD_EVENT+0x4c>
		if( KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback ) {
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <SW_KEYBOARD_EVENT+0x54>)
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00f      	beq.n	8000bec <SW_KEYBOARD_EVENT+0x4c>
			KeysTab[ keyboard.keyCoded - 1 ].keyboard_callback();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <SW_KEYBOARD_EVENT+0x54>)
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	4413      	add	r3, r2
 8000bd8:	3308      	adds	r3, #8
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4798      	blx	r3
	keyboard.keyEvent = NO_EVENT;
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	keyboard.keyCoded = NO_KEY;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <SW_KEYBOARD_EVENT+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	705a      	strb	r2, [r3, #1]
}
 8000bea:	bf00      	nop
			machine_state_reset();
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000104 	.word	0x20000104
 8000bf4:	08003778 	.word	0x08003778

08000bf8 <ADXL345__init>:

void ADXL345__start_measure(void) {
	sw_i2c_write_reg8( ADXL345_I2C_ADDR, ADXL345_REG_POWER_CTL, ( 1<<3) ); // Third bit
}

I2CSTATUS ADXL345__init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	I2CSTATUS status = sw_i2c_slave_test( ADXL345_I2C_ADDR, 3, 100 );
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	2103      	movs	r1, #3
 8000c02:	203a      	movs	r0, #58	; 0x3a
 8000c04:	f001 fd86 	bl	8002714 <sw_i2c_slave_test>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
	return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_I2C_Mem_Read>:
#define I2C_TIMEOUT 0

float Acc_Scale;
float Gyr_Scale;

static I2CSTATUS HAL_I2C_Mem_Read ( uint8_t devAddress, uint8_t regAddress, uint8_t regSize, uint8_t * buff, uint8_t len, uint8_t timeout ) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	460b      	mov	r3, r1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	4613      	mov	r3, r2
 8000c28:	717b      	strb	r3, [r7, #5]
	I2CSTATUS status;
	status = sw_i2c_read_bulk ( devAddress, regAddress, len, buff );
 8000c2a:	7e3b      	ldrb	r3, [r7, #24]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	79b9      	ldrb	r1, [r7, #6]
 8000c30:	79f8      	ldrb	r0, [r7, #7]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f001 faf2 	bl	800221c <sw_i2c_read_bulk>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
	delay_ms(2);
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f001 ff6d 	bl	8002b1c <delay_ms>
	return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <MPU6050_GetIntStatusRegister>:
	tmp &= ~(1 << MPU6050_INTERRUPT_DATA_RDY_BIT);
	tmp |= ((Enable & 0x1) << MPU6050_INTERRUPT_DATA_RDY_BIT);
	HAL_I2C_Mem_Write( MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &tmp, 1, I2C_TIMEOUT );
}

uint8_t MPU6050_GetIntStatusRegister(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af02      	add	r7, sp, #8
	uint8_t tmp;
	HAL_I2C_Mem_Read( MPU6050_ADDRESS, MPU6050_RA_INT_STATUS, 1, &tmp, 1, I2C_TIMEOUT );
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	2200      	movs	r2, #0
 8000c56:	9201      	str	r2, [sp, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	213a      	movs	r1, #58	; 0x3a
 8000c60:	20d0      	movs	r0, #208	; 0xd0
 8000c62:	f7ff ffd8 	bl	8000c16 <HAL_I2C_Mem_Read>
	return tmp;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <MPU6050_GetMotionStatusRegister>:
	tmp &= ~(0x07);
	tmp |= Dhpf & 0x7;
	HAL_I2C_Mem_Write( MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &tmp, 1, I2C_TIMEOUT );
}

uint8_t MPU6050_GetMotionStatusRegister(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8
	uint8_t tmp;
	HAL_I2C_Mem_Read( MPU6050_ADDRESS, MPU6050_RA_MOT_DETECT_STATUS, 1, &tmp, 1, I2C_TIMEOUT );
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	2161      	movs	r1, #97	; 0x61
 8000c84:	20d0      	movs	r0, #208	; 0xd0
 8000c86:	f7ff ffc6 	bl	8000c16 <HAL_I2C_Mem_Read>
	return tmp;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI3_IRQHandler>:
	EXTI->IMR1 			|= EXTI_IMR1_IM3;			// Interrupt Mask on line 3
	NVIC_EnableIRQ( EXTI3_IRQn );
#endif
}

void EXTI3_IRQHandler(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF3) {		// Pending bit for line 3
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <EXTI3_IRQHandler+0x4c>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d018      	beq.n	8000cd8 <EXTI3_IRQHandler+0x44>
		EXTI->PR1 = EXTI_PR1_PIF3;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <EXTI3_IRQHandler+0x4c>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	615a      	str	r2, [r3, #20]
/******************************************************************************/

extern const I2C_t * sw_i2c_get_handle(void);

static INLINE bool sw_is_BUSY_flag_ready(void) {
	if( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_BUSY ) return true; else  return false;
 8000cac:	f001 fd26 	bl	80026fc <sw_i2c_get_handle>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <EXTI3_IRQHandler+0x2e>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <EXTI3_IRQHandler+0x30>
 8000cc2:	2300      	movs	r3, #0

		if ( sw_is_BUSY_flag_ready() == true ) return;
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d106      	bne.n	8000cd6 <EXTI3_IRQHandler+0x42>

		uint8_t interrupts = MPU6050_GetIntStatusRegister();
 8000cc8:	f7ff ffc0 	bl	8000c4c <MPU6050_GetIntStatusRegister>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
		MPU6050_GetMotionStatusRegister();
 8000cd0:	f7ff ffce 	bl	8000c70 <MPU6050_GetMotionStatusRegister>
 8000cd4:	e000      	b.n	8000cd8 <EXTI3_IRQHandler+0x44>
		if ( sw_is_BUSY_flag_ready() == true ) return;
 8000cd6:	bf00      	nop
//			sprintf((char*) buffer, "Freefall detected\n\r");
//			UART1_SendString((char*) buffer);
		}

	}
}
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <SystemClock_Config>:
			 );
}
/**********************************************************************/

/**********************************************************************/
void SystemClock_Config(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	2304      	movs	r3, #4
 8000cec:	607b      	str	r3, [r7, #4]
	MODIFY_REG( FLASH->ACR, FLASH_ACR_LATENCY, latency );
 8000cee:	4b5c      	ldr	r3, [pc, #368]	; (8000e60 <SystemClock_Config+0x17c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 0207 	bic.w	r2, r3, #7
 8000cf6:	495a      	ldr	r1, [pc, #360]	; (8000e60 <SystemClock_Config+0x17c>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]
	while ( (FLASH->ACR & FLASH_ACR_LATENCY) == 0 ) {}
 8000cfe:	bf00      	nop
 8000d00:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <SystemClock_Config+0x17c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f9      	beq.n	8000d00 <SystemClock_Config+0x1c>
}
 8000d0c:	bf00      	nop
	MODIFY_REG( PWR->CR1, PWR_CR1_VOS, PWR_CR1_VOS_0 );
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <SystemClock_Config+0x180>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d16:	4a53      	ldr	r2, [pc, #332]	; (8000e64 <SystemClock_Config+0x180>)
 8000d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1c:	6013      	str	r3, [r2, #0]
	while ( (PWR->SR2 & PWR_SR2_VOSF) ) {}
 8000d1e:	bf00      	nop
 8000d20:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <SystemClock_Config+0x180>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1f9      	bne.n	8000d20 <SystemClock_Config+0x3c>
}
 8000d2c:	bf00      	nop
 8000d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d32:	613b      	str	r3, [r7, #16]
	switch ( clock ) {
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d3a:	d004      	beq.n	8000d46 <SystemClock_Config+0x62>
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d42:	d006      	beq.n	8000d52 <SystemClock_Config+0x6e>
			break;
 8000d44:	e00c      	b.n	8000d60 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSIRDY;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSION;
 8000d4c:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <SystemClock_Config+0x184>)
 8000d4e:	60bb      	str	r3, [r7, #8]
			break;
 8000d50:	e006      	b.n	8000d60 <SystemClock_Config+0x7c>
			checkClock = RCC_CR_HSERDY;
 8000d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d56:	60fb      	str	r3, [r7, #12]
			reg = RCC_CR_CSSON | RCC_CR_HSEBYP | RCC_CR_HSEON;
 8000d58:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8000d5c:	60bb      	str	r3, [r7, #8]
			break;
 8000d5e:	bf00      	nop
	SET_BIT( RCC->CR, reg ) ;
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <SystemClock_Config+0x188>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4941      	ldr	r1, [pc, #260]	; (8000e6c <SystemClock_Config+0x188>)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
	while ( (RCC->CR & checkClock ) == 0 ) {}
 8000d6c:	bf00      	nop
 8000d6e:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <SystemClock_Config+0x188>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <SystemClock_Config+0x8a>
}
 8000d7a:	bf00      	nop
	uint16_t pllm = 1;			// 1, 2 - 8
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	837b      	strh	r3, [r7, #26]
	uint16_t plln = 10;			// 8, 9 - 86
 8000d80:	230a      	movs	r3, #10
 8000d82:	833b      	strh	r3, [r7, #24]
	uint16_t pllr = 2;			// 2, 4, 6, 8,
 8000d84:	2302      	movs	r3, #2
 8000d86:	82fb      	strh	r3, [r7, #22]
	pllr = (uint8_t)pllr/2 - 1;
 8000d88:	8afb      	ldrh	r3, [r7, #22]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3b01      	subs	r3, #1
 8000d94:	82fb      	strh	r3, [r7, #22]
	MODIFY_REG( RCC->PLLCFGR,
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <SystemClock_Config+0x188>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <SystemClock_Config+0x18c>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	8b7a      	ldrh	r2, [r7, #26]
 8000da0:	3a01      	subs	r2, #1
 8000da2:	0111      	lsls	r1, r2, #4
 8000da4:	8b3a      	ldrh	r2, [r7, #24]
 8000da6:	0212      	lsls	r2, r2, #8
 8000da8:	4311      	orrs	r1, r2
 8000daa:	8afa      	ldrh	r2, [r7, #22]
 8000dac:	0652      	lsls	r2, r2, #25
 8000dae:	430a      	orrs	r2, r1
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <SystemClock_Config+0x188>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61fb      	str	r3, [r7, #28]
	SET_BIT( RCC->PLLCFGR, source );
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <SystemClock_Config+0x188>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	492a      	ldr	r1, [pc, #168]	; (8000e6c <SystemClock_Config+0x188>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60cb      	str	r3, [r1, #12]
}
 8000dca:	bf00      	nop
	SET_BIT( RCC->CR, RCC_CR_PLLON);
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <SystemClock_Config+0x188>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <SystemClock_Config+0x188>)
 8000dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd6:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC->PLLCFGR, RCC_PLLCFGR_PLLREN );
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <SystemClock_Config+0x188>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <SystemClock_Config+0x188>)
 8000dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de2:	60d3      	str	r3, [r2, #12]
	while (((RCC->CR) & RCC_CR_PLLRDY) == 0) {}
 8000de4:	bf00      	nop
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <SystemClock_Config+0x188>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f9      	beq.n	8000de6 <SystemClock_Config+0x102>
}
 8000df2:	bf00      	nop
	MODIFY_REG( RCC->CFGR,
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <SystemClock_Config+0x188>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <SystemClock_Config+0x188>)
 8000dfa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000dfe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e02:	6093      	str	r3, [r2, #8]
}
 8000e04:	bf00      	nop
 8000e06:	2303      	movs	r3, #3
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
	switch ( pllSource ) {
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d009      	beq.n	8000e24 <SystemClock_Config+0x140>
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d80f      	bhi.n	8000e36 <SystemClock_Config+0x152>
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d006      	beq.n	8000e2a <SystemClock_Config+0x146>
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d006      	beq.n	8000e30 <SystemClock_Config+0x14c>
			break;
 8000e22:	e008      	b.n	8000e36 <SystemClock_Config+0x152>
			sourceCheck = RCC_CFGR_SWS_PLL;
 8000e24:	230c      	movs	r3, #12
 8000e26:	623b      	str	r3, [r7, #32]
			break;
 8000e28:	e006      	b.n	8000e38 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSI;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	623b      	str	r3, [r7, #32]
			break;
 8000e2e:	e003      	b.n	8000e38 <SystemClock_Config+0x154>
			sourceCheck = RCC_CFGR_SWS_HSE;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
			break;
 8000e34:	e000      	b.n	8000e38 <SystemClock_Config+0x154>
			break;
 8000e36:	bf00      	nop
	SET_BIT( RCC->CFGR, pllSource);
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <SystemClock_Config+0x188>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	490b      	ldr	r1, [pc, #44]	; (8000e6c <SystemClock_Config+0x188>)
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	4313      	orrs	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
	while ( (RCC->CFGR & sourceCheck) == 0 ) {}
 8000e44:	bf00      	nop
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <SystemClock_Config+0x188>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f9      	beq.n	8000e46 <SystemClock_Config+0x162>
}
 8000e52:	bf00      	nop

	rcc_SystemClock_bus_presscaler();

	rcc_SystemClockMux_switch( RCC_CFGR_SW_PLL );

	SystemCoreClockUpdate();
 8000e54:	f7ff fc4c 	bl	80006f0 <SystemCoreClockUpdate>
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40007000 	.word	0x40007000
 8000e68:	00080100 	.word	0x00080100
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	f9ff808f 	.word	0xf9ff808f

08000e74 <register_measure_callback>:
volatile static uint8_t measureDataReadyFlag	= 0;

static T_RESULTS results;				// Kontener na pomiary

static void ( *measure_callback )( T_RESULTS *results );
void register_measure_callback( void (*callback)( T_RESULTS *results) ) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	measure_callback = callback;
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <register_measure_callback+0x1c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000110 	.word	0x20000110

08000e94 <EXTI2_IRQHandler>:

	NVIC_EnableIRQ( EXTI3_IRQn );
	return 1;
}

void EXTI2_IRQHandler(void) {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & EXTI_PR1_PIF2) {				// Pending bit for line 3
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <EXTI2_IRQHandler+0x20>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <EXTI2_IRQHandler+0x16>
		EXTI->PR1 = EXTI_PR1_PIF2;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <EXTI2_IRQHandler+0x20>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	615a      	str	r2, [r3, #20]

	}
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <gpio_pin_cfg>:

#include "sw_mcu_conf.h"
#include "sw_gpio.h"

/******************* Funkcja ustawiająca trybyb pracy pinów *********************/
void gpio_pin_cfg( GPIO_TypeDef * const port, T_GPIO_PIN pin, T_GPIO_MODE mode ) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	803b      	strh	r3, [r7, #0]
	if (mode & 0x100u)
 8000ec8:	883b      	ldrh	r3, [r7, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <gpio_pin_cfg+0x28>
		port->OTYPER |= pin;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	e006      	b.n	8000eee <gpio_pin_cfg+0x36>
	else
		port->OTYPER &= (uint32_t) ~pin;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	887a      	ldrh	r2, [r7, #2]
 8000ee6:	43d2      	mvns	r2, r2
 8000ee8:	401a      	ands	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	605a      	str	r2, [r3, #4]
	pin = __builtin_ctz(pin) * 2;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	807b      	strh	r3, [r7, #2]

	uint32_t reset_mask = ~(0x03u << pin);
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	613b      	str	r3, [r7, #16]
	uint32_t reg_val;

	reg_val = port->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x600u) >> 9u) << pin);
 8000f18:	883b      	ldrh	r3, [r7, #0]
 8000f1a:	0a5b      	lsrs	r3, r3, #9
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
	port->MODER = reg_val;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	601a      	str	r2, [r3, #0]
	reg_val = port->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0x30u) >> 4u) << pin);
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
	port->PUPDR = reg_val;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	60da      	str	r2, [r3, #12]
	reg_val = port->OSPEEDR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	60fb      	str	r3, [r7, #12]
	reg_val &= reset_mask;
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
	reg_val |= (((mode & 0xC0u) >> 6u) << pin);
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	099b      	lsrs	r3, r3, #6
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
	port->OSPEEDR = reg_val;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	609a      	str	r2, [r3, #8]

	volatile uint32_t * reg_adr;
	reg_adr = &port->AFR[0];
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3320      	adds	r3, #32
 8000f86:	617b      	str	r3, [r7, #20]
	pin *= 2;
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	807b      	strh	r3, [r7, #2]

	if (pin > 28) {
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	2b1c      	cmp	r3, #28
 8000f92:	d905      	bls.n	8000fa0 <gpio_pin_cfg+0xe8>
		pin -= 32;
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	3b20      	subs	r3, #32
 8000f98:	807b      	strh	r3, [r7, #2]
		reg_adr = &port->AFR[1];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3324      	adds	r3, #36	; 0x24
 8000f9e:	617b      	str	r3, [r7, #20]
	}
	reg_val = *reg_adr;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
	reg_val &= ~(0x0fu << pin);
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
	reg_val |= (uint32_t) (mode & 0x0ful) << pin;
 8000fb6:	883b      	ldrh	r3, [r7, #0]
 8000fb8:	f003 020f 	and.w	r2, r3, #15
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
	*reg_adr = reg_val;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <RCC_gpio_init>:
#endif
}
#endif

#if defined STM32L412KBx_nucleo
void RCC_gpio_init( void ) {
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

#ifdef RTC_PORTA_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <RCC_gpio_init+0x28>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <RCC_gpio_init+0x28>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif
#ifdef RTC_PORTB_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <RCC_gpio_init+0x28>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <RCC_gpio_init+0x28>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
#endif
#ifdef RTC_PORTH_ENABLED
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOHEN;
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <gpio_pin_HI>:

#ifdef BSRR_REG
	inline void gpio_pin_LO(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
		port->BRR = pin;
	}
	inline void gpio_pin_HI(GPIO_TypeDef * const port, T_GPIO_PIN pin) {
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
		port->BSRR = pin;
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
	}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <gpio_pin_XOR>:
	inline void gpio_pin_HI(  GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
		port->BSRRL = pin;
	}
#endif

inline void gpio_pin_XOR( GPIO_TypeDef * const port, T_GPIO_PIN pin ) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
	port->ODR ^= pin;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	405a      	eors	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	615a      	str	r2, [r3, #20]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <gpio_pin_IMPULSES>:

void gpio_pin_IMPULSES( GPIO_TypeDef * const port, T_GPIO_PIN pin, uint8_t num ) {
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	707b      	strb	r3, [r7, #1]
	num = 2*num + 2;
 800105a:	787b      	ldrb	r3, [r7, #1]
 800105c:	3301      	adds	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	707b      	strb	r3, [r7, #1]
	while ( --num ) {
 8001064:	e00c      	b.n	8001080 <gpio_pin_IMPULSES+0x36>
		if ( num%2 ) {
 8001066:	787b      	ldrb	r3, [r7, #1]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <gpio_pin_IMPULSES+0x30>
			port->BRR = pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
 8001078:	e002      	b.n	8001080 <gpio_pin_IMPULSES+0x36>
		} else {
			port->BSRR = pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
	while ( --num ) {
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	3b01      	subs	r3, #1
 8001084:	707b      	strb	r3, [r7, #1]
 8001086:	787b      	ldrb	r3, [r7, #1]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1ec      	bne.n	8001066 <gpio_pin_IMPULSES+0x1c>
		}
	}
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <sw_led_off>:

volatile uint32_t ledEventFlag = 0;


#ifdef BSRR_REG
void sw_led_off( void ) {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	LED_PORT->BSRR = LED_PIN;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <sw_led_off+0x14>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	48000400 	.word	0x48000400

080010b4 <sw_led_xor>:
	}
	void sw_led_on( void ) {
		LED_PORT->BSRRH = LED_PIN;
	}
#endif
void sw_led_xor( void ) {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	LED_PORT->ODR ^= LED_PIN;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <sw_led_xor+0x1c>)
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <sw_led_xor+0x1c>)
 80010be:	f083 0308 	eor.w	r3, r3, #8
 80010c2:	6153      	str	r3, [r2, #20]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	48000400 	.word	0x48000400

080010d4 <sw_led_blink>:




void sw_led_blink( void ) { sw_led_xor(); }
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	f7ff ffec 	bl	80010b4 <sw_led_xor>
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <sw_led_debug_init>:

void sw_led_debug_init( void ) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

	sw_led_off( LED2_PORT, LED2_PIN_BLUE );
	sw_led_off( LED2_PORT, LED2_PIN_RED );
	sw_led_off( LED2_PORT, LED2_PIN_GREEN );
#else
	gpio_pin_cfg( LED_PORT, LED_PIN, 	gpio_mode_output_PP_LS );
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	2108      	movs	r1, #8
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <sw_led_debug_init+0x40>)
 80010ec:	f7ff fee4 	bl	8000eb8 <gpio_pin_cfg>
	sw_led_off();
 80010f0:	f7ff ffd4 	bl	800109c <sw_led_off>
#endif

#ifdef	DEBUG_PIN0
	gpio_pin_cfg( DEBUG_PORT0, DEBUG_PIN0, gpio_mode_output_PP_HS );
 80010f4:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80010f8:	2108      	movs	r1, #8
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f7ff fedb 	bl	8000eb8 <gpio_pin_cfg>
	gpio_pin_HI( DEBUG_PORT0, DEBUG_PIN0);
 8001102:	2108      	movs	r1, #8
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f7ff ff7e 	bl	8001008 <gpio_pin_HI>

#endif
#ifdef	DEBUG_PIN1
	gpio_pin_cfg( DEBUG_PORT1, DEBUG_PIN1, gpio_mode_output_PP_HS );
 800110c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8001110:	2102      	movs	r1, #2
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f7ff fecf 	bl	8000eb8 <gpio_pin_cfg>
#endif
#ifdef	DEBUG_PIN2
	gpio_pin_cfg( DEBUG_PORT2, DEBUG_PIN2, gpio_mode_output_PP_HS );
#endif
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	48000400 	.word	0x48000400

08001124 <sw_led_start_blinking>:

static uint8_t blinkCounter = 0;
static uint8_t blinkDelay = 0;
void sw_led_start_blinking( uint8_t repeat, uint16_t delay ) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	80bb      	strh	r3, [r7, #4]
	sw_led_off();
 8001134:	f7ff ffb2 	bl	800109c <sw_led_off>
	blinkCounter = 2*repeat;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <sw_led_start_blinking+0x30>)
 8001140:	701a      	strb	r2, [r3, #0]
	blinkDelay = delay;
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <sw_led_start_blinking+0x34>)
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000114 	.word	0x20000114
 8001158:	20000115 	.word	0x20000115

0800115c <sw_led_blinking>:
int8_t sw_led_get_status(void) {
	if (blinkCounter == 0) 	return (int8_t)_led_not_blinking;
	else					return (int8_t)_led_blinking;
}

void sw_led_blinking(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <sw_led_blinking+0x38>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d012      	beq.n	800118e <sw_led_blinking+0x32>
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <sw_led_blinking+0x3c>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <sw_led_blinking+0x32>
	else {
		softTimer3 = blinkDelay;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <sw_led_blinking+0x40>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <sw_led_blinking+0x3c>)
 800117a:	801a      	strh	r2, [r3, #0]
		sw_led_blink();
 800117c:	f7ff ffaa 	bl	80010d4 <sw_led_blink>
		blinkCounter--;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <sw_led_blinking+0x38>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	3b01      	subs	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <sw_led_blinking+0x38>)
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e000      	b.n	8001190 <sw_led_blinking+0x34>
	if ( blinkCounter == 0 || softTimer3 != 0 ) return;	// Nic nie robimy jeśli
 800118e:	bf00      	nop
	}
}
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000114 	.word	0x20000114
 8001198:	200005d2 	.word	0x200005d2
 800119c:	20000115 	.word	0x20000115

080011a0 <__NVIC_EnableIRQ>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <WriteCmd>:
}
#endif
//***********************************************
// Zapisanie kodu komendy do sterownika SSD1306
//***********************************************
static void WriteCmd( uint8_t cmd ) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	sw_transmision_write( cmd );
	#if USE_CS==1
	CS_HI;
	#endif
#elif (TRANSMISSION_MODE==SOFT_I2C) || (TRANSMISSION_MODE==HARD_I2C)
	sw_i2c_write_reg8( I2C_ADDRESS, I2C_CTRL_DC_0, cmd );
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	461a      	mov	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f001 f901 	bl	80023f4 <sw_i2c_write_reg8>
#endif
	delay_us(20);
 80011f2:	2014      	movs	r0, #20
 80011f4:	f001 fcaa 	bl	8002b4c <delay_us>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <WriteData>:
//***********************************************
// Zapisanie danej do pamięci obrazu sterownika SSD1306
//***********************************************
static void WriteData( uint8_t regAddr, uint8_t * buffer, uint16_t cnt ) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	80bb      	strh	r3, [r7, #4]
		WriteSpi( buffer[i] ); 				// zapis danej
	}
	CS_HI;
#endif
#ifdef SSD1306_I2C
	sw_i2c_write_bulk( SSD1306_ADDR, SSD1306_SETSTARTLINE, cnt, buffer );
 8001210:	88ba      	ldrh	r2, [r7, #4]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fe88 	bl	8001f2c <sw_i2c_write_bulk>
#endif
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <sw_display_cls>:

//**********************************************
// Zeruj bufor wyświetlacza
// i zapisz jego zwartość do RAM obrazu
//**********************************************
void sw_display_cls( uint8_t *buffer, uint8_t pattern ) {
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8001230:	2300      	movs	r3, #0
 8001232:	81fb      	strh	r3, [r7, #14]
 8001234:	e007      	b.n	8001246 <sw_display_cls+0x22>
		buffer[i] = pattern;
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	78fa      	ldrb	r2, [r7, #3]
 800123e:	701a      	strb	r2, [r3, #0]
	for ( uint16_t i = 0; i < FRAMEBUFFER_ALL; i++ ) {
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	3301      	adds	r3, #1
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124c:	d3f3      	bcc.n	8001236 <sw_display_cls+0x12>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <sw_ssd1306_display>:
//***********************************************

//************ Wyślij bufor RAM do sterownika ************
void sw_ssd1306_display( void ) {
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	2378      	movs	r3, #120	; 0x78
 8001264:	71fb      	strb	r3, [r7, #7]
static INLINE uint8_t	sw_i2c_read( uint8_t dummy ) {
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
	return ( sw_i2c_get_handle()->I2C->RXDR & 0xFF );
}
static INLINE void sw_i2c_set_7bitAddr( uint8_t devAddr ) {
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001266:	f001 fa49 	bl	80026fc <sw_i2c_get_handle>
 800126a:	4603      	mov	r3, r0
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8001274:	f024 0403 	bic.w	r4, r4, #3
 8001278:	79fd      	ldrb	r5, [r7, #7]
 800127a:	f001 fa3f 	bl	80026fc <sw_i2c_get_handle>
 800127e:	4603      	mov	r3, r0
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	ea44 0205 	orr.w	r2, r4, r5
 8001286:	605a      	str	r2, [r3, #4]
}
 8001288:	bf00      	nop
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( 0x21  );				// Command_Column_Address_Set
 800128a:	2021      	movs	r0, #33	; 0x21
 800128c:	f7ff ffa6 	bl	80011dc <WriteCmd>
	WriteCmd( 0x00  );				// Start
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff ffa3 	bl	80011dc <WriteCmd>
	WriteCmd( SCREEN_WIDTH  - 1  );	// End
 8001296:	207f      	movs	r0, #127	; 0x7f
 8001298:	f7ff ffa0 	bl	80011dc <WriteCmd>

	WriteCmd( 0x22  );				// Command_Page_Address_Set
 800129c:	2022      	movs	r0, #34	; 0x22
 800129e:	f7ff ff9d 	bl	80011dc <WriteCmd>
	WriteCmd( 0x00  );				// Start
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ff9a 	bl	80011dc <WriteCmd>
	WriteCmd( SCREEN_HEIGHT - 1 );	// End
 80012a8:	203f      	movs	r0, #63	; 0x3f
 80012aa:	f7ff ff97 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_SETLOWCOLUMN  );
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff94 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SETHIGHCOLUMN );
 80012b4:	2010      	movs	r0, #16
 80012b6:	f7ff ff91 	bl	80011dc <WriteCmd>
#if SCREEN_HEIGHT == 64
	WriteCmd( 0xB0 );
 80012ba:	20b0      	movs	r0, #176	; 0xb0
 80012bc:	f7ff ff8e 	bl	80011dc <WriteCmd>
#endif
#if SCREEN_HEIGHT == 32
	WriteCmd( 0xB4 );
#endif
//	delay_ms(100);
   	WriteData( SSD1306_SETSTARTLINE, (uint8_t *)ActualDMABuffer, FRAMEBUFFER_ALL );
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <sw_ssd1306_display+0x84>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	4619      	mov	r1, r3
 80012ca:	2040      	movs	r0, #64	; 0x40
 80012cc:	f7ff ff98 	bl	8001200 <WriteData>
	delay_us(20);
 80012d0:	2014      	movs	r0, #20
 80012d2:	f001 fc3b 	bl	8002b4c <delay_us>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000051c 	.word	0x2000051c

080012e4 <timer16_init>:
/***************************************************************/

/*********************************** Timer16 init **************************************/
static void timer16_init( uint16_t timeFPS ) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <timer16_init+0x58>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <timer16_init+0x58>)
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
	TIM16->PSC = (uint32_t)SystemCoreClock / 0xFFFF / timeFPS - 1;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <timer16_init+0x5c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <timer16_init+0x60>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0bda      	lsrs	r2, r3, #15
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <timer16_init+0x64>)
 800130e:	3b01      	subs	r3, #1
 8001310:	6293      	str	r3, [r2, #40]	; 0x28
	TIM16->ARR = 0xFFFF - 1;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <timer16_init+0x64>)
 8001314:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM16->DIER	= TIM_DIER_UIE;		// Update Event Interrupt
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <timer16_init+0x64>)
 800131c:	2201      	movs	r2, #1
 800131e:	60da      	str	r2, [r3, #12]

	TIM16->CR1 |= TIM_CR1_CEN;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <timer16_init+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a08      	ldr	r2, [pc, #32]	; (8001348 <timer16_init+0x64>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ( TIM1_UP_TIM16_IRQn );
 800132c:	2019      	movs	r0, #25
 800132e:	f7ff ff37 	bl	80011a0 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	20000000 	.word	0x20000000
 8001344:	80008001 	.word	0x80008001
 8001348:	40014400 	.word	0x40014400

0800134c <sw_ssd1306_init>:
	}
}
/****************************************************************************************/

//************* INICJALIZACJA sterownika SSD1306
void sw_ssd1306_init(void) {
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
//	ActualDMABuffer = SpectrumBuffer;
//	ActualDMABuffer = TextBufferDisplay;
	ActualDMABuffer = TextBuffer;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <sw_ssd1306_init+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3a      	ldr	r2, [pc, #232]	; (8001440 <sw_ssd1306_init+0xf4>)
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	2378      	movs	r3, #120	; 0x78
 800135c:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 800135e:	f001 f9cd 	bl	80026fc <sw_i2c_get_handle>
 8001362:	4603      	mov	r3, r0
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 800136c:	f024 0403 	bic.w	r4, r4, #3
 8001370:	79fd      	ldrb	r5, [r7, #7]
 8001372:	f001 f9c3 	bl	80026fc <sw_i2c_get_handle>
 8001376:	4603      	mov	r3, r0
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	ea44 0205 	orr.w	r2, r4, r5
 800137e:	605a      	str	r2, [r3, #4]
}
 8001380:	bf00      	nop
	RES_LO;
	RES_HI;
#endif
	sw_i2c_set_7bitAddr( 0x78 );

	WriteCmd( SSD1306_DISPLAYOFF );
 8001382:	20ae      	movs	r0, #174	; 0xae
 8001384:	f7ff ff2a 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SETDISPLAYCLOCKDIV );
 8001388:	20d5      	movs	r0, #213	; 0xd5
 800138a:	f7ff ff27 	bl	80011dc <WriteCmd>
	WriteCmd( OLED_CONTRAST );
 800138e:	20f0      	movs	r0, #240	; 0xf0
 8001390:	f7ff ff24 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_SETDISPLAYOFFSET );
 8001394:	20d3      	movs	r0, #211	; 0xd3
 8001396:	f7ff ff21 	bl	80011dc <WriteCmd>
	WriteCmd( 0x0 );
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff ff1e 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SETSTARTLINE | 0x0 );
 80013a0:	2040      	movs	r0, #64	; 0x40
 80013a2:	f7ff ff1b 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_CHARGEPUMP );
 80013a6:	208d      	movs	r0, #141	; 0x8d
 80013a8:	f7ff ff18 	bl	80011dc <WriteCmd>

//    if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x10 );
//    else  WriteCmd( 0x14 );	// SSD1306_SWITCHCAPVCC

	WriteCmd( 0x14 );			// SSD1306_SWITCHCAPVCC
 80013ac:	2014      	movs	r0, #20
 80013ae:	f7ff ff15 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_MEMORYMODE );
 80013b2:	2020      	movs	r0, #32
 80013b4:	f7ff ff12 	bl	80011dc <WriteCmd>
	WriteCmd( 0x00 );
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff0f 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SEGREMAP | 0x1 );
 80013be:	20a1      	movs	r0, #161	; 0xa1
 80013c0:	f7ff ff0c 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_COMSCANDEC );
 80013c4:	20c8      	movs	r0, #200	; 0xc8
 80013c6:	f7ff ff09 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_SETCONTRAST );
 80013ca:	2081      	movs	r0, #129	; 0x81
 80013cc:	f7ff ff06 	bl	80011dc <WriteCmd>
	WriteCmd( REFRESH_MAX );
 80013d0:	20f0      	movs	r0, #240	; 0xf0
 80013d2:	f7ff ff03 	bl	80011dc <WriteCmd>

//	if (vcc == SSD1306_EXTERNALVCC ) WriteCmd( 0x9F );
//	else WriteCmd( 0xCF );

	WriteCmd( 0xCF );					// SSD1306_SWITCHCAPVCC
 80013d6:	20cf      	movs	r0, #207	; 0xcf
 80013d8:	f7ff ff00 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SETPRECHARGE );
 80013dc:	20d9      	movs	r0, #217	; 0xd9
 80013de:	f7ff fefd 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_SETCOMPINS );
	WriteCmd( 0x02 );
#endif
// ssd1306 - 128 x 64
#ifdef GLCD_RES_128_64
	WriteCmd( SSD1306_SETMULTIPLEX );
 80013e2:	20a8      	movs	r0, #168	; 0xa8
 80013e4:	f7ff fefa 	bl	80011dc <WriteCmd>
	WriteCmd( 0x3F );
 80013e8:	203f      	movs	r0, #63	; 0x3f
 80013ea:	f7ff fef7 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_SETCOMPINS );
 80013ee:	20da      	movs	r0, #218	; 0xda
 80013f0:	f7ff fef4 	bl	80011dc <WriteCmd>
	WriteCmd( 0x12 );
 80013f4:	2012      	movs	r0, #18
 80013f6:	f7ff fef1 	bl	80011dc <WriteCmd>
#endif
	WriteCmd( SSD1306_SETVCOMDETECT );
 80013fa:	20db      	movs	r0, #219	; 0xdb
 80013fc:	f7ff feee 	bl	80011dc <WriteCmd>
	WriteCmd( 0x40 );
 8001400:	2040      	movs	r0, #64	; 0x40
 8001402:	f7ff feeb 	bl	80011dc <WriteCmd>

	WriteCmd( SSD1306_DISPLAYALLON_RESUME );
 8001406:	20a4      	movs	r0, #164	; 0xa4
 8001408:	f7ff fee8 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_NORMALDISPLAY );
 800140c:	20a6      	movs	r0, #166	; 0xa6
 800140e:	f7ff fee5 	bl	80011dc <WriteCmd>
	WriteCmd( SSD1306_DISPLAYON );
 8001412:	20af      	movs	r0, #175	; 0xaf
 8001414:	f7ff fee2 	bl	80011dc <WriteCmd>

	sw_display_cls( (uint8_t *)ActualDMABuffer, 0x00 );
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <sw_ssd1306_init+0xf4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff00 	bl	8001224 <sw_display_cls>
	sw_ssd1306_display();
 8001424:	f7ff ff1a 	bl	800125c <sw_ssd1306_display>

	timer16_init( 10 );
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff ff5b 	bl	80012e4 <timer16_init>
	sw_dma_memset_init(8);
 800142e:	2008      	movs	r0, #8
 8001430:	f000 fb56 	bl	8001ae0 <sw_dma_memset_init>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	20000004 	.word	0x20000004
 8001440:	2000051c 	.word	0x2000051c

08001444 <graphic_draw_H_line_RAM>:
#include "displays.h"


/***************************************************************************************/
void graphic_draw_H_line_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, uint8_t width,
								  const uint32_t color, const T_GAMMA *gamma ) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	817b      	strh	r3, [r7, #10]
 8001456:	460b      	mov	r3, r1
 8001458:	813b      	strh	r3, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	71fb      	strb	r3, [r7, #7]

#ifdef PANEL_RGB
	T_RGB_2ROWS colorTmp[ 8 ];
	graphic_24bit_to_rgb( color, colorTmp, gamma );
#endif
	for ( uint8_t i=0; i < width; i++ ) {
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
 8001462:	e00f      	b.n	8001484 <graphic_draw_H_line_RAM+0x40>
#ifdef PANEL_RGB
		graphic_set_pixel_RAM( buffer, x + i, y, colorTmp );
#elif defined COLOR_MONO
		graphic_set_pixel_RAM( buffer, x + i, y, (uint8_t *)&color );
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	b29a      	uxth	r2, r3
 8001468:	897b      	ldrh	r3, [r7, #10]
 800146a:	4413      	add	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	b219      	sxth	r1, r3
 8001470:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f002 f895 	bl	80035a8 <_etext>
	for ( uint8_t i=0; i < width; i++ ) {
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	3301      	adds	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
 8001484:	7dfa      	ldrb	r2, [r7, #23]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3eb      	bcc.n	8001464 <graphic_draw_H_line_RAM+0x20>
#endif
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <graphic_fill_rectangle_RAM>:
}
/***************************************************************************************/

/***************************************************************************************/
void graphic_fill_rectangle_RAM( volatile T_DISPLAY *buffer, int16_t xPos, int16_t yPos, uint8_t width,
								 uint8_t height, const uint32_t color, const T_GAMMA *gamma ) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b088      	sub	sp, #32
 800149a:	af02      	add	r7, sp, #8
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	4608      	mov	r0, r1
 80014a0:	4611      	mov	r1, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	460b      	mov	r3, r1
 80014aa:	813b      	strh	r3, [r7, #8]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71fb      	strb	r3, [r7, #7]
	for ( uint8_t i=0; i < height; i++ ) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e013      	b.n	80014de <graphic_fill_rectangle_RAM+0x48>
		graphic_draw_H_line_RAM( buffer, xPos, yPos+i, width, color, gamma );
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	893b      	ldrh	r3, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	79f8      	ldrb	r0, [r7, #7]
 80014c4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4603      	mov	r3, r0
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ffb6 	bl	8001444 <graphic_draw_H_line_RAM>
	for ( uint8_t i=0; i < height; i++ ) {
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	3301      	adds	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
 80014de:	7dfa      	ldrb	r2, [r7, #23]
 80014e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3e6      	bcc.n	80014b6 <graphic_fill_rectangle_RAM+0x20>
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <polish_letters>:
	0xA2,  /*ó, */
};
#endif

/***** Zwraca numer znaku w tablicy ************************/
uint8_t polish_letters(uint8_t codePage, wchar_t codeChar) {
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]

	uint8_t i;
	uint8_t tmp=ASCII;
 8001500:	2313      	movs	r3, #19
 8001502:	73bb      	strb	r3, [r7, #14]

	for (i=0; i<18; i++) {
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e00e      	b.n	8001528 <polish_letters+0x34>

#ifdef UNICODE
		if (codePage == UNICODE) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <polish_letters+0x2e>
			if ( codeChar == uniCode[i]) {
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <polish_letters+0x48>)
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d101      	bne.n	8001522 <polish_letters+0x2e>
				return i;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	e006      	b.n	8001530 <polish_letters+0x3c>
	for (i=0; i<18; i++) {
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b11      	cmp	r3, #17
 800152c:	d9ed      	bls.n	800150a <polish_letters+0x16>
			if ( codeChar == pgm_read_byte(cp852Code+i) )
				return i;
		}
#endif
	}
	return tmp;
 800152e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	08003f3c 	.word	0x08003f3c

08001540 <graphic_draw_char_RAM>:
	return charWidth;
}
/*********************************************************************************************************/
#elif defined COLOR_MONO
uint8_t graphic_draw_char_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, wchar_t charCode, uint32_t  color,
									  uint32_t bg, uint8_t drawLine, FONT_INFO *fontPtrPGM, const T_GAMMA *gamma ) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af04      	add	r7, sp, #16
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	817b      	strh	r3, [r7, #10]
 800154e:	4613      	mov	r3, r2
 8001550:	813b      	strh	r3, [r7, #8]
	uint8_t		charWidth;
	uint16_t	charOffset;
	uint8_t		charHeight			= fontPtrPGM->heightPixels;
 8001552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	763b      	strb	r3, [r7, #24]
	uint8_t		charAddressStart	= fontPtrPGM->startChar;
 8001558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	75fb      	strb	r3, [r7, #23]
	uint8_t		transCode 			= polish_letters(UNICODE, charCode);
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff ffc7 	bl	80014f4 <polish_letters>
 8001566:	4603      	mov	r3, r0
 8001568:	75bb      	strb	r3, [r7, #22]
	uint8_t 	size 				= 1;
 800156a:	2301      	movs	r3, #1
 800156c:	757b      	strb	r3, [r7, #21]
	// Rysujemy SPACJĘ i wychodzimy -------------------------------------------------------------------
	if (charCode == L' ') {
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b20      	cmp	r3, #32
 8001572:	d113      	bne.n	800159c <graphic_draw_char_RAM+0x5c>
		graphic_fill_rectangle_RAM( buffer, x, y, fontPtrPGM->spacePixels, charHeight, bg, gamma );
 8001574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001576:	7a5c      	ldrb	r4, [r3, #9]
 8001578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157a:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800157e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001584:	9202      	str	r2, [sp, #8]
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	7e3b      	ldrb	r3, [r7, #24]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4623      	mov	r3, r4
 800158e:	4602      	mov	r2, r0
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff ff80 	bl	8001496 <graphic_fill_rectangle_RAM>
		return fontPtrPGM->spacePixels;
 8001596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	e107      	b.n	80017ac <graphic_draw_char_RAM+0x26c>
	}
	//--------------------------------------------------------------------------------------------------
	if (transCode == ASCII) {
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	2b13      	cmp	r3, #19
 80015a0:	d112      	bne.n	80015c8 <graphic_draw_char_RAM+0x88>
		// Czytamy ile bitów zajmuje odległość czcionki
		charWidth  = fontPtrPGM->charInfo[ charCode - charAddressStart ].widthBits;
 80015a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	77fb      	strb	r3, [r7, #31]
		// Czytamy ile bitów zajmuje odległość między znakami
		charOffset = fontPtrPGM->charInfo[ charCode - charAddressStart ].offset;
 80015b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	1acb      	subs	r3, r1, r3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	885b      	ldrh	r3, [r3, #2]
 80015c4:	83bb      	strh	r3, [r7, #28]
 80015c6:	e019      	b.n	80015fc <graphic_draw_char_RAM+0xbc>
	} else {
		charWidth  = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].widthBits;
 80015c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ce:	8a9b      	ldrh	r3, [r3, #20]
 80015d0:	4619      	mov	r1, r3
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	f1c3 0312 	rsb	r3, r3, #18
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	77fb      	strb	r3, [r7, #31]
		charOffset = fontPtrPGM->charInfo[ fontPtrPGM->sizeArray - (PL_CHARACTERS_COUNT - transCode) ].offset;
 80015e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e8:	8a9b      	ldrh	r3, [r3, #20]
 80015ea:	4619      	mov	r1, r3
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	f1c3 0312 	rsb	r3, r3, #18
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	885b      	ldrh	r3, [r3, #2]
 80015fa:	83bb      	strh	r3, [r7, #28]
	}

	if((x >= _width)					||	// Clip right
 80015fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001600:	4a6c      	ldr	r2, [pc, #432]	; (80017b4 <graphic_draw_char_RAM+0x274>)
 8001602:	8812      	ldrh	r2, [r2, #0]
 8001604:	4293      	cmp	r3, r2
 8001606:	da17      	bge.n	8001638 <graphic_draw_char_RAM+0xf8>
		(y >= _height)					||	// Clip bottom
 8001608:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800160c:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <graphic_draw_char_RAM+0x278>)
 800160e:	8812      	ldrh	r2, [r2, #0]
	if((x >= _width)					||	// Clip right
 8001610:	4293      	cmp	r3, r2
 8001612:	da11      	bge.n	8001638 <graphic_draw_char_RAM+0xf8>
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8001614:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001618:	7ffb      	ldrb	r3, [r7, #31]
 800161a:	7d79      	ldrb	r1, [r7, #21]
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
		(y >= _height)					||	// Clip bottom
 8001622:	2b00      	cmp	r3, #0
 8001624:	dd08      	ble.n	8001638 <graphic_draw_char_RAM+0xf8>
		((y + charHeight * size - 1) < 0))	// Clip top
 8001626:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800162a:	7e3b      	ldrb	r3, [r7, #24]
 800162c:	7d79      	ldrb	r1, [r7, #21]
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
		((x + charWidth  * size - 1) < 0)||	// Clip left
 8001634:	2b00      	cmp	r3, #0
 8001636:	dc01      	bgt.n	800163c <graphic_draw_char_RAM+0xfc>
	return 0;
 8001638:	2300      	movs	r3, #0
 800163a:	e0b7      	b.n	80017ac <graphic_draw_char_RAM+0x26c>

	if (charCode == L' ') {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b20      	cmp	r3, #32
 8001640:	d11a      	bne.n	8001678 <graphic_draw_char_RAM+0x138>
		graphic_fill_rectangle_RAM( buffer, x , y, charWidth*size, charHeight*size, bg, NULL );
 8001642:	7ffa      	ldrb	r2, [r7, #31]
 8001644:	7d7b      	ldrb	r3, [r7, #21]
 8001646:	fb12 f303 	smulbb	r3, r2, r3
 800164a:	b2dc      	uxtb	r4, r3
 800164c:	7e3a      	ldrb	r2, [r7, #24]
 800164e:	7d7b      	ldrb	r3, [r7, #21]
 8001650:	fb12 f303 	smulbb	r3, r2, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001658:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800165c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001660:	2500      	movs	r5, #0
 8001662:	9502      	str	r5, [sp, #8]
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4623      	mov	r3, r4
 800166a:	4602      	mov	r2, r0
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff ff12 	bl	8001496 <graphic_fill_rectangle_RAM>

		return fontPtrPGM->spacePixels;
 8001672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001674:	7a5b      	ldrb	r3, [r3, #9]
 8001676:	e099      	b.n	80017ac <graphic_draw_char_RAM+0x26c>
	}
	int8_t i, k, j=0;
 8001678:	2300      	movs	r3, #0
 800167a:	767b      	strb	r3, [r7, #25]
	uint8_t calkow = (charWidth - 1)/8; // Sprawdzamy w ilu bitach mamy szerokość czcionki
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	3b01      	subs	r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	da00      	bge.n	8001686 <graphic_draw_char_RAM+0x146>
 8001684:	3307      	adds	r3, #7
 8001686:	10db      	asrs	r3, r3, #3
 8001688:	753b      	strb	r3, [r7, #20]
	uint8_t line;

	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 800168a:	2300      	movs	r3, #0
 800168c:	76fb      	strb	r3, [r7, #27]
 800168e:	e086      	b.n	800179e <graphic_draw_char_RAM+0x25e>
	{
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 8001690:	2300      	movs	r3, #0
 8001692:	767b      	strb	r3, [r7, #25]
 8001694:	e078      	b.n	8001788 <graphic_draw_char_RAM+0x248>

			line = pgm_read_byte( fontPtrPGM->data + charOffset + (calkow + 1)*i + j );
 8001696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	8bbb      	ldrh	r3, [r7, #28]
 800169c:	7d39      	ldrb	r1, [r7, #20]
 800169e:	3101      	adds	r1, #1
 80016a0:	f997 001b 	ldrsb.w	r0, [r7, #27]
 80016a4:	fb00 f101 	mul.w	r1, r0, r1
 80016a8:	4419      	add	r1, r3
 80016aa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80016ae:	440b      	add	r3, r1
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	74fb      	strb	r3, [r7, #19]

			for ( k=0; k<8; k++ ) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	76bb      	strb	r3, [r7, #26]
 80016ba:	e05b      	b.n	8001774 <graphic_draw_char_RAM+0x234>
				if ( (line & (1 << (7-k))) && ( (k + 8*j) < charWidth) ) {    // Ekstrahujemy kolejne bity
 80016bc:	7cfa      	ldrb	r2, [r7, #19]
 80016be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	fa42 f303 	asr.w	r3, r2, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d023      	beq.n	800171a <graphic_draw_char_RAM+0x1da>
 80016d2:	f997 201a 	ldrsb.w	r2, [r7, #26]
 80016d6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	441a      	add	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	da1a      	bge.n	800171a <graphic_draw_char_RAM+0x1da>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&color );
 80016e4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b219      	sxth	r1, r3
 8001700:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001704:	b29a      	uxth	r2, r3
 8001706:	893b      	ldrh	r3, [r7, #8]
 8001708:	4413      	add	r3, r2
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21a      	sxth	r2, r3
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f001 ff48 	bl	80035a8 <_etext>
 8001718:	e026      	b.n	8001768 <graphic_draw_char_RAM+0x228>
				}
				else if( (bg!=color) && ( (k + 8*j) < charWidth) ) {
 800171a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	429a      	cmp	r2, r3
 8001720:	d022      	beq.n	8001768 <graphic_draw_char_RAM+0x228>
 8001722:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8001726:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	441a      	add	r2, r3
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	429a      	cmp	r2, r3
 8001732:	da19      	bge.n	8001768 <graphic_draw_char_RAM+0x228>
						graphic_set_pixel_RAM( buffer, x + 8*j + k, y+i, (uint8_t *)&bg );
 8001734:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001738:	b29b      	uxth	r3, r3
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	b29a      	uxth	r2, r3
 800173e:	897b      	ldrh	r3, [r7, #10]
 8001740:	4413      	add	r3, r2
 8001742:	b29a      	uxth	r2, r3
 8001744:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	b219      	sxth	r1, r3
 8001750:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001754:	b29a      	uxth	r2, r3
 8001756:	893b      	ldrh	r3, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	b21a      	sxth	r2, r3
 800175e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 ff20 	bl	80035a8 <_etext>
			for ( k=0; k<8; k++ ) {
 8001768:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3301      	adds	r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	76bb      	strb	r3, [r7, #26]
 8001774:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001778:	2b07      	cmp	r3, #7
 800177a:	dd9f      	ble.n	80016bc <graphic_draw_char_RAM+0x17c>
		for ( j = 0; j < calkow+1; j++ ) {  // Kolejne kolumny
 800177c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	767b      	strb	r3, [r7, #25]
 8001788:	7d3a      	ldrb	r2, [r7, #20]
 800178a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800178e:	429a      	cmp	r2, r3
 8001790:	da81      	bge.n	8001696 <graphic_draw_char_RAM+0x156>
	for ( i=0; i < charHeight; i++ ) // Kolejne wiersze
 8001792:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	76fb      	strb	r3, [r7, #27]
 800179e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80017a2:	7e3b      	ldrb	r3, [r7, #24]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	f6ff af73 	blt.w	8001690 <graphic_draw_char_RAM+0x150>
				}
			}
		} // Koniec rysowania
	}// Koniec pętli do wierszy

	return charWidth;
 80017aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bdb0      	pop	{r4, r5, r7, pc}
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	2000000e 	.word	0x2000000e

080017bc <graphic_puts_RAM>:
#endif
/***************************************************************************************/


/******************************** Draw the string in RAM (buffer)	 *********************************/
uint16_t graphic_puts_RAM( volatile T_DISPLAY *buffer, T_STRING *string, uint8_t textSize, uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b08f      	sub	sp, #60	; 0x3c
 80017c0:	af06      	add	r7, sp, #24
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71fb      	strb	r3, [r7, #7]
	int16_t cursorX = string->x;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	83fb      	strh	r3, [r7, #30]
	int16_t cursorY = string->y;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	885b      	ldrh	r3, [r3, #2]
 80017d6:	82fb      	strh	r3, [r7, #22]
	uint8_t charWidth;

	textSize = FONTx1;	// To być może będzie niepotrzebne
 80017d8:	2301      	movs	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]

	if ( string->onChange ) {
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	7c1b      	ldrb	r3, [r3, #16]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d018      	beq.n	8001816 <graphic_puts_RAM+0x5a>
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	b2dc      	uxtb	r4, r3
									string->fontPtrPGM->heightPixels, bg, gamma );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	68db      	ldr	r3, [r3, #12]
		graphic_fill_rectangle_RAM( buffer, string->lastPosX, string->lastPosY, string->stringLength,
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017fe:	9202      	str	r2, [sp, #8]
 8001800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4623      	mov	r3, r4
 8001808:	4602      	mov	r2, r0
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fe43 	bl	8001496 <graphic_fill_rectangle_RAM>
		string->onChange = 0;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	741a      	strb	r2, [r3, #16]
	}
	string->lastPosX = string->x;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f9b3 2000 	ldrsh.w	r2, [r3]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	825a      	strh	r2, [r3, #18]
	string->lastPosY = string->y;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	829a      	strh	r2, [r3, #20]

	wchar_t * str = string->str;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]

	while ( *str ) {
 8001830:	e028      	b.n	8001884 <graphic_puts_RAM+0xc8>
		charWidth = graphic_draw_char_RAM( buffer, cursorX, cursorY, *str++, color, bg, textSize, string->fontPtrPGM, gamma );
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1d1a      	adds	r2, r3, #4
 8001836:	61ba      	str	r2, [r7, #24]
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001842:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8001846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001848:	9204      	str	r2, [sp, #16]
 800184a:	9303      	str	r3, [sp, #12]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4623      	mov	r3, r4
 800185a:	4602      	mov	r2, r0
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fe6f 	bl	8001540 <graphic_draw_char_RAM>
 8001862:	4603      	mov	r3, r0
 8001864:	757b      	strb	r3, [r7, #21]
		cursorX += textSize * (charWidth + string->fontPtrPGM->interspacePixels );
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	b29a      	uxth	r2, r3
 800186a:	7d7b      	ldrb	r3, [r7, #21]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68c9      	ldr	r1, [r1, #12]
 8001870:	7a09      	ldrb	r1, [r1, #8]
 8001872:	440b      	add	r3, r1
 8001874:	b29b      	uxth	r3, r3
 8001876:	fb12 f303 	smulbb	r3, r2, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	83fb      	strh	r3, [r7, #30]
	while ( *str ) {
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1d2      	bne.n	8001832 <graphic_puts_RAM+0x76>
	}
	return  string->stringLength = cursorX - string->x; //Zwraca długość napisu w pikselach
 800188c:	8bfa      	ldrh	r2, [r7, #30]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001894:	b29b      	uxth	r3, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	809a      	strh	r2, [r3, #4]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	889b      	ldrh	r3, [r3, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <graphic_char_to_wide>:
								string->fontPtrPGM->heightPixels, bg, gamma );
}
/*********************************************************************************************************/

/******************* Duplikuje tablice typu char do wideChar *******************************/
uint8_t graphic_char_to_wide( wchar_t* dest, char* source ) {
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
	int i = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
	char * ptr = source;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	60bb      	str	r3, [r7, #8]

    while(ptr[i]) {
 80018bc:	e00c      	b.n	80018d8 <graphic_char_to_wide+0x2e>
        dest[i] = (char)source[i];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	7819      	ldrb	r1, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	460a      	mov	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
        i++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
    while(ptr[i]) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <graphic_char_to_wide+0x14>
    }
    dest[i] = '\0';
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
	return i; // Zwraca długość string'a bez znaku kontrolnego '\0'
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <graphic_puts_float_RAM>:
	string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
}

#define FLOAT_PRECISION	6		// Numbers to display + dot and sign character
static void graphic_puts_float_RAM( volatile T_DISPLAY *buffer, T_STRING *string, float data, uint8_t textSize,
							 	 	 uint32_t color, uint32_t bg, const T_GAMMA *gamma ) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b098      	sub	sp, #96	; 0x60
 8001904:	af02      	add	r7, sp, #8
 8001906:	6178      	str	r0, [r7, #20]
 8001908:	6139      	str	r1, [r7, #16]
 800190a:	ed87 0a03 	vstr	s0, [r7, #12]
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	72fb      	strb	r3, [r7, #11]
	char 	text_char [ FLOAT_PRECISION + 3 ];	// Sign, dot and '\0'
	wchar_t	text_wchar[ FLOAT_PRECISION + 3 ];
	char *ptr_char 	= text_char;
 8001914:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
	string->str 	= text_wchar;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f107 021c 	add.w	r2, r7, #28
 8001920:	609a      	str	r2, [r3, #8]
	uint32_t dec;

	if ( data < 0 ) {
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	d509      	bpl.n	8001944 <graphic_puts_float_RAM+0x44>
		*text_char = '-';
 8001930:	232d      	movs	r3, #45	; 0x2d
 8001932:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		data = data * -1;					// Only number module
 8001936:	edd7 7a03 	vldr	s15, [r7, #12]
 800193a:	eef1 7a67 	vneg.f32	s15, s15
 800193e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001942:	e002      	b.n	800194a <graphic_puts_float_RAM+0x4a>
	} else {
		*text_char = '+';					// Space for sign character
 8001944:	232b      	movs	r3, #43	; 0x2b
 8001946:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	}
	dec 		= (uint32_t)data;			// Integer part of a number;
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001952:	ee17 3a90 	vmov	r3, s15
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t i 	= 1;						// First character is sign
 8001958:	2301      	movs	r3, #1
 800195a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	itoa( dec, text_char + i , 10 );
 800195e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001960:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001964:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001968:	4413      	add	r3, r2
 800196a:	220a      	movs	r2, #10
 800196c:	4619      	mov	r1, r3
 800196e:	f001 f97f 	bl	8002c70 <itoa>

	while ( *(ptr_char + i++) ) {}			// Find number of integer digits
 8001972:	bf00      	nop
 8001974:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 800197e:	461a      	mov	r2, r3
 8001980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f4      	bne.n	8001974 <graphic_puts_float_RAM+0x74>

	text_char[ i - 1 ] = '.';				// Place '.' character';
 800198a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800198e:	3b01      	subs	r3, #1
 8001990:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001994:	4413      	add	r3, r2
 8001996:	222e      	movs	r2, #46	; 0x2e
 8001998:	f803 2c18 	strb.w	r2, [r3, #-24]
	data = data - (float32_t)dec;			// Fractional part of a number
 800199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ae:	edc7 7a03 	vstr	s15, [r7, #12]

	do {									// Find first zeros after the dot
		data = (float32_t)data*10;
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	edc7 7a03 	vstr	s15, [r7, #12]
		dec  = (uint32_t)data;
 80019c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ca:	ee17 3a90 	vmov	r3, s15
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if ( dec == 0 ) {
 80019d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <graphic_puts_float_RAM+0xec>
			text_char[ i++ ] = '0';
 80019d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 80019e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80019e4:	4413      	add	r3, r2
 80019e6:	2230      	movs	r2, #48	; 0x30
 80019e8:	f803 2c18 	strb.w	r2, [r3, #-24]
		}
	} while ( (dec == 0) && (i <= FLOAT_PRECISION ) );
 80019ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <graphic_puts_float_RAM+0xfa>
 80019f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d9db      	bls.n	80019b2 <graphic_puts_float_RAM+0xb2>

	dec = (uint32_t)powf( 10, FLOAT_PRECISION - (i - 1) )*data;   // 10000000 * data
 80019fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	eef0 0a67 	vmov.f32	s1, s15
 8001a0e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001a12:	f001 f971 	bl	8002cf8 <powf>
 8001a16:	eef0 7a40 	vmov.f32	s15, s0
 8001a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
	itoa( (uint32_t)dec, text_char + i, 10 );
 8001a34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a3e:	4413      	add	r3, r2
 8001a40:	220a      	movs	r2, #10
 8001a42:	4619      	mov	r1, r3
 8001a44:	f001 f914 	bl	8002c70 <itoa>

	(void)graphic_char_to_wide( text_wchar, text_char );
 8001a48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff29 	bl	80018aa <graphic_char_to_wide>
    string->stringLength = graphic_puts_RAM( buffer, string, textSize, color, bg, gamma );
 8001a58:	7afa      	ldrb	r2, [r7, #11]
 8001a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6939      	ldr	r1, [r7, #16]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff fea8 	bl	80017bc <graphic_puts_RAM>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	809a      	strh	r2, [r3, #4]
}
 8001a74:	bf00      	nop
 8001a76:	3758      	adds	r7, #88	; 0x58
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <TEXT_display_float>:
	Text->y = y;
	Text->onChange = 1;
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
	graphic_puts_int_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
}
void TEXT_display_float( int16_t x, int16_t y, float number, T_STRING * Text ) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4603      	mov	r3, r0
 8001a84:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	81fb      	strh	r3, [r7, #14]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	81bb      	strh	r3, [r7, #12]
	wchar_t String[10];
	Text->str = String;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f107 0210 	add.w	r2, r7, #16
 8001a96:	609a      	str	r2, [r3, #8]
	Text->x = x;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	89fa      	ldrh	r2, [r7, #14]
 8001a9c:	801a      	strh	r2, [r3, #0]
	Text->y = y;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	89ba      	ldrh	r2, [r7, #12]
 8001aa2:	805a      	strh	r2, [r3, #2]
	Text->onChange = 1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	741a      	strb	r2, [r3, #16]
	Text->fontPtrPGM = (FONT_INFO *)&MicrosoftSansSerif8ptFontInfo_var;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <TEXT_display_float+0x58>)
 8001aae:	60da      	str	r2, [r3, #12]
	graphic_puts_float_RAM( TextBuffer, Text, number, FONTx1, (uint32_t)WhiteColor, (uint32_t)BlackColor, &GammaRGB );
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <TEXT_display_float+0x5c>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <TEXT_display_float+0x60>)
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	ed97 0a02 	vldr	s0, [r7, #8]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f7ff ff1a 	bl	8001900 <graphic_puts_float_RAM>
}
 8001acc:	bf00      	nop
 8001ace:	3738      	adds	r7, #56	; 0x38
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	08003f24 	.word	0x08003f24
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	08003f84 	.word	0x08003f84

08001ae0 <sw_dma_memset_init>:
 *      Author: simon
 */

#include "sw_mcu_conf.h"

void sw_dma_memset_init( uint32_t bits ) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
#ifdef STM32F3
	RCC->AHBENR |= RCC_AHBENR_DMA2EN;			// DMA1 clock enabled
#elif defined STM32L4
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;			// DMA1 clock enabled
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <sw_dma_memset_init+0x64>)
 8001aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <sw_dma_memset_init+0x64>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;			// Clear CCR_EN bit - ready to CMAR,CPAR,CNDTR modification
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR = DMA_CCR_MEM2MEM		// Copy memory to memory
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b02:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8001b06:	601a      	str	r2, [r3, #0]
						 |DMA_CCR_MINC 	 		// Memory increment mode enabled
//						 |DMA_CCR_PINC 	 		// Peripheral increment mode enabled
//						 |DMA_CCR_DIR			// Data transfer direction. CMAR -> CPAR (Memory to Peripheral)
						 ;
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b12:	6013      	str	r3, [r2, #0]
	bits = ( bits << DMA_CCR_PSIZE_Pos );
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	490a      	ldr	r1, [pc, #40]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
	bits = ( bits << DMA_CCR_MSIZE_Pos );
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	607b      	str	r3, [r7, #4]
	DMA2_Channel4->CCR |= bits;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4905      	ldr	r1, [pc, #20]	; (8001b48 <sw_dma_memset_init+0x68>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]

}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40020444 	.word	0x40020444

08001b4c <I2C1_ER_IRQHandler>:
	sw_i2c_start();
}
/*************************************************************************************************/

/***********************************************************************/
void I2C1_ER_IRQHandler( void ) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	if (hI2Cx->I2C->ISR & I2C_ISR_ARLO ) {	// Arbitration lost
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00f      	beq.n	8001b80 <I2C1_ER_IRQHandler+0x34>
		hI2Cx->I2C->ICR = I2C_ICR_ARLOCF;
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6a:	61da      	str	r2, [r3, #28]
		hI2Cx->I2C->CR1 &= ~I2C_CR1_PE;		// I2C off
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
	}
	if (hI2Cx->I2C->ISR & I2C_ISR_BERR ) {	// Bus error
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00f      	beq.n	8001bb0 <I2C1_ER_IRQHandler+0x64>
		hI2Cx->I2C->ICR = I2C_ICR_BERRCF;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b9a:	61da      	str	r2, [r3, #28]
		hI2Cx->I2C->CR1 &= ~I2C_CR1_PE;		// I2C off
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
	}
	if (hI2Cx->I2C->ISR & I2C_ISR_OVR ) {		// Overrun / Underrun
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00f      	beq.n	8001be0 <I2C1_ER_IRQHandler+0x94>
		hI2Cx->I2C->ICR = I2C_ICR_OVRCF;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	61da      	str	r2, [r3, #28]
		hI2Cx->I2C->CR1 &= ~I2C_CR1_PE;		// I2C off
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <I2C1_ER_IRQHandler+0xa4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
	}
	i2cErrorOcurred = 1;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <I2C1_ER_IRQHandler+0xa8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	20000520 	.word	0x20000520
 8001bf4:	20000524 	.word	0x20000524

08001bf8 <DMA1_Channel6_IRQHandler>:
}
/***********************************************************************/

//--------------------------- PUBLIC FUNCTIONS ------------------------//
/***************** I2C TX buffer transmitted ***************************/
void I2C_DMA_ChannelTX_IRQHandler( void ) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
	if ( DMA1->ISR & I2C_DMATX_TC_FLAG ) {
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <DMA1_Channel6_IRQHandler+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00c      	beq.n	8001c22 <DMA1_Channel6_IRQHandler+0x2a>
		DMA1->IFCR = DMA_IFCR_CTCIF6; // Channel 6 Transfer Complete clear
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <DMA1_Channel6_IRQHandler+0x34>)
 8001c0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c0e:	605a      	str	r2, [r3, #4]

		I2C_DMATX_Channel->CCR &= ~DMA_CCR_EN;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <DMA1_Channel6_IRQHandler+0x38>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <DMA1_Channel6_IRQHandler+0x38>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]
		i2cTransmitted = 1;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <DMA1_Channel6_IRQHandler+0x3c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
	}
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	4002006c 	.word	0x4002006c
 8001c34:	20000525 	.word	0x20000525

08001c38 <DMA1_Channel7_IRQHandler>:
/***********************************************************************/

/******************** I2C RX buffer received ***************************/
void I2C_DMA_ChannelRX_IRQHandler( void ) {
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	if ( DMA1->ISR & I2C_DMARX_TC_FLAG ) {
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <DMA1_Channel7_IRQHandler+0x34>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00c      	beq.n	8001c62 <DMA1_Channel7_IRQHandler+0x2a>
		DMA1->IFCR = DMA_IFCR_CTCIF7; // Channel 7 Transfer Complete clear
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <DMA1_Channel7_IRQHandler+0x34>)
 8001c4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4e:	605a      	str	r2, [r3, #4]

		I2C_DMARX_Channel->CCR &= ~DMA_CCR_EN;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <DMA1_Channel7_IRQHandler+0x38>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <DMA1_Channel7_IRQHandler+0x38>)
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

		i2cReceived = 1;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <DMA1_Channel7_IRQHandler+0x3c>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
	}
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020080 	.word	0x40020080
 8001c74:	20000526 	.word	0x20000526

08001c78 <sw_i2c_write_buff>:
}




static I2CSTATUS sw_i2c_write_buff( uint16_t nBytes, const uint8_t * pBuff ) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	e045      	b.n	8001d16 <sw_i2c_write_buff+0x9e>
	whileTimer = 2;
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <sw_i2c_write_buff+0xb0>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8001c90:	e013      	b.n	8001cba <sw_i2c_write_buff+0x42>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <sw_i2c_write_buff+0xb0>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10e      	bne.n	8001cba <sw_i2c_write_buff+0x42>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <sw_i2c_write_buff+0xb4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <sw_i2c_write_buff+0x38>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <sw_i2c_write_buff+0x3a>
 8001cb0:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <sw_i2c_write_buff+0x42>
			return I2C_Nack;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e010      	b.n	8001cdc <sw_i2c_write_buff+0x64>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <sw_i2c_write_buff+0xb4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <sw_i2c_write_buff+0x56>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <sw_i2c_write_buff+0x58>
 8001cce:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1db      	bne.n	8001c92 <sw_i2c_write_buff+0x1a>
	return I2C_Ok;
 8001cda:	2300      	movs	r3, #0
		if ( sw_i2c_isTXIS_error() != I2C_Ok ) return I2C_Error;
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <sw_i2c_write_buff+0x6c>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e01d      	b.n	8001d20 <sw_i2c_write_buff+0xa8>
		sw_i2c_write( *pBuff++ );
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	603a      	str	r2, [r7, #0]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	737b      	strb	r3, [r7, #13]
static INLINE void 		sw_i2c_stop(void)  {
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
}
static INLINE I2CSTATUS sw_i2c_write( uint8_t data ) {
	sw_i2c_get_handle()->I2C->TXDR = data;								// First write byte
 8001cee:	f000 fd05 	bl	80026fc <sw_i2c_get_handle>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	7b7a      	ldrb	r2, [r7, #13]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8001cfa:	bf00      	nop
 8001cfc:	f000 fcfe 	bl	80026fc <sw_i2c_get_handle>
 8001d00:	4603      	mov	r3, r0
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f6      	beq.n	8001cfc <sw_i2c_write_buff+0x84>
	return I2C_Ok;
 8001d0e:	bf00      	nop
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	3301      	adds	r3, #1
 8001d14:	81fb      	strh	r3, [r7, #14]
 8001d16:	89fa      	ldrh	r2, [r7, #14]
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3b5      	bcc.n	8001c8a <sw_i2c_write_buff+0x12>
	}
	return I2C_Ok;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200005bc 	.word	0x200005bc
 8001d2c:	20000010 	.word	0x20000010

08001d30 <sw_i2c_read_buff>:
static I2CSTATUS sw_i2c_read_buff( uint16_t nBytes, uint8_t * pBuff ) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	81fb      	strh	r3, [r7, #14]
 8001d40:	e029      	b.n	8001d96 <sw_i2c_read_buff+0x66>
		while( sw_is_RXNE_flag_ready() == false ) {}
 8001d42:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_RXNE ) return true; else  return false;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <sw_i2c_read_buff+0x78>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <sw_i2c_read_buff+0x28>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <sw_i2c_read_buff+0x2a>
 8001d58:	2300      	movs	r3, #0
		while( sw_is_RXNE_flag_ready() == false ) {}
 8001d5a:	f083 0301 	eor.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ef      	bne.n	8001d44 <sw_i2c_read_buff+0x14>
		*pBuff++ = sw_i2c_read( DUMMY );
 8001d64:	683c      	ldr	r4, [r7, #0]
 8001d66:	1c63      	adds	r3, r4, #1
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	737b      	strb	r3, [r7, #13]
}
static INLINE uint8_t	sw_i2c_read( uint8_t dummy ) {
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_RXNE ) == 0 ) {}	// then check the flag
 8001d6e:	bf00      	nop
 8001d70:	f000 fcc4 	bl	80026fc <sw_i2c_get_handle>
 8001d74:	4603      	mov	r3, r0
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f6      	beq.n	8001d70 <sw_i2c_read_buff+0x40>
	return ( sw_i2c_get_handle()->I2C->RXDR & 0xFF );
 8001d82:	f000 fcbb 	bl	80026fc <sw_i2c_get_handle>
 8001d86:	4603      	mov	r3, r0
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	7023      	strb	r3, [r4, #0]
	for ( uint16_t i=0; i< nBytes; i++ ) {
 8001d90:	89fb      	ldrh	r3, [r7, #14]
 8001d92:	3301      	adds	r3, #1
 8001d94:	81fb      	strh	r3, [r7, #14]
 8001d96:	89fa      	ldrh	r2, [r7, #14]
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3d1      	bcc.n	8001d42 <sw_i2c_read_buff+0x12>
	}
	return I2C_Ok;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd90      	pop	{r4, r7, pc}
 8001da8:	20000010 	.word	0x20000010

08001dac <sw_i2c_write_byte>:
/********************************************************************************/


/*********************************** Write 1 byte *******************************/
static I2CSTATUS sw_i2c_write_byte( uint8_t byte, bool repeatedStart ) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
static INLINE void sw_i2c_autoend_off(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
static INLINE void sw_i2c_nBytes( uint8_t nBytes ) {
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
}
static INLINE void sw_i2c_read_dir (void) { sw_i2c_get_handle()->I2C->CR2 |=  I2C_CR2_RD_WRN; }
static INLINE void sw_i2c_write_dir(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8001dbc:	f000 fc9e 	bl	80026fc <sw_i2c_get_handle>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8001dce:	f000 fc95 	bl	80026fc <sw_i2c_get_handle>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	bf00      	nop
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <sw_i2c_write_byte+0x174>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	4611      	mov	r1, r2
 8001df2:	4a4b      	ldr	r2, [pc, #300]	; (8001f20 <sw_i2c_write_byte+0x174>)
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6053      	str	r3, [r2, #4]
}
 8001df8:	bf00      	nop
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_START;
 8001dfa:	f000 fc7f 	bl	80026fc <sw_i2c_get_handle>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e08:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <sw_i2c_write_byte+0x178>)
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8001e10:	e013      	b.n	8001e3a <sw_i2c_write_byte+0x8e>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001e12:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <sw_i2c_write_byte+0x178>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10e      	bne.n	8001e3a <sw_i2c_write_byte+0x8e>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <sw_i2c_write_byte+0x17c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <sw_i2c_write_byte+0x84>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <sw_i2c_write_byte+0x86>
 8001e30:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <sw_i2c_write_byte+0x8e>
			return I2C_Nack;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e010      	b.n	8001e5c <sw_i2c_write_byte+0xb0>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <sw_i2c_write_byte+0x17c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <sw_i2c_write_byte+0xa2>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <sw_i2c_write_byte+0xa4>
 8001e4e:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1db      	bne.n	8001e12 <sw_i2c_write_byte+0x66>
	return I2C_Ok;
 8001e5a:	2300      	movs	r3, #0
	sw_i2c_write_dir();
	sw_i2c_autoend_off();

	sw_i2c_nBytes(1);
	sw_i2c_start();
	if ( sw_i2c_isTXIS_error() != I2C_Ok ) return I2C_Error;
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <sw_i2c_write_byte+0xb8>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e058      	b.n	8001f16 <sw_i2c_write_byte+0x16a>
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	73bb      	strb	r3, [r7, #14]
	sw_i2c_get_handle()->I2C->TXDR = data;								// First write byte
 8001e68:	f000 fc48 	bl	80026fc <sw_i2c_get_handle>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	7bba      	ldrb	r2, [r7, #14]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8001e74:	bf00      	nop
 8001e76:	f000 fc41 	bl	80026fc <sw_i2c_get_handle>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f6      	beq.n	8001e76 <sw_i2c_write_byte+0xca>
	whileTimer = 2;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <sw_i2c_write_byte+0x178>)
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	801a      	strh	r2, [r3, #0]
	while( sw_is_TC_flag_ready() == false ) {
 8001e8e:	e013      	b.n	8001eb8 <sw_i2c_write_byte+0x10c>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <sw_i2c_write_byte+0x178>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <sw_i2c_write_byte+0x10c>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <sw_i2c_write_byte+0x17c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <sw_i2c_write_byte+0x102>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <sw_i2c_write_byte+0x104>
 8001eae:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <sw_i2c_write_byte+0x10c>
			return I2C_Nack;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e010      	b.n	8001eda <sw_i2c_write_byte+0x12e>
	if( hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <sw_i2c_write_byte+0x17c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <sw_i2c_write_byte+0x120>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <sw_i2c_write_byte+0x122>
 8001ecc:	2300      	movs	r3, #0
	while( sw_is_TC_flag_ready() == false ) {
 8001ece:	f083 0301 	eor.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1db      	bne.n	8001e90 <sw_i2c_write_byte+0xe4>
	return I2C_Ok;
 8001ed8:	2300      	movs	r3, #0

	sw_i2c_write( byte );
	if ( sw_i2c_isTC_error()   != I2C_Ok ) return I2C_Error;
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <sw_i2c_write_byte+0x136>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e019      	b.n	8001f16 <sw_i2c_write_byte+0x16a>

	if ( !repeatedStart ) sw_i2c_stop();
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d012      	beq.n	8001f14 <sw_i2c_write_byte+0x168>
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
 8001eee:	f000 fc05 	bl	80026fc <sw_i2c_get_handle>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001efc:	605a      	str	r2, [r3, #4]
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 8001efe:	bf00      	nop
 8001f00:	f000 fbfc 	bl	80026fc <sw_i2c_get_handle>
 8001f04:	4603      	mov	r3, r0
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f6      	beq.n	8001f00 <sw_i2c_write_byte+0x154>
}
 8001f12:	bf00      	nop
	return I2C_Ok;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40005400 	.word	0x40005400
 8001f24:	200005bc 	.word	0x200005bc
 8001f28:	20000010 	.word	0x20000010

08001f2c <sw_i2c_write_bulk>:
}
********************************************************************************/

/*********************************** Write bulk *********************************/
I2CSTATUS sw_i2c_write_bulk( uint8_t  devAddr, uint8_t regAddr,
						 	 uint16_t nBytes, const uint8_t * pBuff ) {
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	71bb      	strb	r3, [r7, #6]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	80bb      	strh	r3, [r7, #4]
	hI2Cx->I2C->CR2 = 0; hI2Cx->I2C->ICR = 0xffffffff;
 8001f40:	4b9d      	ldr	r3, [pc, #628]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	4b9b      	ldr	r3, [pc, #620]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	61da      	str	r2, [r3, #28]
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8001f5a:	f000 fbcf 	bl	80026fc <sw_i2c_get_handle>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8001f68:	f024 0403 	bic.w	r4, r4, #3
 8001f6c:	7c7d      	ldrb	r5, [r7, #17]
 8001f6e:	f000 fbc5 	bl	80026fc <sw_i2c_get_handle>
 8001f72:	4603      	mov	r3, r0
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	ea44 0205 	orr.w	r2, r4, r5
 8001f7a:	605a      	str	r2, [r3, #4]
}
 8001f7c:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8001f7e:	f000 fbbd 	bl	80026fc <sw_i2c_get_handle>
 8001f82:	4603      	mov	r3, r0
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 8001f90:	f000 fbb4 	bl	80026fc <sw_i2c_get_handle>
 8001f94:	4603      	mov	r3, r0
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_autoend_off();
	sw_i2c_write_dir();

	nBytes++;											// nBytes + 1 (regAddr byte)
 8001fa2:	88bb      	ldrh	r3, [r7, #4]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	80bb      	strh	r3, [r7, #4]
	if ( nBytes < I2C_CR2_NBYTE_MAX + 1 ) {
 8001fa8:	88bb      	ldrh	r3, [r7, #4]
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d811      	bhi.n	8001fd2 <sw_i2c_write_bulk+0xa6>
		sw_i2c_nBytes( nBytes );
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001fb4:	4b81      	ldr	r3, [pc, #516]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001fbc:	7c3a      	ldrb	r2, [r7, #16]
 8001fbe:	0412      	lsls	r2, r2, #16
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	6053      	str	r3, [r2, #4]
}
 8001fc8:	bf00      	nop
		nBytes--;
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	80bb      	strh	r3, [r7, #4]
 8001fd0:	e016      	b.n	8002000 <sw_i2c_write_bulk+0xd4>
 8001fd2:	23ff      	movs	r3, #255	; 0xff
 8001fd4:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8001fd6:	4b79      	ldr	r3, [pc, #484]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	0412      	lsls	r2, r2, #16
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4a75      	ldr	r2, [pc, #468]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	6053      	str	r3, [r2, #4]
}
 8001fea:	bf00      	nop
	} else {
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001ffe:	605a      	str	r2, [r3, #4]
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_START;
 8002000:	f000 fb7c 	bl	80026fc <sw_i2c_get_handle>
 8002004:	4603      	mov	r3, r0
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800200e:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 8002010:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <sw_i2c_write_bulk+0x294>)
 8002012:	2202      	movs	r2, #2
 8002014:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8002016:	e013      	b.n	8002040 <sw_i2c_write_bulk+0x114>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002018:	4b69      	ldr	r3, [pc, #420]	; (80021c0 <sw_i2c_write_bulk+0x294>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <sw_i2c_write_bulk+0x114>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 8002022:	4b65      	ldr	r3, [pc, #404]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <sw_i2c_write_bulk+0x10a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <sw_i2c_write_bulk+0x10c>
 8002036:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <sw_i2c_write_bulk+0x114>
			return I2C_Nack;
 800203c:	2302      	movs	r3, #2
 800203e:	e010      	b.n	8002062 <sw_i2c_write_bulk+0x136>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <sw_i2c_write_bulk+0x128>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <sw_i2c_write_bulk+0x12a>
 8002054:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1db      	bne.n	8002018 <sw_i2c_write_bulk+0xec>
	return I2C_Ok;
 8002060:	2300      	movs	r3, #0
	}

	sw_i2c_start();
	if ( sw_i2c_isTXIS_error() != I2C_Ok) return I2C_Error;
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <sw_i2c_write_bulk+0x13e>
 8002066:	2301      	movs	r3, #1
 8002068:	e0d3      	b.n	8002212 <sw_i2c_write_bulk+0x2e6>
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	73bb      	strb	r3, [r7, #14]
	sw_i2c_get_handle()->I2C->TXDR = data;								// First write byte
 800206e:	f000 fb45 	bl	80026fc <sw_i2c_get_handle>
 8002072:	4603      	mov	r3, r0
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	7bba      	ldrb	r2, [r7, #14]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 800207a:	bf00      	nop
 800207c:	f000 fb3e 	bl	80026fc <sw_i2c_get_handle>
 8002080:	4603      	mov	r3, r0
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f6      	beq.n	800207c <sw_i2c_write_bulk+0x150>
	whileTimer = 2;
 800208e:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <sw_i2c_write_bulk+0x294>)
 8002090:	2202      	movs	r2, #2
 8002092:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8002094:	e013      	b.n	80020be <sw_i2c_write_bulk+0x192>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002096:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <sw_i2c_write_bulk+0x294>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10e      	bne.n	80020be <sw_i2c_write_bulk+0x192>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 80020a0:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <sw_i2c_write_bulk+0x188>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <sw_i2c_write_bulk+0x18a>
 80020b4:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <sw_i2c_write_bulk+0x192>
			return I2C_Nack;
 80020ba:	2302      	movs	r3, #2
 80020bc:	e010      	b.n	80020e0 <sw_i2c_write_bulk+0x1b4>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <sw_i2c_write_bulk+0x1a6>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <sw_i2c_write_bulk+0x1a8>
 80020d2:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1db      	bne.n	8002096 <sw_i2c_write_bulk+0x16a>
	return I2C_Ok;
 80020de:	2300      	movs	r3, #0

	sw_i2c_write( regAddr ); 							// First byte, address
	if ( sw_i2c_isTXIS_error() != I2C_Ok) return I2C_Error;
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <sw_i2c_write_bulk+0x1bc>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e094      	b.n	8002212 <sw_i2c_write_bulk+0x2e6>

	uint16_t nBlock = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;			//
 80020ec:	23fe      	movs	r3, #254	; 0xfe
 80020ee:	827b      	strh	r3, [r7, #18]
	uint8_t shift	= 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	757b      	strb	r3, [r7, #21]
	while ( nBytes ) {
 80020f4:	e076      	b.n	80021e4 <sw_i2c_write_bulk+0x2b8>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	2bfe      	cmp	r3, #254	; 0xfe
 80020fa:	d963      	bls.n	80021c4 <sw_i2c_write_bulk+0x298>
			if ( nBlock == 0) {
 80020fc:	8afb      	ldrh	r3, [r7, #22]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <sw_i2c_write_bulk+0x1ec>
				n = I2C_CR2_NBYTE_MAX - 1;
 8002102:	23fe      	movs	r3, #254	; 0xfe
 8002104:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff );
 8002106:	8a7b      	ldrh	r3, [r7, #18]
 8002108:	6839      	ldr	r1, [r7, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fdb4 	bl	8001c78 <sw_i2c_write_buff>
				nBlock++;
 8002110:	8afb      	ldrh	r3, [r7, #22]
 8002112:	3301      	adds	r3, #1
 8002114:	82fb      	strh	r3, [r7, #22]
 8002116:	e010      	b.n	800213a <sw_i2c_write_bulk+0x20e>
			} else {
				n = I2C_CR2_NBYTE_MAX;
 8002118:	23ff      	movs	r3, #255	; 0xff
 800211a:	827b      	strh	r3, [r7, #18]
				sw_i2c_write_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX - 1 );
 800211c:	8afb      	ldrh	r3, [r7, #22]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	82fa      	strh	r2, [r7, #22]
 8002122:	461a      	mov	r2, r3
 8002124:	4613      	mov	r3, r2
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	3b01      	subs	r3, #1
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	441a      	add	r2, r3
 8002130:	8a7b      	ldrh	r3, [r7, #18]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fd9f 	bl	8001c78 <sw_i2c_write_buff>
			}
			while( sw_is_TCR_flag_ready() == false ) {}
 800213a:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <sw_i2c_write_bulk+0x224>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <sw_i2c_write_bulk+0x226>
 8002150:	2300      	movs	r3, #0
			while( sw_is_TCR_flag_ready() == false ) {}
 8002152:	f083 0301 	eor.w	r3, r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ef      	bne.n	800213c <sw_i2c_write_bulk+0x210>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	3bff      	subs	r3, #255	; 0xff
 8002160:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	2bfe      	cmp	r3, #254	; 0xfe
 8002166:	d81a      	bhi.n	800219e <sw_i2c_write_bulk+0x272>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <sw_i2c_write_bulk+0x28c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800217a:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	737b      	strb	r3, [r7, #13]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800218a:	7b7a      	ldrb	r2, [r7, #13]
 800218c:	0412      	lsls	r2, r2, #16
 800218e:	4611      	mov	r1, r2
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <sw_i2c_write_bulk+0x290>)
 8002192:	430b      	orrs	r3, r1
 8002194:	6053      	str	r3, [r2, #4]
}
 8002196:	bf00      	nop
				shift = 1;
 8002198:	2301      	movs	r3, #1
 800219a:	757b      	strb	r3, [r7, #21]
 800219c:	e022      	b.n	80021e4 <sw_i2c_write_bulk+0x2b8>
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	733b      	strb	r3, [r7, #12]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <sw_i2c_write_bulk+0x290>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80021aa:	7b3a      	ldrb	r2, [r7, #12]
 80021ac:	0412      	lsls	r2, r2, #16
 80021ae:	4611      	mov	r1, r2
 80021b0:	4a02      	ldr	r2, [pc, #8]	; (80021bc <sw_i2c_write_bulk+0x290>)
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6053      	str	r3, [r2, #4]
 80021b6:	e015      	b.n	80021e4 <sw_i2c_write_bulk+0x2b8>
 80021b8:	20000010 	.word	0x20000010
 80021bc:	40005400 	.word	0x40005400
 80021c0:	200005bc 	.word	0x200005bc
			} else {
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
			}
		} else {
			sw_i2c_write_buff( nBytes , (uint8_t *)pBuff + nBlock*I2C_CR2_NBYTE_MAX - shift );
 80021c4:	8afa      	ldrh	r2, [r7, #22]
 80021c6:	4613      	mov	r3, r2
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	7d7b      	ldrb	r3, [r7, #21]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	441a      	add	r2, r3
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fd4c 	bl	8001c78 <sw_i2c_write_buff>
			nBytes = 0;									// End of while() loop
 80021e0:	2300      	movs	r3, #0
 80021e2:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d185      	bne.n	80020f6 <sw_i2c_write_bulk+0x1ca>
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
 80021ea:	f000 fa87 	bl	80026fc <sw_i2c_get_handle>
 80021ee:	4603      	mov	r3, r0
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021f8:	605a      	str	r2, [r3, #4]
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80021fa:	bf00      	nop
 80021fc:	f000 fa7e 	bl	80026fc <sw_i2c_get_handle>
 8002200:	4603      	mov	r3, r0
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f6      	beq.n	80021fc <sw_i2c_write_bulk+0x2d0>
}
 800220e:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	bf00      	nop

0800221c <sw_i2c_read_bulk>:
/********************************************************************************/

/*********************************** Read bulk **********************************/
I2CSTATUS sw_i2c_read_bulk ( uint8_t  devAddr, uint8_t  regAddr,
							 uint16_t nBytes,  uint8_t * pBuff ) {
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	460b      	mov	r3, r1
 800222a:	71bb      	strb	r3, [r7, #6]
 800222c:	4613      	mov	r3, r2
 800222e:	80bb      	strh	r3, [r7, #4]
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	74fb      	strb	r3, [r7, #19]
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002234:	f000 fa62 	bl	80026fc <sw_i2c_get_handle>
 8002238:	4603      	mov	r3, r0
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8002242:	f024 0403 	bic.w	r4, r4, #3
 8002246:	7cfd      	ldrb	r5, [r7, #19]
 8002248:	f000 fa58 	bl	80026fc <sw_i2c_get_handle>
 800224c:	4603      	mov	r3, r0
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	ea44 0205 	orr.w	r2, r4, r5
 8002254:	605a      	str	r2, [r3, #4]
}
 8002256:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	sw_i2c_write_byte( regAddr, I2C_REPEATED_START );
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fda5 	bl	8001dac <sw_i2c_write_byte>
static INLINE void sw_i2c_read_dir (void) { sw_i2c_get_handle()->I2C->CR2 |=  I2C_CR2_RD_WRN; }
 8002262:	f000 fa4b 	bl	80026fc <sw_i2c_get_handle>
 8002266:	4603      	mov	r3, r0
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	bf00      	nop

	sw_i2c_read_dir();

	if ( nBytes <= I2C_CR2_NBYTE_MAX ) {
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d817      	bhi.n	80022aa <sw_i2c_read_bulk+0x8e>
		CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800228c:	605a      	str	r2, [r3, #4]
		sw_i2c_nBytes( nBytes );
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	74bb      	strb	r3, [r7, #18]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002294:	4b56      	ldr	r3, [pc, #344]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800229c:	7cba      	ldrb	r2, [r7, #18]
 800229e:	0412      	lsls	r2, r2, #16
 80022a0:	4611      	mov	r1, r2
 80022a2:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6053      	str	r3, [r2, #4]
}
 80022a8:	e016      	b.n	80022d8 <sw_i2c_read_bulk+0xbc>
	} else {
		SET_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 80022aa:	4b50      	ldr	r3, [pc, #320]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4b4e      	ldr	r3, [pc, #312]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	23ff      	movs	r3, #255	; 0xff
 80022c0:	747b      	strb	r3, [r7, #17]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80022ca:	7c7a      	ldrb	r2, [r7, #17]
 80022cc:	0412      	lsls	r2, r2, #16
 80022ce:	4611      	mov	r1, r2
 80022d0:	4a47      	ldr	r2, [pc, #284]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 80022d2:	430b      	orrs	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]
}
 80022d6:	bf00      	nop
		sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
	}

	uint16_t nBlock = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	82fb      	strh	r3, [r7, #22]
	uint16_t n 		= I2C_CR2_NBYTE_MAX - 1;
 80022dc:	23fe      	movs	r3, #254	; 0xfe
 80022de:	82bb      	strh	r3, [r7, #20]
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_START;
 80022e0:	f000 fa0c 	bl	80026fc <sw_i2c_get_handle>
 80022e4:	4603      	mov	r3, r0
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ee:	605a      	str	r2, [r3, #4]
	sw_i2c_start();
	while ( nBytes ) {
 80022f0:	e061      	b.n	80023b6 <sw_i2c_read_bulk+0x19a>
		if ( nBytes >=  I2C_CR2_NBYTE_MAX ) {
 80022f2:	88bb      	ldrh	r3, [r7, #4]
 80022f4:	2bfe      	cmp	r3, #254	; 0xfe
 80022f6:	d950      	bls.n	800239a <sw_i2c_read_bulk+0x17e>
			if ( nBlock != 0) n = I2C_CR2_NBYTE_MAX;
 80022f8:	8afb      	ldrh	r3, [r7, #22]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <sw_i2c_read_bulk+0xe6>
 80022fe:	23ff      	movs	r3, #255	; 0xff
 8002300:	82bb      	strh	r3, [r7, #20]

			sw_i2c_read_buff( n, (uint8_t *)pBuff +  nBlock++ * I2C_CR2_NBYTE_MAX  );
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	82fa      	strh	r2, [r7, #22]
 8002308:	461a      	mov	r2, r3
 800230a:	4613      	mov	r3, r2
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	441a      	add	r2, r3
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fd08 	bl	8001d30 <sw_i2c_read_buff>
			while( sw_is_TCR_flag_ready() == false ) {}
 8002320:	bf00      	nop
	if( hI2Cx->I2C->ISR & I2C_ISR_TCR ) return true; else  return false;
 8002322:	4b32      	ldr	r3, [pc, #200]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <sw_i2c_read_bulk+0x11a>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <sw_i2c_read_bulk+0x11c>
 8002336:	2300      	movs	r3, #0
			while( sw_is_TCR_flag_ready() == false ) {}
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <sw_i2c_read_bulk+0x106>

			nBytes = nBytes - I2C_CR2_NBYTE_MAX;
 8002342:	88bb      	ldrh	r3, [r7, #4]
 8002344:	3bff      	subs	r3, #255	; 0xff
 8002346:	80bb      	strh	r3, [r7, #4]
			if ( nBytes < I2C_CR2_NBYTE_MAX ) {
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	2bfe      	cmp	r3, #254	; 0xfe
 800234c:	d818      	bhi.n	8002380 <sw_i2c_read_bulk+0x164>
				CLEAR_BIT( hI2Cx->I2C->CR2, I2C_CR2_RELOAD );
 800234e:	4b27      	ldr	r3, [pc, #156]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <sw_i2c_read_bulk+0x1d0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002360:	605a      	str	r2, [r3, #4]
				sw_i2c_nBytes( nBytes );						// Last nBytes < 255
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	743b      	strb	r3, [r7, #16]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002370:	7c3a      	ldrb	r2, [r7, #16]
 8002372:	0412      	lsls	r2, r2, #16
 8002374:	4611      	mov	r1, r2
 8002376:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 8002378:	430b      	orrs	r3, r1
 800237a:	6053      	str	r3, [r2, #4]
}
 800237c:	bf00      	nop
 800237e:	e01a      	b.n	80023b6 <sw_i2c_read_bulk+0x19a>
 8002380:	23ff      	movs	r3, #255	; 0xff
 8002382:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	0412      	lsls	r2, r2, #16
 8002390:	4611      	mov	r1, r2
 8002392:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <sw_i2c_read_bulk+0x1d4>)
 8002394:	430b      	orrs	r3, r1
 8002396:	6053      	str	r3, [r2, #4]
 8002398:	e00d      	b.n	80023b6 <sw_i2c_read_bulk+0x19a>
			}
			else
				sw_i2c_nBytes( I2C_CR2_NBYTE_MAX );
		} else {
			sw_i2c_read_buff( nBytes, (uint8_t *)pBuff +  nBlock*I2C_CR2_NBYTE_MAX );
 800239a:	8afa      	ldrh	r2, [r7, #22]
 800239c:	4613      	mov	r3, r2
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	441a      	add	r2, r3
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fcbf 	bl	8001d30 <sw_i2c_read_buff>
			nBytes = 0;											// End of while() loop
 80023b2:	2300      	movs	r3, #0
 80023b4:	80bb      	strh	r3, [r7, #4]
	while ( nBytes ) {
 80023b6:	88bb      	ldrh	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d19a      	bne.n	80022f2 <sw_i2c_read_bulk+0xd6>
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
 80023bc:	f000 f99e 	bl	80026fc <sw_i2c_get_handle>
 80023c0:	4603      	mov	r3, r0
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ca:	605a      	str	r2, [r3, #4]
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80023cc:	bf00      	nop
 80023ce:	f000 f995 	bl	80026fc <sw_i2c_get_handle>
 80023d2:	4603      	mov	r3, r0
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f6      	beq.n	80023ce <sw_i2c_read_bulk+0x1b2>
}
 80023e0:	bf00      	nop
		}
	}
	sw_i2c_stop();
	return I2C_Ok;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bdb0      	pop	{r4, r5, r7, pc}
 80023ec:	20000010 	.word	0x20000010
 80023f0:	40005400 	.word	0x40005400

080023f4 <sw_i2c_write_reg8>:
/********************************************************************************/

/**************************** Registers functions *******************************/
I2CSTATUS sw_i2c_write_reg8( uint8_t devAddr, uint8_t reg, uint8_t data ) {
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	460b      	mov	r3, r1
 8002400:	71bb      	strb	r3, [r7, #6]
 8002402:	4613      	mov	r3, r2
 8002404:	717b      	strb	r3, [r7, #5]
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	73bb      	strb	r3, [r7, #14]
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 800240a:	f000 f977 	bl	80026fc <sw_i2c_get_handle>
 800240e:	4603      	mov	r3, r0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8002418:	f024 0403 	bic.w	r4, r4, #3
 800241c:	7bbd      	ldrb	r5, [r7, #14]
 800241e:	f000 f96d 	bl	80026fc <sw_i2c_get_handle>
 8002422:	4603      	mov	r3, r0
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	ea44 0205 	orr.w	r2, r4, r5
 800242a:	605a      	str	r2, [r3, #4]
}
 800242c:	bf00      	nop
static INLINE void sw_i2c_write_dir(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_RD_WRN; }
 800242e:	f000 f965 	bl	80026fc <sw_i2c_get_handle>
 8002432:	4603      	mov	r3, r0
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	bf00      	nop
static INLINE void sw_i2c_autoend_off(void) { sw_i2c_get_handle()->I2C->CR2 &= ~I2C_CR2_AUTOEND; }
 8002440:	f000 f95c 	bl	80026fc <sw_i2c_get_handle>
 8002444:	4603      	mov	r3, r0
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	bf00      	nop
 8002452:	2302      	movs	r3, #2
 8002454:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( I2C1->CR2, I2C_CR2_NBYTES, nBytes << I2C_CR2_NBYTES_Pos );
 8002456:	4b6b      	ldr	r3, [pc, #428]	; (8002604 <sw_i2c_write_reg8+0x210>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	0412      	lsls	r2, r2, #16
 8002462:	4611      	mov	r1, r2
 8002464:	4a67      	ldr	r2, [pc, #412]	; (8002604 <sw_i2c_write_reg8+0x210>)
 8002466:	430b      	orrs	r3, r1
 8002468:	6053      	str	r3, [r2, #4]
}
 800246a:	bf00      	nop
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_START;
 800246c:	f000 f946 	bl	80026fc <sw_i2c_get_handle>
 8002470:	4603      	mov	r3, r0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800247a:	605a      	str	r2, [r3, #4]
	whileTimer = 2;
 800247c:	4b62      	ldr	r3, [pc, #392]	; (8002608 <sw_i2c_write_reg8+0x214>)
 800247e:	2202      	movs	r2, #2
 8002480:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8002482:	e013      	b.n	80024ac <sw_i2c_write_reg8+0xb8>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <sw_i2c_write_reg8+0x214>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10e      	bne.n	80024ac <sw_i2c_write_reg8+0xb8>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <sw_i2c_write_reg8+0x218>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <sw_i2c_write_reg8+0xae>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <sw_i2c_write_reg8+0xb0>
 80024a2:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <sw_i2c_write_reg8+0xb8>
			return I2C_Nack;
 80024a8:	2302      	movs	r3, #2
 80024aa:	e010      	b.n	80024ce <sw_i2c_write_reg8+0xda>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 80024ac:	4b57      	ldr	r3, [pc, #348]	; (800260c <sw_i2c_write_reg8+0x218>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <sw_i2c_write_reg8+0xcc>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <sw_i2c_write_reg8+0xce>
 80024c0:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1db      	bne.n	8002484 <sw_i2c_write_reg8+0x90>
	return I2C_Ok;
 80024cc:	2300      	movs	r3, #0
	sw_i2c_write_dir();
	sw_i2c_autoend_off();

	sw_i2c_nBytes(2);
	sw_i2c_start();
	if ( sw_i2c_isTXIS_error()	!= I2C_Ok ) return I2C_Error;
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <sw_i2c_write_reg8+0xe2>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e091      	b.n	80025fa <sw_i2c_write_reg8+0x206>
 80024d6:	79bb      	ldrb	r3, [r7, #6]
 80024d8:	737b      	strb	r3, [r7, #13]
	sw_i2c_get_handle()->I2C->TXDR = data;								// First write byte
 80024da:	f000 f90f 	bl	80026fc <sw_i2c_get_handle>
 80024de:	4603      	mov	r3, r0
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	7b7a      	ldrb	r2, [r7, #13]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 80024e6:	bf00      	nop
 80024e8:	f000 f908 	bl	80026fc <sw_i2c_get_handle>
 80024ec:	4603      	mov	r3, r0
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f6      	beq.n	80024e8 <sw_i2c_write_reg8+0xf4>
	whileTimer = 2;
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <sw_i2c_write_reg8+0x214>)
 80024fc:	2202      	movs	r2, #2
 80024fe:	801a      	strh	r2, [r3, #0]
	while( sw_is_TXIS_flag_ready() == false ) {
 8002500:	e013      	b.n	800252a <sw_i2c_write_reg8+0x136>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <sw_i2c_write_reg8+0x214>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10e      	bne.n	800252a <sw_i2c_write_reg8+0x136>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <sw_i2c_write_reg8+0x218>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <sw_i2c_write_reg8+0x12c>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <sw_i2c_write_reg8+0x12e>
 8002520:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <sw_i2c_write_reg8+0x136>
			return I2C_Nack;
 8002526:	2302      	movs	r3, #2
 8002528:	e010      	b.n	800254c <sw_i2c_write_reg8+0x158>
	if( hI2Cx->I2C->ISR & I2C_ISR_TXIS ) return true; else  return false;
 800252a:	4b38      	ldr	r3, [pc, #224]	; (800260c <sw_i2c_write_reg8+0x218>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <sw_i2c_write_reg8+0x14a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <sw_i2c_write_reg8+0x14c>
 800253e:	2300      	movs	r3, #0
	while( sw_is_TXIS_flag_ready() == false ) {
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1db      	bne.n	8002502 <sw_i2c_write_reg8+0x10e>
	return I2C_Ok;
 800254a:	2300      	movs	r3, #0

	sw_i2c_write( reg );
	if ( sw_i2c_isTXIS_error()	!= I2C_Ok ) return I2C_Error;
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <sw_i2c_write_reg8+0x160>
 8002550:	2301      	movs	r3, #1
 8002552:	e052      	b.n	80025fa <sw_i2c_write_reg8+0x206>
 8002554:	797b      	ldrb	r3, [r7, #5]
 8002556:	733b      	strb	r3, [r7, #12]
	sw_i2c_get_handle()->I2C->TXDR = data;								// First write byte
 8002558:	f000 f8d0 	bl	80026fc <sw_i2c_get_handle>
 800255c:	4603      	mov	r3, r0
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	7b3a      	ldrb	r2, [r7, #12]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
	while ( ( sw_i2c_get_handle()->I2C->ISR & I2C_ISR_TXE ) == 0 ) { }	// then check the flag - buffer empty
 8002564:	bf00      	nop
 8002566:	f000 f8c9 	bl	80026fc <sw_i2c_get_handle>
 800256a:	4603      	mov	r3, r0
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f6      	beq.n	8002566 <sw_i2c_write_reg8+0x172>
	whileTimer = 2;
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <sw_i2c_write_reg8+0x214>)
 800257a:	2202      	movs	r2, #2
 800257c:	801a      	strh	r2, [r3, #0]
	while( sw_is_TC_flag_ready() == false ) {
 800257e:	e013      	b.n	80025a8 <sw_i2c_write_reg8+0x1b4>
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <sw_i2c_write_reg8+0x214>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <sw_i2c_write_reg8+0x1b4>
	if( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) return true; else  return false;
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <sw_i2c_write_reg8+0x218>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <sw_i2c_write_reg8+0x1aa>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <sw_i2c_write_reg8+0x1ac>
 800259e:	2300      	movs	r3, #0
		if ( whileTimer == 0 && sw_is_NACK_flag_ready() ) {
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <sw_i2c_write_reg8+0x1b4>
			return I2C_Nack;
 80025a4:	2302      	movs	r3, #2
 80025a6:	e010      	b.n	80025ca <sw_i2c_write_reg8+0x1d6>
	if( hI2Cx->I2C->ISR & I2C_ISR_TC ) return true; else  return false;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <sw_i2c_write_reg8+0x218>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <sw_i2c_write_reg8+0x1c8>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <sw_i2c_write_reg8+0x1ca>
 80025bc:	2300      	movs	r3, #0
	while( sw_is_TC_flag_ready() == false ) {
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1db      	bne.n	8002580 <sw_i2c_write_reg8+0x18c>
	return I2C_Ok;
 80025c8:	2300      	movs	r3, #0

	sw_i2c_write( data );
	if ( sw_i2c_isTC_error()	!= I2C_Ok ) return I2C_Error;
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <sw_i2c_write_reg8+0x1de>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e013      	b.n	80025fa <sw_i2c_write_reg8+0x206>
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
 80025d2:	f000 f893 	bl	80026fc <sw_i2c_get_handle>
 80025d6:	4603      	mov	r3, r0
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e0:	605a      	str	r2, [r3, #4]
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 80025e2:	bf00      	nop
 80025e4:	f000 f88a 	bl	80026fc <sw_i2c_get_handle>
 80025e8:	4603      	mov	r3, r0
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f6      	beq.n	80025e4 <sw_i2c_write_reg8+0x1f0>
}
 80025f6:	bf00      	nop
	sw_i2c_stop();

	return I2C_Ok;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bdb0      	pop	{r4, r5, r7, pc}
 8002602:	bf00      	nop
 8002604:	40005400 	.word	0x40005400
 8002608:	200005bc 	.word	0x200005bc
 800260c:	20000010 	.word	0x20000010

08002610 <sw_i2c_simple_init>:
	return I2C_Ok;;
}
/********************************************************************************/

/******************************* Init function *********************************/
void sw_i2c_simple_init(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
#ifdef STM32L4
	RCC->APB1RSTR1 |=  RCC_APB1RSTR1_I2C1RST;
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 800261a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800261e:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_I2C1RST;
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	4a32      	ldr	r2, [pc, #200]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 8002626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800262a:	6393      	str	r3, [r2, #56]	; 0x38
	RCC->APB1ENR1  |= RCC_APB1ENR1_I2C1EN;
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <sw_i2c_simple_init+0xe0>)
 8002632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002636:	6593      	str	r3, [r2, #88]	; 0x58
#elif defined STM32F3
	RCC->APB1RSTR |=  RCC_APB1RSTR_I2C1RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
	RCC->APB1ENR  |= RCC_APB1ENR_I2C1EN;
#endif
	SET_BIT	 ( hI2Cx->I2C->CR1, I2C_CR1_SWRST );	// Software reset
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800264a:	601a      	str	r2, [r3, #0]
//	delay_ms(100);
	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_SWRST );
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800265e:	601a      	str	r2, [r3, #0]

//	CLEAR_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
//	while( (hI2Cx->I2C->CR1 & I2C_CR1_PE) );

	gpio_pin_cfg( hI2Cx->scl_port,  hI2Cx->scl_pin,  hI2Cx->alternateFun );
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6898      	ldr	r0, [r3, #8]
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	8a19      	ldrh	r1, [r3, #16]
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	889b      	ldrh	r3, [r3, #4]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe fc20 	bl	8000eb8 <gpio_pin_cfg>
	gpio_pin_cfg( hI2Cx->sda_port,  hI2Cx->sda_pin,  hI2Cx->alternateFun );
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68d8      	ldr	r0, [r3, #12]
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	8a59      	ldrh	r1, [r3, #18]
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	889b      	ldrh	r3, [r3, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fe fc14 	bl	8000eb8 <gpio_pin_cfg>
	gpio_pin_HI ( hI2Cx->scl_port,  hI2Cx->scl_pin );
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	8a1b      	ldrh	r3, [r3, #16]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fcb2 	bl	8001008 <gpio_pin_HI>
	gpio_pin_HI ( hI2Cx->sda_port,  hI2Cx->sda_pin );
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	8a5b      	ldrh	r3, [r3, #18]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f7fe fca8 	bl	8001008 <gpio_pin_HI>

	hI2Cx->I2C->TIMINGR  = (uint32_t)I2C_TIMING_80MHz_100KHz;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <sw_i2c_simple_init+0xe8>)
 80026c0:	611a      	str	r2, [r3, #16]
	SET_BIT( hI2Cx->I2C->CR1, I2C_CR1_PE );
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

	hI2Cx->I2C->CR1 |= I2C_CR1_ERRIE;				// Peripheral enable
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <sw_i2c_simple_init+0xe4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e8:	601a      	str	r2, [r3, #0]
//	NVIC_EnableIRQ( I2C1_ER_IRQn );

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	20000010 	.word	0x20000010
 80026f8:	10909cec 	.word	0x10909cec

080026fc <sw_i2c_get_handle>:

/********************************************************************************/
const I2C_t * sw_i2c_get_handle(void) { return hI2Cx; };
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <sw_i2c_get_handle+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000010 	.word	0x20000010

08002714 <sw_i2c_slave_test>:
/********************************************************************************/

/******************************** Some tests functions ******************************/
I2CSTATUS sw_i2c_slave_test( uint8_t devAddr, uint32_t trials, uint16_t delayMS ) {
 8002714:	b5b0      	push	{r4, r5, r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
 8002720:	4613      	mov	r3, r2
 8002722:	80bb      	strh	r3, [r7, #4]
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG( sw_i2c_get_handle()->I2C->CR2, I2C_CR2_SADD, devAddr << I2C_CR2_SADD_Pos );
 8002728:	f7ff ffe8 	bl	80026fc <sw_i2c_get_handle>
 800272c:	4603      	mov	r3, r0
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 747f 	bic.w	r4, r3, #1020	; 0x3fc
 8002736:	f024 0403 	bic.w	r4, r4, #3
 800273a:	7bfd      	ldrb	r5, [r7, #15]
 800273c:	f7ff ffde 	bl	80026fc <sw_i2c_get_handle>
 8002740:	4603      	mov	r3, r0
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	ea44 0205 	orr.w	r2, r4, r5
 8002748:	605a      	str	r2, [r3, #4]
}
 800274a:	bf00      	nop
	sw_i2c_set_7bitAddr( devAddr );
	while (trials--) {
 800274c:	e01e      	b.n	800278c <sw_i2c_slave_test+0x78>
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_START;
 800274e:	f7ff ffd5 	bl	80026fc <sw_i2c_get_handle>
 8002752:	4603      	mov	r3, r0
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275c:	605a      	str	r2, [r3, #4]
	sw_i2c_get_handle()->I2C->CR2 |= I2C_CR2_STOP;
 800275e:	f7ff ffcd 	bl	80026fc <sw_i2c_get_handle>
 8002762:	4603      	mov	r3, r0
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276c:	605a      	str	r2, [r3, #4]
	while ( (sw_i2c_get_handle()->I2C->ISR & I2C_ISR_STOPF) == 0) {}
 800276e:	bf00      	nop
 8002770:	f7ff ffc4 	bl	80026fc <sw_i2c_get_handle>
 8002774:	4603      	mov	r3, r0
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f6      	beq.n	8002770 <sw_i2c_slave_test+0x5c>
}
 8002782:	bf00      	nop
		sw_i2c_start();
		sw_i2c_stop();
		delay_ms( delayMS );
 8002784:	88bb      	ldrh	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f9c8 	bl	8002b1c <delay_ms>
	while (trials--) {
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	603a      	str	r2, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1db      	bne.n	800274e <sw_i2c_slave_test+0x3a>
	}
	if ( hI2Cx->I2C->ISR & I2C_ISR_NACKF ) {
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <sw_i2c_slave_test+0xa0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <sw_i2c_slave_test+0x96>
		return I2C_Nack;
 80027a6:	2302      	movs	r3, #2
 80027a8:	e000      	b.n	80027ac <sw_i2c_slave_test+0x98>
	}
	return I2C_Ok;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bdb0      	pop	{r4, r5, r7, pc}
 80027b4:	20000010 	.word	0x20000010

080027b8 <DMA1_Channel3_IRQHandler>:
}
/*************************************************************************************/

/* 11. *******************************************************************************/
#ifdef SPI_DMA
void SPI_DMA_ChannelTX_IRQHandler(void) {
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	while( (DMA1->ISR & SPI_DMATX_TC_FLAG) == 0 ) {}	//
 80027bc:	bf00      	nop
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <DMA1_Channel3_IRQHandler+0x4c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f9      	beq.n	80027be <DMA1_Channel3_IRQHandler+0x6>
	DMA1->IFCR = SPI_DMATX_TC_FLAG;			// DMA Channel Transfer Complete clear flag
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <DMA1_Channel3_IRQHandler+0x4c>)
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	605a      	str	r2, [r3, #4]
}
 80027d2:	bf00      	nop
	while ( (spi->SPI->SR & SPI_SR_BSY) == SPI_SR_BSY ) {}
 80027d4:	bf00      	nop
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <DMA1_Channel3_IRQHandler+0x50>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d0f7      	beq.n	80027d6 <DMA1_Channel3_IRQHandler+0x1e>
}
 80027e6:	bf00      	nop
	spi_clear_tc_flag();
	spi_wait_until_busy();
	SPI_DMATX_Channel->CCR	&= ~DMA_CCR_EN;			//
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <DMA1_Channel3_IRQHandler+0x54>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <DMA1_Channel3_IRQHandler+0x54>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]
	spiDmaStatus 			 = SPI_DMA_BUSY;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <DMA1_Channel3_IRQHandler+0x58>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40020000 	.word	0x40020000
 8002808:	20000014 	.word	0x20000014
 800280c:	40020030 	.word	0x40020030
 8002810:	20000527 	.word	0x20000527

08002814 <__NVIC_SetPriorityGrouping>:
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_SetPriority>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	; (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <DWT_Delay_Init>:

#include "../SW_BOARD/sw_led_blink_debug.h"
#include "../keyboard.h"

// https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/
uint32_t DWT_Delay_Init(void) {
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
	/* Disable TRC */
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <DWT_Delay_Init+0x58>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a13      	ldr	r2, [pc, #76]	; (8002970 <DWT_Delay_Init+0x58>)
 8002922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002926:	60d3      	str	r3, [r2, #12]
	/* Enable TRC */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <DWT_Delay_Init+0x58>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <DWT_Delay_Init+0x58>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	60d3      	str	r3, [r2, #12]

	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <DWT_Delay_Init+0x5c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <DWT_Delay_Init+0x5c>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6013      	str	r3, [r2, #0]
	/* Enable  clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <DWT_Delay_Init+0x5c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <DWT_Delay_Init+0x5c>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6013      	str	r3, [r2, #0]

	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <DWT_Delay_Init+0x5c>)
 800294e:	2200      	movs	r2, #0
 8002950:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8002952:	bf00      	nop
	__ASM volatile ("NOP");
 8002954:	bf00      	nop
	__ASM volatile ("NOP");
 8002956:	bf00      	nop

	/* Check if clock cycle counter has started */
	if (DWT->CYCCNT) {
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <DWT_Delay_Init+0x5c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <DWT_Delay_Init+0x4c>
		return 0; /*clock cycle counter started*/
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <DWT_Delay_Init+0x4e>
	} else {
		return 1; /*clock cycle counter not started*/
 8002964:	2301      	movs	r3, #1
	}
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000edf0 	.word	0xe000edf0
 8002974:	e0001000 	.word	0xe0001000

08002978 <nvic_priority>:
#define PRIGROUP_4G_4S	((const uint32_t) 0x05)
#define PRIGROUP_8G_2S	((const uint32_t) 0x04)
#define PRIGROUP_16G_0S	((const uint32_t) 0x03)

/************************ Interrupt priority*******************************/
void nvic_priority(void) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
	uint32_t prio;
	NVIC_SetPriorityGrouping( PRIGROUP_4G_4S );
 800297e:	2005      	movs	r0, #5
 8002980:	f7ff ff48 	bl	8002814 <__NVIC_SetPriorityGrouping>

	prio = NVIC_EncodePriority( PRIGROUP_4G_4S, 0, 0 ); // Draw the spectrum in RAM
 8002984:	2200      	movs	r2, #0
 8002986:	2100      	movs	r1, #0
 8002988:	2005      	movs	r0, #5
 800298a:	f7ff ff91 	bl	80028b0 <NVIC_EncodePriority>
 800298e:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority( SysTick_IRQn, prio );
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f7ff ff61 	bl	800285c <__NVIC_SetPriority>

	prio = NVIC_EncodePriority( PRIGROUP_4G_4S, 1, 0 ); // Update clock
 800299a:	2200      	movs	r2, #0
 800299c:	2101      	movs	r1, #1
 800299e:	2005      	movs	r0, #5
 80029a0:	f7ff ff86 	bl	80028b0 <NVIC_EncodePriority>
 80029a4:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority( EXTI3_IRQn, prio );
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	2009      	movs	r0, #9
 80029aa:	f7ff ff57 	bl	800285c <__NVIC_SetPriority>

}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <sw_softTimers_init>:
/************************************************************************/

/**** Inicjujemy SysTick pod timery programowe *****/
uint32_t sw_softTimers_init( uint32_t timeBase_ms, uint32_t type ) {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]

//	if 		(type==MILI_SEC)	type = 1000;	// 1 ms
//	else if (type==MICRO_SEC) 	type = 1;		// 1 us
//	else return 0;								// błąd
//	SysTick_Config( SystemCoreClock/type/timeBase_ms );
	if ( type==MICRO_SEC ) {
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d101      	bne.n	80029ca <sw_softTimers_init+0x14>
		DWT_Delay_Init();
 80029c6:	f7ff ffa7 	bl	8002918 <DWT_Delay_Init>
	}
	nvic_priority();
 80029ca:	f7ff ffd5 	bl	8002978 <nvic_priority>
	return 1;									// ok
 80029ce:	2301      	movs	r3, #1
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <SysTick_Handler>:
volatile uint16_t showMenuTimer;
volatile uint16_t softTimer2, softTimer5, softTimer3, whileTimer ;

volatile static uint16_t delayTimer;
volatile static uint32_t milis = 0;
void SysTick_Handler( void ) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	milis++;
 80029dc:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <SysTick_Handler+0x104>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a3e      	ldr	r2, [pc, #248]	; (8002adc <SysTick_Handler+0x104>)
 80029e4:	6013      	str	r3, [r2, #0]
	if (pressTimer) 	pressTimer--;
 80029e6:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <SysTick_Handler+0x108>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <SysTick_Handler+0x26>
 80029f0:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <SysTick_Handler+0x108>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <SysTick_Handler+0x108>)
 80029fc:	801a      	strh	r2, [r3, #0]
	if (debounceTimer)	debounceTimer--;
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <SysTick_Handler+0x10c>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <SysTick_Handler+0x3e>
 8002a08:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <SysTick_Handler+0x10c>)
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <SysTick_Handler+0x10c>)
 8002a14:	801a      	strh	r2, [r3, #0]
	if (repeatTimer)	repeatTimer--;
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <SysTick_Handler+0x110>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <SysTick_Handler+0x56>
 8002a20:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <SysTick_Handler+0x110>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <SysTick_Handler+0x110>)
 8002a2c:	801a      	strh	r2, [r3, #0]
	if (delayTimer)		delayTimer--;
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <SysTick_Handler+0x114>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <SysTick_Handler+0x6e>
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <SysTick_Handler+0x114>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <SysTick_Handler+0x114>)
 8002a44:	801a      	strh	r2, [r3, #0]
	if (showMenuTimer) 	showMenuTimer--;
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <SysTick_Handler+0x118>)
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <SysTick_Handler+0x86>
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <SysTick_Handler+0x118>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <SysTick_Handler+0x118>)
 8002a5c:	801a      	strh	r2, [r3, #0]
	if (softTimer2) 	softTimer2--;
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <SysTick_Handler+0x11c>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d006      	beq.n	8002a76 <SysTick_Handler+0x9e>
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <SysTick_Handler+0x11c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <SysTick_Handler+0x11c>)
 8002a74:	801a      	strh	r2, [r3, #0]
	if (softTimer3) 	softTimer3--;
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <SysTick_Handler+0x120>)
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <SysTick_Handler+0xb6>
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <SysTick_Handler+0x120>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <SysTick_Handler+0x120>)
 8002a8c:	801a      	strh	r2, [r3, #0]
	if (softTimer5) 	softTimer5--;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <SysTick_Handler+0x124>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d006      	beq.n	8002aa6 <SysTick_Handler+0xce>
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <SysTick_Handler+0x124>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <SysTick_Handler+0x124>)
 8002aa4:	801a      	strh	r2, [r3, #0]
	if (whileTimer) 	whileTimer--;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <SysTick_Handler+0x128>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <SysTick_Handler+0xe6>
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <SysTick_Handler+0x128>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <SysTick_Handler+0x128>)
 8002abc:	801a      	strh	r2, [r3, #0]

	sw_led_blinking();
 8002abe:	f7fe fb4d 	bl	800115c <sw_led_blinking>
//	SW_IR_DECODED_EVENT();
	if (showMenuTimer == 0) {
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <SysTick_Handler+0x118>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <SysTick_Handler+0xfe>
		showMenuTimer = 10;
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <SysTick_Handler+0x118>)
 8002ace:	220a      	movs	r2, #10
 8002ad0:	801a      	strh	r2, [r3, #0]
		SW_KEYBOARD_EVENT();
 8002ad2:	f7fe f865 	bl	8000ba0 <SW_KEYBOARD_EVENT>
	}
//	key_handler();
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000052c 	.word	0x2000052c
 8002ae0:	200005c4 	.word	0x200005c4
 8002ae4:	200005b8 	.word	0x200005b8
 8002ae8:	200005ba 	.word	0x200005ba
 8002aec:	20000528 	.word	0x20000528
 8002af0:	200005d0 	.word	0x200005d0
 8002af4:	200005be 	.word	0x200005be
 8002af8:	200005d2 	.word	0x200005d2
 8002afc:	200005d4 	.word	0x200005d4
 8002b00:	200005bc 	.word	0x200005bc

08002b04 <millis>:
/******************************************************************************/
uint32_t millis(void) {
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
	return milis;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <millis+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000052c 	.word	0x2000052c

08002b1c <delay_ms>:
/*********************************************************/
/*********************************************************/
void delay_ms( uint16_t ms ) {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
	delayTimer = ms;
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <delay_ms+0x2c>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	8013      	strh	r3, [r2, #0]
	while ( delayTimer ) {}
 8002b2c:	bf00      	nop
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <delay_ms+0x2c>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1fa      	bne.n	8002b2e <delay_ms+0x12>
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000528 	.word	0x20000528

08002b4c <delay_us>:
/*********************************************************/

void delay_us( uint16_t us ) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
	  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <delay_us+0x4c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]
	  uint32_t au32_ticks = ( uint32_t ) SystemCoreClock / 1000000;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <delay_us+0x50>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <delay_us+0x54>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9b      	lsrs	r3, r3, #18
 8002b68:	60bb      	str	r3, [r7, #8]
	  us *= au32_ticks;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	fb12 f303 	smulbb	r3, r2, r3
 8002b74:	80fb      	strh	r3, [r7, #6]
	  while ( (DWT->CYCCNT - au32_initial_ticks) < us - au32_ticks );
 8002b76:	bf00      	nop
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <delay_us+0x4c>)
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	88f9      	ldrh	r1, [r7, #6]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1acb      	subs	r3, r1, r3
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3f6      	bcc.n	8002b78 <delay_us+0x2c>
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e0001000 	.word	0xe0001000
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack    /* Set stack pointer */
 8002ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba8:	f7fd fd70 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002bac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002bae:	e003      	b.n	8002bb8 <LoopCopyDataInit>

08002bb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002bb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bb6:	3104      	adds	r1, #4

08002bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bb8:	480a      	ldr	r0, [pc, #40]	; (8002be4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bbc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bbe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bc0:	d3f6      	bcc.n	8002bb0 <CopyDataInit>
	ldr	r2, =_sbss
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bc4:	e002      	b.n	8002bcc <LoopFillZerobss>

08002bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bc6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bc8:	f842 3b04 	str.w	r3, [r2], #4

08002bcc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <LoopForever+0x16>)
	cmp	r2, r3
 8002bce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bd0:	d3f9      	bcc.n	8002bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bd2:	f000 f811 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bd6:	f7fd fb47 	bl	8000268 <main>

08002bda <LoopForever>:

LoopForever:
    b LoopForever
 8002bda:	e7fe      	b.n	8002bda <LoopForever>
   ldr   sp, =_estack    /* Set stack pointer */
 8002bdc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002be0:	08004020 	.word	0x08004020
	ldr	r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002be8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8002bec:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8002bf0:	200005e0 	.word	0x200005e0

08002bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bf4:	e7fe      	b.n	8002bf4 <ADC1_2_IRQHandler>
	...

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4d0d      	ldr	r5, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2600      	movs	r6, #0
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4d0b      	ldr	r5, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f000 fcbe 	bl	800358c <_init>
 8002c10:	1b64      	subs	r4, r4, r5
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2600      	movs	r6, #0
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08004010 	.word	0x08004010
 8002c34:	08004010 	.word	0x08004010
 8002c38:	08004010 	.word	0x08004010
 8002c3c:	08004014 	.word	0x08004014

08002c40 <__itoa>:
 8002c40:	1e93      	subs	r3, r2, #2
 8002c42:	2b22      	cmp	r3, #34	; 0x22
 8002c44:	b510      	push	{r4, lr}
 8002c46:	460c      	mov	r4, r1
 8002c48:	d904      	bls.n	8002c54 <__itoa+0x14>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	700b      	strb	r3, [r1, #0]
 8002c4e:	461c      	mov	r4, r3
 8002c50:	4620      	mov	r0, r4
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	2a0a      	cmp	r2, #10
 8002c56:	d109      	bne.n	8002c6c <__itoa+0x2c>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	da07      	bge.n	8002c6c <__itoa+0x2c>
 8002c5c:	232d      	movs	r3, #45	; 0x2d
 8002c5e:	700b      	strb	r3, [r1, #0]
 8002c60:	4240      	negs	r0, r0
 8002c62:	2101      	movs	r1, #1
 8002c64:	4421      	add	r1, r4
 8002c66:	f000 f805 	bl	8002c74 <__utoa>
 8002c6a:	e7f1      	b.n	8002c50 <__itoa+0x10>
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	e7f9      	b.n	8002c64 <__itoa+0x24>

08002c70 <itoa>:
 8002c70:	f7ff bfe6 	b.w	8002c40 <__itoa>

08002c74 <__utoa>:
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c76:	4c1f      	ldr	r4, [pc, #124]	; (8002cf4 <__utoa+0x80>)
 8002c78:	b08b      	sub	sp, #44	; 0x2c
 8002c7a:	4605      	mov	r5, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	466e      	mov	r6, sp
 8002c80:	f104 0c20 	add.w	ip, r4, #32
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	6861      	ldr	r1, [r4, #4]
 8002c88:	4637      	mov	r7, r6
 8002c8a:	c703      	stmia	r7!, {r0, r1}
 8002c8c:	3408      	adds	r4, #8
 8002c8e:	4564      	cmp	r4, ip
 8002c90:	463e      	mov	r6, r7
 8002c92:	d1f7      	bne.n	8002c84 <__utoa+0x10>
 8002c94:	7921      	ldrb	r1, [r4, #4]
 8002c96:	7139      	strb	r1, [r7, #4]
 8002c98:	1e91      	subs	r1, r2, #2
 8002c9a:	6820      	ldr	r0, [r4, #0]
 8002c9c:	6038      	str	r0, [r7, #0]
 8002c9e:	2922      	cmp	r1, #34	; 0x22
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	d904      	bls.n	8002cb0 <__utoa+0x3c>
 8002ca6:	7019      	strb	r1, [r3, #0]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4618      	mov	r0, r3
 8002cac:	b00b      	add	sp, #44	; 0x2c
 8002cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb0:	1e58      	subs	r0, r3, #1
 8002cb2:	4684      	mov	ip, r0
 8002cb4:	fbb5 f7f2 	udiv	r7, r5, r2
 8002cb8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002cbc:	fb02 5617 	mls	r6, r2, r7, r5
 8002cc0:	4476      	add	r6, lr
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002cc8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002ccc:	462e      	mov	r6, r5
 8002cce:	42b2      	cmp	r2, r6
 8002cd0:	f101 0101 	add.w	r1, r1, #1
 8002cd4:	463d      	mov	r5, r7
 8002cd6:	d9ed      	bls.n	8002cb4 <__utoa+0x40>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	545a      	strb	r2, [r3, r1]
 8002cdc:	1919      	adds	r1, r3, r4
 8002cde:	1aa5      	subs	r5, r4, r2
 8002ce0:	42aa      	cmp	r2, r5
 8002ce2:	dae2      	bge.n	8002caa <__utoa+0x36>
 8002ce4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002ce8:	780e      	ldrb	r6, [r1, #0]
 8002cea:	7006      	strb	r6, [r0, #0]
 8002cec:	3201      	adds	r2, #1
 8002cee:	f801 5901 	strb.w	r5, [r1], #-1
 8002cf2:	e7f4      	b.n	8002cde <__utoa+0x6a>
 8002cf4:	08003fc4 	.word	0x08003fc4

08002cf8 <powf>:
 8002cf8:	b508      	push	{r3, lr}
 8002cfa:	ed2d 8b04 	vpush	{d8-d9}
 8002cfe:	eeb0 9a40 	vmov.f32	s18, s0
 8002d02:	eef0 8a60 	vmov.f32	s17, s1
 8002d06:	f000 f88f 	bl	8002e28 <__ieee754_powf>
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <powf+0x120>)
 8002d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d10:	3301      	adds	r3, #1
 8002d12:	eeb0 8a40 	vmov.f32	s16, s0
 8002d16:	d012      	beq.n	8002d3e <powf+0x46>
 8002d18:	eef4 8a68 	vcmp.f32	s17, s17
 8002d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d20:	d60d      	bvs.n	8002d3e <powf+0x46>
 8002d22:	eeb4 9a49 	vcmp.f32	s18, s18
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	d70d      	bvc.n	8002d48 <powf+0x50>
 8002d2c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d38:	bf08      	it	eq
 8002d3a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8002d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8002d42:	ecbd 8b04 	vpop	{d8-d9}
 8002d46:	bd08      	pop	{r3, pc}
 8002d48:	eddf 9a34 	vldr	s19, [pc, #208]	; 8002e1c <powf+0x124>
 8002d4c:	eeb4 9a69 	vcmp.f32	s18, s19
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	d116      	bne.n	8002d84 <powf+0x8c>
 8002d56:	eef4 8a69 	vcmp.f32	s17, s19
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d057      	beq.n	8002e10 <powf+0x118>
 8002d60:	eeb0 0a68 	vmov.f32	s0, s17
 8002d64:	f000 fb2a 	bl	80033bc <finitef>
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	d0e8      	beq.n	8002d3e <powf+0x46>
 8002d6c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	d5e3      	bpl.n	8002d3e <powf+0x46>
 8002d76:	f000 fc03 	bl	8003580 <__errno>
 8002d7a:	2321      	movs	r3, #33	; 0x21
 8002d7c:	6003      	str	r3, [r0, #0]
 8002d7e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8002e20 <powf+0x128>
 8002d82:	e7dc      	b.n	8002d3e <powf+0x46>
 8002d84:	f000 fb1a 	bl	80033bc <finitef>
 8002d88:	bb50      	cbnz	r0, 8002de0 <powf+0xe8>
 8002d8a:	eeb0 0a49 	vmov.f32	s0, s18
 8002d8e:	f000 fb15 	bl	80033bc <finitef>
 8002d92:	b328      	cbz	r0, 8002de0 <powf+0xe8>
 8002d94:	eeb0 0a68 	vmov.f32	s0, s17
 8002d98:	f000 fb10 	bl	80033bc <finitef>
 8002d9c:	b300      	cbz	r0, 8002de0 <powf+0xe8>
 8002d9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d706      	bvc.n	8002db6 <powf+0xbe>
 8002da8:	f000 fbea 	bl	8003580 <__errno>
 8002dac:	2321      	movs	r3, #33	; 0x21
 8002dae:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8002db2:	6003      	str	r3, [r0, #0]
 8002db4:	e7c3      	b.n	8002d3e <powf+0x46>
 8002db6:	f000 fbe3 	bl	8003580 <__errno>
 8002dba:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8002dbe:	2322      	movs	r3, #34	; 0x22
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	6003      	str	r3, [r0, #0]
 8002dc6:	d508      	bpl.n	8002dda <powf+0xe2>
 8002dc8:	eeb0 0a68 	vmov.f32	s0, s17
 8002dcc:	f000 fb0a 	bl	80033e4 <rintf>
 8002dd0:	eeb4 0a68 	vcmp.f32	s0, s17
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d1d1      	bne.n	8002d7e <powf+0x86>
 8002dda:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8002e24 <powf+0x12c>
 8002dde:	e7ae      	b.n	8002d3e <powf+0x46>
 8002de0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de8:	d1a9      	bne.n	8002d3e <powf+0x46>
 8002dea:	eeb0 0a49 	vmov.f32	s0, s18
 8002dee:	f000 fae5 	bl	80033bc <finitef>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d0a3      	beq.n	8002d3e <powf+0x46>
 8002df6:	eeb0 0a68 	vmov.f32	s0, s17
 8002dfa:	f000 fadf 	bl	80033bc <finitef>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d09d      	beq.n	8002d3e <powf+0x46>
 8002e02:	f000 fbbd 	bl	8003580 <__errno>
 8002e06:	2322      	movs	r3, #34	; 0x22
 8002e08:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8002e1c <powf+0x124>
 8002e0c:	6003      	str	r3, [r0, #0]
 8002e0e:	e796      	b.n	8002d3e <powf+0x46>
 8002e10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8002e14:	e793      	b.n	8002d3e <powf+0x46>
 8002e16:	bf00      	nop
 8002e18:	2000007c 	.word	0x2000007c
 8002e1c:	00000000 	.word	0x00000000
 8002e20:	ff800000 	.word	0xff800000
 8002e24:	7f800000 	.word	0x7f800000

08002e28 <__ieee754_powf>:
 8002e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e2c:	ee10 5a90 	vmov	r5, s1
 8002e30:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8002e34:	ed2d 8b02 	vpush	{d8}
 8002e38:	eeb0 8a40 	vmov.f32	s16, s0
 8002e3c:	eef0 8a60 	vmov.f32	s17, s1
 8002e40:	f000 8291 	beq.w	8003366 <__ieee754_powf+0x53e>
 8002e44:	ee10 8a10 	vmov	r8, s0
 8002e48:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8002e4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002e50:	dc06      	bgt.n	8002e60 <__ieee754_powf+0x38>
 8002e52:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002e56:	dd0a      	ble.n	8002e6e <__ieee754_powf+0x46>
 8002e58:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002e5c:	f000 8283 	beq.w	8003366 <__ieee754_powf+0x53e>
 8002e60:	ecbd 8b02 	vpop	{d8}
 8002e64:	48d8      	ldr	r0, [pc, #864]	; (80031c8 <__ieee754_powf+0x3a0>)
 8002e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6a:	f000 bab5 	b.w	80033d8 <nanf>
 8002e6e:	f1b8 0f00 	cmp.w	r8, #0
 8002e72:	da1f      	bge.n	8002eb4 <__ieee754_powf+0x8c>
 8002e74:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8002e78:	da2e      	bge.n	8002ed8 <__ieee754_powf+0xb0>
 8002e7a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002e7e:	f2c0 827b 	blt.w	8003378 <__ieee754_powf+0x550>
 8002e82:	15fb      	asrs	r3, r7, #23
 8002e84:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002e88:	fa47 f603 	asr.w	r6, r7, r3
 8002e8c:	fa06 f303 	lsl.w	r3, r6, r3
 8002e90:	42bb      	cmp	r3, r7
 8002e92:	f040 8271 	bne.w	8003378 <__ieee754_powf+0x550>
 8002e96:	f006 0601 	and.w	r6, r6, #1
 8002e9a:	f1c6 0602 	rsb	r6, r6, #2
 8002e9e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8002ea2:	d120      	bne.n	8002ee6 <__ieee754_powf+0xbe>
 8002ea4:	2d00      	cmp	r5, #0
 8002ea6:	f280 8264 	bge.w	8003372 <__ieee754_powf+0x54a>
 8002eaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002eae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8002eb2:	e00d      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8002eba:	d1f0      	bne.n	8002e9e <__ieee754_powf+0x76>
 8002ebc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8002ec0:	f000 8251 	beq.w	8003366 <__ieee754_powf+0x53e>
 8002ec4:	dd0a      	ble.n	8002edc <__ieee754_powf+0xb4>
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	f280 8250 	bge.w	800336c <__ieee754_powf+0x544>
 8002ecc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80031cc <__ieee754_powf+0x3a4>
 8002ed0:	ecbd 8b02 	vpop	{d8}
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed8:	2602      	movs	r6, #2
 8002eda:	e7ec      	b.n	8002eb6 <__ieee754_powf+0x8e>
 8002edc:	2d00      	cmp	r5, #0
 8002ede:	daf5      	bge.n	8002ecc <__ieee754_powf+0xa4>
 8002ee0:	eeb1 0a68 	vneg.f32	s0, s17
 8002ee4:	e7f4      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002ee6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8002eea:	d102      	bne.n	8002ef2 <__ieee754_powf+0xca>
 8002eec:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002ef0:	e7ee      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002ef2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8002ef6:	eeb0 0a48 	vmov.f32	s0, s16
 8002efa:	d108      	bne.n	8002f0e <__ieee754_powf+0xe6>
 8002efc:	f1b8 0f00 	cmp.w	r8, #0
 8002f00:	db05      	blt.n	8002f0e <__ieee754_powf+0xe6>
 8002f02:	ecbd 8b02 	vpop	{d8}
 8002f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0a:	f000 ba4d 	b.w	80033a8 <__ieee754_sqrtf>
 8002f0e:	f000 fa4e 	bl	80033ae <fabsf>
 8002f12:	b124      	cbz	r4, 8002f1e <__ieee754_powf+0xf6>
 8002f14:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8002f18:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8002f1c:	d117      	bne.n	8002f4e <__ieee754_powf+0x126>
 8002f1e:	2d00      	cmp	r5, #0
 8002f20:	bfbc      	itt	lt
 8002f22:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8002f26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002f2a:	f1b8 0f00 	cmp.w	r8, #0
 8002f2e:	dacf      	bge.n	8002ed0 <__ieee754_powf+0xa8>
 8002f30:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8002f34:	ea54 0306 	orrs.w	r3, r4, r6
 8002f38:	d104      	bne.n	8002f44 <__ieee754_powf+0x11c>
 8002f3a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002f3e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002f42:	e7c5      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002f44:	2e01      	cmp	r6, #1
 8002f46:	d1c3      	bne.n	8002ed0 <__ieee754_powf+0xa8>
 8002f48:	eeb1 0a40 	vneg.f32	s0, s0
 8002f4c:	e7c0      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002f4e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8002f52:	3801      	subs	r0, #1
 8002f54:	ea56 0300 	orrs.w	r3, r6, r0
 8002f58:	d104      	bne.n	8002f64 <__ieee754_powf+0x13c>
 8002f5a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8002f5e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8002f62:	e7b5      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002f64:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8002f68:	dd6b      	ble.n	8003042 <__ieee754_powf+0x21a>
 8002f6a:	4b99      	ldr	r3, [pc, #612]	; (80031d0 <__ieee754_powf+0x3a8>)
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	dc06      	bgt.n	8002f7e <__ieee754_powf+0x156>
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	daab      	bge.n	8002ecc <__ieee754_powf+0xa4>
 8002f74:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80031d4 <__ieee754_powf+0x3ac>
 8002f78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002f7c:	e7a8      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8002f7e:	4b96      	ldr	r3, [pc, #600]	; (80031d8 <__ieee754_powf+0x3b0>)
 8002f80:	429c      	cmp	r4, r3
 8002f82:	dd02      	ble.n	8002f8a <__ieee754_powf+0x162>
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	dcf5      	bgt.n	8002f74 <__ieee754_powf+0x14c>
 8002f88:	e7a0      	b.n	8002ecc <__ieee754_powf+0xa4>
 8002f8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002f8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f92:	eddf 6a92 	vldr	s13, [pc, #584]	; 80031dc <__ieee754_powf+0x3b4>
 8002f96:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002f9a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002f9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002fa2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002fa6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fae:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80031e0 <__ieee754_powf+0x3b8>
 8002fb2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8002fb6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80031e4 <__ieee754_powf+0x3bc>
 8002fba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002fbe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80031e8 <__ieee754_powf+0x3c0>
 8002fc2:	eef0 6a67 	vmov.f32	s13, s15
 8002fc6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8002fca:	ee16 3a90 	vmov	r3, s13
 8002fce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002fd2:	f023 030f 	bic.w	r3, r3, #15
 8002fd6:	ee00 3a90 	vmov	s1, r3
 8002fda:	eee0 0a47 	vfms.f32	s1, s0, s14
 8002fde:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002fe2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8002fe6:	f025 050f 	bic.w	r5, r5, #15
 8002fea:	ee07 5a10 	vmov	s14, r5
 8002fee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002ff2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8002ffe:	3e01      	subs	r6, #1
 8003000:	ea56 0200 	orrs.w	r2, r6, r0
 8003004:	ee07 5a10 	vmov	s14, r5
 8003008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800300c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003010:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8003014:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003018:	ee17 4a10 	vmov	r4, s14
 800301c:	bf08      	it	eq
 800301e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8003022:	2c00      	cmp	r4, #0
 8003024:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003028:	f340 8184 	ble.w	8003334 <__ieee754_powf+0x50c>
 800302c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8003030:	f340 80fc 	ble.w	800322c <__ieee754_powf+0x404>
 8003034:	eddf 7a67 	vldr	s15, [pc, #412]	; 80031d4 <__ieee754_powf+0x3ac>
 8003038:	ee28 0a27 	vmul.f32	s0, s16, s15
 800303c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003040:	e746      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8003042:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8003046:	bf01      	itttt	eq
 8003048:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80031ec <__ieee754_powf+0x3c4>
 800304c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8003050:	f06f 0217 	mvneq.w	r2, #23
 8003054:	ee17 4a90 	vmoveq	r4, s15
 8003058:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800305c:	bf18      	it	ne
 800305e:	2200      	movne	r2, #0
 8003060:	3b7f      	subs	r3, #127	; 0x7f
 8003062:	4413      	add	r3, r2
 8003064:	4a62      	ldr	r2, [pc, #392]	; (80031f0 <__ieee754_powf+0x3c8>)
 8003066:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800306a:	4294      	cmp	r4, r2
 800306c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8003070:	dd06      	ble.n	8003080 <__ieee754_powf+0x258>
 8003072:	4a60      	ldr	r2, [pc, #384]	; (80031f4 <__ieee754_powf+0x3cc>)
 8003074:	4294      	cmp	r4, r2
 8003076:	f340 80a4 	ble.w	80031c2 <__ieee754_powf+0x39a>
 800307a:	3301      	adds	r3, #1
 800307c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8003080:	2400      	movs	r4, #0
 8003082:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <__ieee754_powf+0x3d0>)
 8003084:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003088:	ee07 1a90 	vmov	s15, r1
 800308c:	ed92 7a00 	vldr	s14, [r2]
 8003090:	4a5a      	ldr	r2, [pc, #360]	; (80031fc <__ieee754_powf+0x3d4>)
 8003092:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003096:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800309a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800309e:	1049      	asrs	r1, r1, #1
 80030a0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80030a4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80030a8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80030ac:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80030b0:	ee06 1a10 	vmov	s12, r1
 80030b4:	ee65 4a26 	vmul.f32	s9, s10, s13
 80030b8:	ee36 7a47 	vsub.f32	s14, s12, s14
 80030bc:	ee14 7a90 	vmov	r7, s9
 80030c0:	4017      	ands	r7, r2
 80030c2:	ee05 7a90 	vmov	s11, r7
 80030c6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80030ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ce:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003200 <__ieee754_powf+0x3d8>
 80030d2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80030d6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80030da:	ee25 6a26 	vmul.f32	s12, s10, s13
 80030de:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003204 <__ieee754_powf+0x3dc>
 80030e2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80030e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003208 <__ieee754_powf+0x3e0>
 80030ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 80030ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80031dc <__ieee754_powf+0x3b4>
 80030f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80030f6:	eddf 6a45 	vldr	s13, [pc, #276]	; 800320c <__ieee754_powf+0x3e4>
 80030fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 80030fe:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003210 <__ieee754_powf+0x3e8>
 8003102:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003106:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800310a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800310e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003112:	eee5 6a07 	vfma.f32	s13, s10, s14
 8003116:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800311a:	eef0 7a45 	vmov.f32	s15, s10
 800311e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8003122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003126:	ee17 1a90 	vmov	r1, s15
 800312a:	4011      	ands	r1, r2
 800312c:	ee07 1a90 	vmov	s15, r1
 8003130:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8003134:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8003138:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800313c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8003140:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003144:	eeb0 6a47 	vmov.f32	s12, s14
 8003148:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800314c:	ee16 1a10 	vmov	r1, s12
 8003150:	4011      	ands	r1, r2
 8003152:	ee06 1a90 	vmov	s13, r1
 8003156:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800315a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8003214 <__ieee754_powf+0x3ec>
 800315e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003218 <__ieee754_powf+0x3f0>
 8003162:	ee37 7a66 	vsub.f32	s14, s14, s13
 8003166:	ee06 1a10 	vmov	s12, r1
 800316a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800316e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800321c <__ieee754_powf+0x3f4>
 8003172:	492b      	ldr	r1, [pc, #172]	; (8003220 <__ieee754_powf+0x3f8>)
 8003174:	eea6 7a27 	vfma.f32	s14, s12, s15
 8003178:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800317c:	edd1 7a00 	vldr	s15, [r1]
 8003180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <__ieee754_powf+0x3fc>)
 800318a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800318e:	eef0 7a47 	vmov.f32	s15, s14
 8003192:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003196:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800319a:	edd4 0a00 	vldr	s1, [r4]
 800319e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee17 3a90 	vmov	r3, s15
 80031aa:	4013      	ands	r3, r2
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80031b8:	eee6 6a65 	vfms.f32	s13, s12, s11
 80031bc:	ee77 7a66 	vsub.f32	s15, s14, s13
 80031c0:	e70f      	b.n	8002fe2 <__ieee754_powf+0x1ba>
 80031c2:	2401      	movs	r4, #1
 80031c4:	e75d      	b.n	8003082 <__ieee754_powf+0x25a>
 80031c6:	bf00      	nop
 80031c8:	08003fe8 	.word	0x08003fe8
 80031cc:	00000000 	.word	0x00000000
 80031d0:	3f7ffff7 	.word	0x3f7ffff7
 80031d4:	7149f2ca 	.word	0x7149f2ca
 80031d8:	3f800007 	.word	0x3f800007
 80031dc:	3eaaaaab 	.word	0x3eaaaaab
 80031e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80031e4:	36eca570 	.word	0x36eca570
 80031e8:	3fb8aa00 	.word	0x3fb8aa00
 80031ec:	4b800000 	.word	0x4b800000
 80031f0:	001cc471 	.word	0x001cc471
 80031f4:	005db3d6 	.word	0x005db3d6
 80031f8:	08003fec 	.word	0x08003fec
 80031fc:	fffff000 	.word	0xfffff000
 8003200:	3e6c3255 	.word	0x3e6c3255
 8003204:	3e53f142 	.word	0x3e53f142
 8003208:	3e8ba305 	.word	0x3e8ba305
 800320c:	3edb6db7 	.word	0x3edb6db7
 8003210:	3f19999a 	.word	0x3f19999a
 8003214:	3f76384f 	.word	0x3f76384f
 8003218:	3f763800 	.word	0x3f763800
 800321c:	369dc3a0 	.word	0x369dc3a0
 8003220:	08003ffc 	.word	0x08003ffc
 8003224:	08003ff4 	.word	0x08003ff4
 8003228:	3338aa3c 	.word	0x3338aa3c
 800322c:	f040 8092 	bne.w	8003354 <__ieee754_powf+0x52c>
 8003230:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8003228 <__ieee754_powf+0x400>
 8003234:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003238:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800323c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	f73f aef6 	bgt.w	8003034 <__ieee754_powf+0x20c>
 8003248:	15db      	asrs	r3, r3, #23
 800324a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800324e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003252:	4103      	asrs	r3, r0
 8003254:	4423      	add	r3, r4
 8003256:	4949      	ldr	r1, [pc, #292]	; (800337c <__ieee754_powf+0x554>)
 8003258:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800325c:	3a7f      	subs	r2, #127	; 0x7f
 800325e:	4111      	asrs	r1, r2
 8003260:	ea23 0101 	bic.w	r1, r3, r1
 8003264:	ee07 1a10 	vmov	s14, r1
 8003268:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800326c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003270:	f1c2 0217 	rsb	r2, r2, #23
 8003274:	4110      	asrs	r0, r2
 8003276:	2c00      	cmp	r4, #0
 8003278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800327c:	bfb8      	it	lt
 800327e:	4240      	neglt	r0, r0
 8003280:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8003284:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8003380 <__ieee754_powf+0x558>
 8003288:	ee17 3a10 	vmov	r3, s14
 800328c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	ee07 3a10 	vmov	s14, r3
 8003298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80032a0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8003384 <__ieee754_powf+0x55c>
 80032a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80032ac:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003388 <__ieee754_powf+0x560>
 80032b0:	eeb0 0a67 	vmov.f32	s0, s15
 80032b4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80032b8:	eeb0 6a40 	vmov.f32	s12, s0
 80032bc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80032c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80032c4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80032c8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800338c <__ieee754_powf+0x564>
 80032cc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8003390 <__ieee754_powf+0x568>
 80032d0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80032d4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003394 <__ieee754_powf+0x56c>
 80032d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80032dc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8003398 <__ieee754_powf+0x570>
 80032e0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80032e4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800339c <__ieee754_powf+0x574>
 80032e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80032ec:	eeb0 6a40 	vmov.f32	s12, s0
 80032f0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80032f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032f8:	eeb0 7a46 	vmov.f32	s14, s12
 80032fc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8003300:	ee20 6a06 	vmul.f32	s12, s0, s12
 8003304:	eee0 7a27 	vfma.f32	s15, s0, s15
 8003308:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800330c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003310:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003314:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003318:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800331c:	ee10 3a10 	vmov	r3, s0
 8003320:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8003324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003328:	da1a      	bge.n	8003360 <__ieee754_powf+0x538>
 800332a:	f000 f8b7 	bl	800349c <scalbnf>
 800332e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8003332:	e5cd      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8003334:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <__ieee754_powf+0x578>)
 8003336:	4293      	cmp	r3, r2
 8003338:	dd02      	ble.n	8003340 <__ieee754_powf+0x518>
 800333a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80033a4 <__ieee754_powf+0x57c>
 800333e:	e67b      	b.n	8003038 <__ieee754_powf+0x210>
 8003340:	d108      	bne.n	8003354 <__ieee754_powf+0x52c>
 8003342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003346:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	f6ff af7b 	blt.w	8003248 <__ieee754_powf+0x420>
 8003352:	e7f2      	b.n	800333a <__ieee754_powf+0x512>
 8003354:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8003358:	f73f af76 	bgt.w	8003248 <__ieee754_powf+0x420>
 800335c:	2000      	movs	r0, #0
 800335e:	e78f      	b.n	8003280 <__ieee754_powf+0x458>
 8003360:	ee00 3a10 	vmov	s0, r3
 8003364:	e7e3      	b.n	800332e <__ieee754_powf+0x506>
 8003366:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800336a:	e5b1      	b.n	8002ed0 <__ieee754_powf+0xa8>
 800336c:	eeb0 0a68 	vmov.f32	s0, s17
 8003370:	e5ae      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8003372:	eeb0 0a48 	vmov.f32	s0, s16
 8003376:	e5ab      	b.n	8002ed0 <__ieee754_powf+0xa8>
 8003378:	2600      	movs	r6, #0
 800337a:	e590      	b.n	8002e9e <__ieee754_powf+0x76>
 800337c:	007fffff 	.word	0x007fffff
 8003380:	3f317218 	.word	0x3f317218
 8003384:	35bfbe8c 	.word	0x35bfbe8c
 8003388:	3f317200 	.word	0x3f317200
 800338c:	3331bb4c 	.word	0x3331bb4c
 8003390:	b5ddea0e 	.word	0xb5ddea0e
 8003394:	388ab355 	.word	0x388ab355
 8003398:	bb360b61 	.word	0xbb360b61
 800339c:	3e2aaaab 	.word	0x3e2aaaab
 80033a0:	43160000 	.word	0x43160000
 80033a4:	0da24260 	.word	0x0da24260

080033a8 <__ieee754_sqrtf>:
 80033a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80033ac:	4770      	bx	lr

080033ae <fabsf>:
 80033ae:	ee10 3a10 	vmov	r3, s0
 80033b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b6:	ee00 3a10 	vmov	s0, r3
 80033ba:	4770      	bx	lr

080033bc <finitef>:
 80033bc:	b082      	sub	sp, #8
 80033be:	ed8d 0a01 	vstr	s0, [sp, #4]
 80033c2:	9801      	ldr	r0, [sp, #4]
 80033c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80033c8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80033cc:	bfac      	ite	ge
 80033ce:	2000      	movge	r0, #0
 80033d0:	2001      	movlt	r0, #1
 80033d2:	b002      	add	sp, #8
 80033d4:	4770      	bx	lr
	...

080033d8 <nanf>:
 80033d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80033e0 <nanf+0x8>
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	7fc00000 	.word	0x7fc00000

080033e4 <rintf>:
 80033e4:	ee10 2a10 	vmov	r2, s0
 80033e8:	b513      	push	{r0, r1, r4, lr}
 80033ea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80033ee:	397f      	subs	r1, #127	; 0x7f
 80033f0:	2916      	cmp	r1, #22
 80033f2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80033f6:	dc47      	bgt.n	8003488 <rintf+0xa4>
 80033f8:	b32b      	cbz	r3, 8003446 <rintf+0x62>
 80033fa:	2900      	cmp	r1, #0
 80033fc:	ee10 3a10 	vmov	r3, s0
 8003400:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8003404:	da21      	bge.n	800344a <rintf+0x66>
 8003406:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800340a:	425b      	negs	r3, r3
 800340c:	4921      	ldr	r1, [pc, #132]	; (8003494 <rintf+0xb0>)
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	0d12      	lsrs	r2, r2, #20
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	0512      	lsls	r2, r2, #20
 8003418:	4313      	orrs	r3, r2
 800341a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	edd1 6a00 	vldr	s13, [r1]
 8003426:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800342a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800342e:	eddd 7a01 	vldr	s15, [sp, #4]
 8003432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003436:	ee17 3a90 	vmov	r3, s15
 800343a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800343e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8003442:	ee00 3a10 	vmov	s0, r3
 8003446:	b002      	add	sp, #8
 8003448:	bd10      	pop	{r4, pc}
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <rintf+0xb4>)
 800344c:	410a      	asrs	r2, r1
 800344e:	4213      	tst	r3, r2
 8003450:	d0f9      	beq.n	8003446 <rintf+0x62>
 8003452:	0854      	lsrs	r4, r2, #1
 8003454:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8003458:	d006      	beq.n	8003468 <rintf+0x84>
 800345a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800345e:	ea23 0304 	bic.w	r3, r3, r4
 8003462:	fa42 f101 	asr.w	r1, r2, r1
 8003466:	430b      	orrs	r3, r1
 8003468:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <rintf+0xb0>)
 800346a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800346e:	ed90 7a00 	vldr	s14, [r0]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347a:	edcd 7a01 	vstr	s15, [sp, #4]
 800347e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003482:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003486:	e7de      	b.n	8003446 <rintf+0x62>
 8003488:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800348c:	d3db      	bcc.n	8003446 <rintf+0x62>
 800348e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003492:	e7d8      	b.n	8003446 <rintf+0x62>
 8003494:	08004004 	.word	0x08004004
 8003498:	007fffff 	.word	0x007fffff

0800349c <scalbnf>:
 800349c:	ee10 3a10 	vmov	r3, s0
 80034a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80034a4:	d025      	beq.n	80034f2 <scalbnf+0x56>
 80034a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80034aa:	d302      	bcc.n	80034b2 <scalbnf+0x16>
 80034ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80034b0:	4770      	bx	lr
 80034b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80034b6:	d122      	bne.n	80034fe <scalbnf+0x62>
 80034b8:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <scalbnf+0xc8>)
 80034ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003568 <scalbnf+0xcc>
 80034be:	4298      	cmp	r0, r3
 80034c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80034c4:	db16      	blt.n	80034f4 <scalbnf+0x58>
 80034c6:	ee10 3a10 	vmov	r3, s0
 80034ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80034ce:	3a19      	subs	r2, #25
 80034d0:	4402      	add	r2, r0
 80034d2:	2afe      	cmp	r2, #254	; 0xfe
 80034d4:	dd15      	ble.n	8003502 <scalbnf+0x66>
 80034d6:	ee10 3a10 	vmov	r3, s0
 80034da:	eddf 7a24 	vldr	s15, [pc, #144]	; 800356c <scalbnf+0xd0>
 80034de:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003570 <scalbnf+0xd4>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	eeb0 7a67 	vmov.f32	s14, s15
 80034e8:	bfb8      	it	lt
 80034ea:	eef0 7a66 	vmovlt.f32	s15, s13
 80034ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 80034f2:	4770      	bx	lr
 80034f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003574 <scalbnf+0xd8>
 80034f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80034fc:	4770      	bx	lr
 80034fe:	0dd2      	lsrs	r2, r2, #23
 8003500:	e7e6      	b.n	80034d0 <scalbnf+0x34>
 8003502:	2a00      	cmp	r2, #0
 8003504:	dd06      	ble.n	8003514 <scalbnf+0x78>
 8003506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800350a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800350e:	ee00 3a10 	vmov	s0, r3
 8003512:	4770      	bx	lr
 8003514:	f112 0f16 	cmn.w	r2, #22
 8003518:	da1a      	bge.n	8003550 <scalbnf+0xb4>
 800351a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800351e:	4298      	cmp	r0, r3
 8003520:	ee10 3a10 	vmov	r3, s0
 8003524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003528:	dd0a      	ble.n	8003540 <scalbnf+0xa4>
 800352a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800356c <scalbnf+0xd0>
 800352e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003570 <scalbnf+0xd4>
 8003532:	eef0 7a40 	vmov.f32	s15, s0
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf18      	it	ne
 800353a:	eeb0 0a47 	vmovne.f32	s0, s14
 800353e:	e7db      	b.n	80034f8 <scalbnf+0x5c>
 8003540:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003574 <scalbnf+0xd8>
 8003544:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003578 <scalbnf+0xdc>
 8003548:	eef0 7a40 	vmov.f32	s15, s0
 800354c:	2b00      	cmp	r3, #0
 800354e:	e7f3      	b.n	8003538 <scalbnf+0x9c>
 8003550:	3219      	adds	r2, #25
 8003552:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003556:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800355a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800357c <scalbnf+0xe0>
 800355e:	ee07 3a10 	vmov	s14, r3
 8003562:	e7c4      	b.n	80034ee <scalbnf+0x52>
 8003564:	ffff3cb0 	.word	0xffff3cb0
 8003568:	4c000000 	.word	0x4c000000
 800356c:	7149f2ca 	.word	0x7149f2ca
 8003570:	f149f2ca 	.word	0xf149f2ca
 8003574:	0da24260 	.word	0x0da24260
 8003578:	8da24260 	.word	0x8da24260
 800357c:	33000000 	.word	0x33000000

08003580 <__errno>:
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <__errno+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000018 	.word	0x20000018

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr
 80035a4:	0000      	movs	r0, r0
	...

Disassembly of section ccmram:

080035a8 <graphic_set_pixel_RAM>:
}
/***************************************************************************************/

/*************************************************************************************************/
// Funkcje oparte na rysowaniu pojedynczego piksela
void graphic_set_pixel_RAM( volatile T_DISPLAY *buffer, int16_t x, int16_t y, const T_COLOR *color ) {
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	4613      	mov	r3, r2
 80035b8:	813b      	strh	r3, [r7, #8]
	  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 80035ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db79      	blt.n	80036b6 <graphic_set_pixel_RAM+0x10e>
 80035c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035c6:	4a3f      	ldr	r2, [pc, #252]	; (80036c4 <graphic_set_pixel_RAM+0x11c>)
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	da73      	bge.n	80036b6 <graphic_set_pixel_RAM+0x10e>
 80035ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	db6f      	blt.n	80036b6 <graphic_set_pixel_RAM+0x10e>
 80035d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80035da:	4a3b      	ldr	r2, [pc, #236]	; (80036c8 <graphic_set_pixel_RAM+0x120>)
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	4293      	cmp	r3, r2
 80035e0:	da69      	bge.n	80036b6 <graphic_set_pixel_RAM+0x10e>
	    return;
	  if ( *color )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d031      	beq.n	800364e <graphic_set_pixel_RAM+0xa6>
		  buffer[ x + (y/8)*_width ] |=  (1<<(y%8)); // zapal pixel
 80035ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da00      	bge.n	80035f8 <graphic_set_pixel_RAM+0x50>
 80035f6:	3307      	adds	r3, #7
 80035f8:	10db      	asrs	r3, r3, #3
 80035fa:	b218      	sxth	r0, r3
 80035fc:	4601      	mov	r1, r0
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <graphic_set_pixel_RAM+0x11c>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	fb03 f301 	mul.w	r3, r3, r1
 8003606:	4413      	add	r3, r2
 8003608:	461a      	mov	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	b25a      	sxtb	r2, r3
 8003614:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003618:	4259      	negs	r1, r3
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	f001 0107 	and.w	r1, r1, #7
 8003622:	bf58      	it	pl
 8003624:	424b      	negpl	r3, r1
 8003626:	b21b      	sxth	r3, r3
 8003628:	4619      	mov	r1, r3
 800362a:	2301      	movs	r3, #1
 800362c:	408b      	lsls	r3, r1
 800362e:	b25b      	sxtb	r3, r3
 8003630:	4313      	orrs	r3, r2
 8003632:	b259      	sxtb	r1, r3
 8003634:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <graphic_set_pixel_RAM+0x11c>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	fb03 f300 	mul.w	r3, r3, r0
 8003640:	4413      	add	r3, r2
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e034      	b.n	80036b8 <graphic_set_pixel_RAM+0x110>
	  else
		  buffer[ x + (y/8)*_width ] &= ~(1<<(y%8)); // zgaś pixel
 800364e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003652:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	da00      	bge.n	800365c <graphic_set_pixel_RAM+0xb4>
 800365a:	3307      	adds	r3, #7
 800365c:	10db      	asrs	r3, r3, #3
 800365e:	b218      	sxth	r0, r3
 8003660:	4601      	mov	r1, r0
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <graphic_set_pixel_RAM+0x11c>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	fb03 f301 	mul.w	r3, r3, r1
 800366a:	4413      	add	r3, r2
 800366c:	461a      	mov	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	b25a      	sxtb	r2, r3
 8003678:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800367c:	4259      	negs	r1, r3
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	f001 0107 	and.w	r1, r1, #7
 8003686:	bf58      	it	pl
 8003688:	424b      	negpl	r3, r1
 800368a:	b21b      	sxth	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	2301      	movs	r3, #1
 8003690:	408b      	lsls	r3, r1
 8003692:	b25b      	sxtb	r3, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	b25b      	sxtb	r3, r3
 8003698:	4013      	ands	r3, r2
 800369a:	b259      	sxtb	r1, r3
 800369c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <graphic_set_pixel_RAM+0x11c>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	fb03 f300 	mul.w	r3, r3, r0
 80036a8:	4413      	add	r3, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	b2ca      	uxtb	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e000      	b.n	80036b8 <graphic_set_pixel_RAM+0x110>
	    return;
 80036b6:	bf00      	nop
}
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000008 	.word	0x20000008
 80036c8:	2000000a 	.word	0x2000000a

080036cc <TIM1_UP_TIM16_IRQHandler>:
INTERRUPT CCMRAM void TIM1_UP_TIM16_IRQHandler(void) {	// Timer2 Interrupt Handler
 80036cc:	4668      	mov	r0, sp
 80036ce:	f020 0107 	bic.w	r1, r0, #7
 80036d2:	468d      	mov	sp, r1
 80036d4:	b589      	push	{r0, r3, r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	if ( TIM16->SR & TIM_SR_UIF ) {
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01a      	beq.n	800371a <TIM1_UP_TIM16_IRQHandler+0x4e>
		TIM16->SR &= ~TIM_SR_UIF;						// Update interrupt Flag
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6113      	str	r3, [r2, #16]
		if (refreshScreen == 0) return;
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <TIM1_UP_TIM16_IRQHandler+0x4c>
		ActualDMABuffer = TextBuffer;
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <TIM1_UP_TIM16_IRQHandler+0x60>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <TIM1_UP_TIM16_IRQHandler+0x64>)
 8003700:	6013      	str	r3, [r2, #0]
		sw_ssd1306_display();
 8003702:	f7fd fdab 	bl	800125c <sw_ssd1306_display>
		refreshScreen = 0;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
		gpio_pin_XOR( DEBUG_PORT1, DEBUG_PIN1 );
 800370c:	2102      	movs	r1, #2
 800370e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003712:	f7fd fc88 	bl	8001026 <gpio_pin_XOR>
 8003716:	e000      	b.n	800371a <TIM1_UP_TIM16_IRQHandler+0x4e>
		if (refreshScreen == 0) return;
 8003718:	bf00      	nop
}
 800371a:	46bd      	mov	sp, r7
 800371c:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8003720:	4685      	mov	sp, r0
 8003722:	4770      	bx	lr
 8003724:	40014400 	.word	0x40014400
 8003728:	20000518 	.word	0x20000518
 800372c:	20000004 	.word	0x20000004
 8003730:	2000051c 	.word	0x2000051c
